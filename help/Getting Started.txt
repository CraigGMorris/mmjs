{
	"Program": "Rtm",
	"Version": 3,
	"DetailWidth": 320,
	"DeviceWidth": 1024,
	"UserUnitSets": {},
	"UserUnits": [
		"squash = 1e8 N/acre"
	],
	"CaseName": "Getting Started",
	"DefaultUnitSet": "SI",
	"SelectedObject": "root",
	"ModelPath": "/.root",
	"RootModel": {
		"name": "root",
		"Notes": "",
		"DiagramX": -12321,
		"DiagramY": -12321,
		"HideInfo": "n",
		"DiagramNotes": "n",
		"HtmlNotes": "n",
		"Type": "Model",
		"diagramScale": 1,
		"Objects": [
			{
				"name": "Models",
				"Notes": "<b>Models</b> - you are viewing the top or <b>root</b> model. It in turn contains other models, which contain their own tools and have their own diagram.\n\nTap on this note in the model view or on the diagram icon called <b>Models</b> one called Models to open it.",
				"DiagramX": 80,
				"DiagramY": 5,
				"HideInfo": "y",
				"DiagramNotes": "y",
				"HtmlNotes": "y",
				"Type": "Model",
				"diagramScale": 1,
				"Objects": [
					{
						"name": "square",
						"Notes": "This expression calculates the square of the \"Length\" expression.\n\nNote that a line connects this icon to the \"Length\" icon.  Icons are automatically connected from the middle of a vertical side to a corner of the icons of any inputs they use.\n\nTap on:\n\n< root\n\nat the upper left of diagram to return to the root model.",
						"DiagramX": 210,
						"DiagramY": 5,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "length ^ 2"
						},
						"showInput": "y"
					},
					{
						"name": "Length",
						"Notes": "Math Minion tools, such as these expressions, are displayed on their parent model's diagram as rectangular icons.\n\nThese are automatically connected from one of their corners corners to the middle of a vertical side of every tool that uses their value.\n\nThe input for this expression is just\n\n2 m + 200 in\n\nwhich adds 200 inches to 2 metres.\n\nThe calculated result will appear at the bottom of the information view.\n\nOnce calculated a representation of the result will appear in the icon for an expression.",
						"DiagramX": 130,
						"DiagramY": 5,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "2 m + 200 in"
						},
						"showInput": "y"
					},
					{
						"name": "Speed",
						"Notes": "<b>Speed</b> is a stand alone, unconnected expression.\n\nAn expression simply evaluates a single formula, but is the work horse of most calculations.",
						"DiagramX": 40,
						"DiagramY": 40,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "100 m / 3 s"
						},
						"showInput": "y",
						"displayUnit": "mph"
					},
					{
						"name": "Overview",
						"Notes": "<b>Models</b>\n\nYou are now in a model contained within the root model. It has its own diagram and tools and these tools can have the same names as other tools in other models. In this case all of the tools are just expressions.\n\nTo return to the parent model, click on\n\n   <b>< root</b>\n\nat the upper left of the diagram or information view.\n\nTapping on a diagram tool icon will result in a view containing information about the tool being presented.\n\nTools that have their <b>Display</b> box checked will appear in the model's information view. Tool notes can also be set to appear above the tool in the view, or like this note, be displayed by itself.\n\nExpressions can also designate that they should <b>Display Input</b> in the model information view.\n\nThe order that the tools appear in the view depends on their position in the diagram, with tools farther left appearing first and ties showing the top most first.\n\nTapping on a name box or notes for a tool will display the information view for that tool.\n\nThe other three experssions in this model are displayed below, with their input fields and notes.",
						"DiagramX": 40,
						"DiagramY": 5,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": ""
						}
					}
				]
			},
			{
				"name": "Units",
				"Notes": "<b>Units</b> introduces Math Minion's rather clever conversion unit system.",
				"DiagramX": 155,
				"DiagramY": -35,
				"HideInfo": "n",
				"DiagramNotes": "y",
				"HtmlNotes": "y",
				"Type": "Model",
				"diagramScale": 1,
				"Objects": [
					{
						"name": "Units",
						"Notes": "A value with an acceleration unit. Because the current default units are SI, its result value is shown in those units. However you can select any compatible unit for the display.",
						"DiagramX": -70,
						"DiagramY": 35,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "32.174 ft/s^2"
						},
						"showInput": "y"
					},
					{
						"name": "Length",
						"Notes": "An expression with a length unit.",
						"DiagramX": 5,
						"DiagramY": 5,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "20 km"
						},
						"showInput": "y"
					},
					{
						"name": "Hours",
						"Notes": "An expression with a time unit of hours",
						"DiagramX": 5,
						"DiagramY": 45,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "0.25 h"
						},
						"showInput": "y"
					},
					{
						"name": "Minutes",
						"Notes": "A time value with a unit of minutes.",
						"DiagramX": 5,
						"DiagramY": 95,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "30 min"
						},
						"showInput": "y"
					},
					{
						"name": "Velocity",
						"Notes": "When a length is divided by time, the resulting value will be a velocity.",
						"DiagramX": 90,
						"DiagramY": 15,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "Length / Hours"
						},
						"showInput": "y"
					},
					{
						"name": "AddTimes",
						"Notes": "You can't add values with different fundamental properties, but adding values with different units of the same type is always allowed.",
						"DiagramX": 90,
						"DiagramY": 45,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "Hours + Minutes"
						},
						"showInput": "y"
					},
					{
						"name": "Fraction",
						"Notes": "The default dimensionless unit for all the built-in unit sets is fraction.  Despite the name, these values are not constrained to be from 0 to 1 or 0 to 100.\n\nAs used in Math Minion, \"Fraction\" is just a generic description for  values which have powers of 0 for all of the fundamental SI properties.\n\nIn this expression, dividing the minutes value by the hours one causes the units to cancel out and the result is a \"Fraction\" value of 2.",
						"DiagramX": 90,
						"DiagramY": 95,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "Minutes / Hours"
						},
						"showInput": "y",
						"displayUnit": "Fraction"
					},
					{
						"name": "mph",
						"Notes": "This is the velocity value displayed in miles per hour.  The display unit is selected by tapping the displayed unit name. (If you are viewing this in the model view, tap on this note to see the expression view first.)\n\nThe display format has also been set to shown just two figures after the decimal point. This is done in the field to the right of the unit in the expression's view.",
						"DiagramX": 180,
						"DiagramY": 10,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "Velocity"
						},
						"showInput": "y",
						"displayUnit": "mph",
						"format": "10.2f"
					},
					{
						"name": "TableColumns",
						"Notes": "If the expression result is a table value, you can tap on the column name cell to enable selecting the display unit for that column.\n\nIf this case the default time unit of seconds has been replaced with hours in the first column, while the velocity unit has been left as the default.\n\nThe Times column has been set to show only two decimal places by means of a format specifier of <b>10.2f</b>, while the Velocity column has be given an exponential format of <b>12.6e</b>.",
						"DiagramX": 180,
						"DiagramY": 45,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "{table\n\t\"Times\", AddTimes,\n\t\"Velocity\", Velocity\n}"
						},
						"showInput": "y",
						"tableUnits": {
							"1": "h"
						},
						"tableFormats": [
							null,
							"10.2f",
							"12.6e"
						]
					},
					{
						"name": "Syntax",
						"Notes": "The unit must be separated from the number by a space and must only contain unit names and the operators <b>-</b>, <b>/</b> and <b>^</b>. There can only be a single <b>/</b>. Thus the following are all valid and are all equivalent to an energy of 123 kJ.\n\n<b>123 kj ' energy\n123 n-km ' also 123 kJ\n123000 kg-m^2/s^2 ' also 123 kJ</b>",
						"DiagramX": -70,
						"DiagramY": 65,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "123000 kg-m^2/s^2"
						},
						"showInput": "y"
					},
					{
						"name": "Syntax2",
						"Notes": "If the unit is to be followed by one of the operators that can appear in a unit (<b>-</b>, <b>/</b> or <b>^</b>) there must be white space separatingthe unit from the operator. Thus:\n\n\t<b>2 kg/3 h</b>\n\nwould result in an unidentified unit error.\n\n\t<b>2 kg*3 h</b>\n\nwould be legal, but it might be best to just always separate units from\noperators with a space. Note that both\n\n\t<b>2 m^3</b>\nand\n\t<b>2 m ^3</b>\n\nare legal, but the first results in 2 cubic metres, while the second yields 8 metres.",
						"DiagramX": -70,
						"DiagramY": 95,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "2 m ^3"
						},
						"showInput": "y"
					},
					{
						"name": "Overview",
						"Notes": "",
						"DiagramX": -70,
						"DiagramY": 5,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "n",
						"isOutput": "y",
						"Type": "HTML Form",
						"Formula": {
							"Formula": "'\n<style>\n\t#header {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 65px;\n\t\tgrid-gap: 10px;\n\t\tborder-bottom: 1px solid black;\n\t\tmargin-bottom: 10px;\n\t}\n\t#page {\n\t\tmargin-top: 10px;\n\t\tborder: solid 1px;\n\t\tpadding: 5px;\n\t\tbackground-color: #f2f2f2;\n\t}\n\t.link {\n\t\tcolor: blue;\n\t\tcursor: pointer;\n\t\tfont-weight: bold;\n\t}\n</style>\n<div id=\"page\">\n\t<div id=\"header\">\n\t\t<h3>Conversion Units</h3>\n\t</div>\n\t<p>\n\t\tThe Math Minion unit conversion system is deeply integrated with the calculation engine, which permits dimensional analysis on all calculations.\n\t</p>\n\t<p>\n\t\tPlease take time to\n\t\t<span class=\"link\"\n\t\t\tonClick=\"mmpost([], {mm_viewurl: 'help/units.html'})\">\n\t\t\tread about it in the documentation\n\t\t</span>.\n\t</p>\n\t<p>\n\t\t<b>Note:</b> assuming you are reading this in the model view, in the notes below you can tap on the note or the name header to display the expression being discussed and its controls for unit and format.\n\t</p>\n</div>"
						}
					}
				]
			},
			{
				"name": "tidbits",
				"Notes": "<b>Tidbits</b>\nJust some miscellaneous junk.",
				"DiagramX": 155,
				"DiagramY": 135,
				"HideInfo": "y",
				"DiagramNotes": "y",
				"HtmlNotes": "y",
				"Type": "Model",
				"diagramScale": 1,
				"Objects": [
					{
						"name": "geoping",
						"Notes": "Minimum time to ping geosynchronous satellite if you are right under it on the equator",
						"DiagramX": 120,
						"DiagramY": 225,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "2 * 35786 km / 1 lightc"
						},
						"showInput": "y",
						"displayUnit": "s"
					},
					{
						"name": "pascal",
						"Notes": "Calculates a Pascal triangle.",
						"DiagramX": 120,
						"DiagramY": 275,
						"HideInfo": "n",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "n",
								"Notes": "Number of rows in triangle",
								"DiagramX": 20,
								"DiagramY": 95,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": " 20"
								},
								"isInput": "y",
								"showInput": "y"
							},
							{
								"name": "triangle",
								"Notes": "Constructs a Pascal triangle.  Since it has to fit in a table it's shape is skewed into a right angled triangle.",
								"DiagramX": 100,
								"DiagramY": 95,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Matrix",
								"CellInputs": {
									"0_0": "{if {if {eq {row} 1}, {eq {col}, $.ncol},0},\n  1,\n  {if {row}-1,\n    {if {lt {col}, $.ncol},\n      {cell -1,1} + {cell -1, 0},\n      {cell -1, 0}},\n    0\n  }\n}",
									"1_100": "1"
								},
								"rowCount": "n",
								"columnCount": "n"
							}
						]
					},
					{
						"name": "triangle",
						"Notes": "Hmmm, matrices aren't triangular, so this triangle is skewed to the right, with the top element being in the rightmost  column of the top row.",
						"DiagramX": 120,
						"DiagramY": 305,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "pascal.triangle"
						},
						"showInput": "y"
					},
					{
						"name": "e_mc2",
						"Notes": "Energy from total annihilation of mass.  I.e. E = mc^2",
						"DiagramX": 120,
						"DiagramY": 170,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "80 \"kg\" * 1 \"lightc\"^2"
						},
						"showInput": "y",
						"displayUnit": "megatontnt"
					},
					{
						"name": "mpg_to_lp100km",
						"Notes": "Converts miles per US gallon to liters per 100 km.",
						"DiagramX": 40,
						"DiagramY": 225,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "mpg",
								"DiagramX": -50,
								"DiagramY": 40,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "28 mile/gal"
								},
								"isInput": "y",
								"showInput": "y",
								"displayUnit": "mile/gal",
								"format": "10.2f"
							},
							{
								"name": "lp100km",
								"DiagramX": 40,
								"DiagramY": 30,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "1/mpg"
								},
								"displayUnit": "lp100km",
								"format": "10.2f"
							},
							{
								"name": "kmpl",
								"DiagramX": 40,
								"DiagramY": 60,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "mpg"
								},
								"displayUnit": "km/l",
								"format": "10.2f"
							}
						]
					},
					{
						"name": "lp100km_to_mpg",
						"Notes": "Converts liters per 100 km into miles per US gallon.",
						"DiagramX": 40,
						"DiagramY": 265,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "lp100km",
								"DiagramX": -50,
								"DiagramY": 0,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "8.4 lp100km"
								},
								"isInput": "y",
								"showInput": "y",
								"displayUnit": "lp100km",
								"format": "10.2f"
							},
							{
								"name": "mpg",
								"DiagramX": -50,
								"DiagramY": 25,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "1/lp100km"
								},
								"displayUnit": "mile/gal",
								"format": "10.2f"
							},
							{
								"name": "kmpl",
								"DiagramX": -50,
								"DiagramY": 50,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "mpg"
								},
								"displayUnit": "km/l",
								"format": "10.2f"
							}
						]
					},
					{
						"name": "Constants",
						"Notes": "Miscellaneous physical constants.\n\nHopefully all correct, but user beware!",
						"DiagramX": 40,
						"DiagramY": 170,
						"HideInfo": "n",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Planck",
								"Notes": "h - Planck constant",
								"DiagramX": 15,
								"DiagramY": 45,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "6.62606957e-34 J-s"
								}
							},
							{
								"name": "GNewton",
								"Notes": "G - Newtonian constant of gravitation.",
								"DiagramX": 15,
								"DiagramY": 80,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "6.67384E-11 m^3/kg-s^2"
								}
							},
							{
								"name": "GasConstant",
								"Notes": "R - ideal gas constant.",
								"DiagramX": 15,
								"DiagramY": 120,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "8.3144621 J/K-mol"
								}
							},
							{
								"name": "Avogadro",
								"Notes": "Na- Avogadro's number - the number of molecules in a mole",
								"DiagramX": 15,
								"DiagramY": 155,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "6.02214129e23 1/mol"
								}
							},
							{
								"name": "Boltzmann",
								"Notes": "k - Boltzmann's constant",
								"DiagramX": 15,
								"DiagramY": 195,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "1.3806488e-23 j/k"
								}
							},
							{
								"name": "AtomicMassUnit",
								"Notes": "mu - Atomic mass unit",
								"DiagramX": 90,
								"DiagramY": 45,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "1.660538921e-27 kg"
								}
							},
							{
								"name": "ElectronMass",
								"Notes": "me - electron mass",
								"DiagramX": 90,
								"DiagramY": 80,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "9.109382991e-31 kg"
								}
							},
							{
								"name": "ProtonMass",
								"Notes": "mp - proton mass",
								"DiagramX": 90,
								"DiagramY": 120,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "1.672621777e-27 kg"
								}
							},
							{
								"name": "ElementaryCharge",
								"Notes": "e - elementary charge",
								"DiagramX": 90,
								"DiagramY": 155,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "1.602176565e-19 C"
								}
							},
							{
								"name": "ElectronVolt",
								"Notes": "eV - electron volt",
								"DiagramX": 90,
								"DiagramY": 195,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "1.602176565e-19 j"
								}
							}
						]
					}
				]
			},
			{
				"name": "Formulas",
				"Notes": "<b>Formulas</b> are the basis of all calculations.",
				"DiagramX": 155,
				"DiagramY": 10,
				"HideInfo": "n",
				"DiagramNotes": "y",
				"HtmlNotes": "y",
				"Type": "Model",
				"diagramScale": 1,
				"Objects": [
					{
						"name": "Operators",
						"Notes": "<b>Operators</b>\nThe available formula operators. (i.e. plus, minus, etc.)",
						"DiagramX": -75,
						"DiagramY": -5,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "scalar",
								"Notes": "A simple scalar constant, with a unit",
								"DiagramX": 45,
								"DiagramY": 85,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "1.5 m"
								},
								"showInput": "y"
							},
							{
								"name": "operators",
								"Notes": "An arbitrary formula with a mix of operators.",
								"DiagramX": 130,
								"DiagramY": 85,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "(scalar * 2 + 1 ft)^(mod - 1)"
								},
								"showInput": "y"
							},
							{
								"name": "Overview",
								"Notes": "The binary operators are:\n\n+ Add\n- Minus\n* Multiply\n/ Divide\n^ Power\n% Modulus\n: Range (see the \"Range\" object)\n\nThe precedence is (from higher to lower):\n\n:\n^\n* / %\n+ -\n\nParenthesis can be used as required to specify the calculation order.\n\nSee “Arrays” in the parent model for examples of how these work with arrays and matrices.",
								"DiagramX": 45,
								"DiagramY": 50,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							},
							{
								"name": "mod",
								"Notes": "Using the modulus operator",
								"DiagramX": 45,
								"DiagramY": 125,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "7 % 4"
								},
								"showInput": "y"
							},
							{
								"name": "comments",
								"Notes": "",
								"DiagramX": 130,
								"DiagramY": 125,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "# hashtags, like the ones\n# starting these lines can\n# be used for comments\n{if {gt operators, 10 m^2},\n\t\"big\",  # bigger than 10\n\t\"small\" # 10 or less\n}"
								},
								"showInput": "y"
							}
						]
					},
					{
						"name": "Functions",
						"Notes": "<b>Functions</b>\nBasic use of functions.",
						"DiagramX": -75,
						"DiagramY": 25,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "log",
								"Notes": "Uses the ln function to calculate the natural logarithms of an array of values.",
								"DiagramX": 45,
								"DiagramY": 55,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{ln 1.3 * 1:5}"
								},
								"showInput": "y"
							},
							{
								"name": "Overview",
								"Notes": "<b>Functions</b>\n\nA function call in Math Minion consists of an opening curly brace \"<b>{</b>\" immediately followed by the function name, followed by a space and a comma separated list of parameters as appropriate and finally a closing curly brace \"<b>}</b>\".\n\nWhen used with arrays and matrices, the function is applied to each element of the parameter(s) in turn, except for some matrix specific functions, like \"dot\", \"invert\", \"transpose\", etc.\n\nWhen entering a formula, use the <b>Functions</b> button in the function editor to see a list of available functions.\n\nThere is additional information on functions in the other models in the <b>Formulas</b> model.",
								"DiagramX": 45,
								"DiagramY": 25,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							},
							{
								"name": "nested",
								"Notes": "Nested functions, sorting some random numbers.\nWhy not?",
								"DiagramX": 45,
								"DiagramY": 105,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{sort {rand 5}}"
								},
								"showInput": "y"
							},
							{
								"name": "Arguments",
								"Notes": "If the function takes multiple arguments, they are separated by commas.",
								"DiagramX": 45,
								"DiagramY": 150,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{split \"Tom Dick Harry\", \" \"}"
								},
								"showInput": "y"
							}
						]
					},
					{
						"name": "Scalars",
						"Notes": "<b>Scalars</b>\nThe most basic formula.",
						"DiagramX": -75,
						"DiagramY": -35,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "scalar",
								"Notes": "A simple scalar constant, without units. \n\nTap on the icon to see the expression information view.\n",
								"DiagramX": 35,
								"DiagramY": 10,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "1.5"
								},
								"showInput": "y"
							},
							{
								"name": "small",
								"Notes": "Shows the use of exponential input",
								"DiagramX": 125,
								"DiagramY": 10,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "-4.23e-5"
								},
								"showInput": "y"
							},
							{
								"name": "WithUnits",
								"Notes": "A scalar constant with a designated unit, in this case \"cm\".\n\nThe output is reported in \"m\" as that is the default output unit for length in the currently selected unit system.  \n\nThe displayed unit can be changed by tapping on the info button to the right of the output unit.\n\nSee \"Units\" in the main model for a more examples of Math Minion's conversion unit system and its ability to help with dimensional analysis.",
								"DiagramX": 35,
								"DiagramY": 70,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "50 cm"
								},
								"showInput": "y"
							}
						]
					},
					{
						"name": "Arrays",
						"Notes": "<b>Arrays</b>\nOperations on arrays.",
						"DiagramX": -75,
						"DiagramY": 55,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Range",
								"Notes": "Range: Using the range operator \":\" to create column arrays.",
								"DiagramX": 20,
								"DiagramY": 15,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Range",
										"Notes": "The range operator \":\" can be used to create a column array with integer values starting at the first operand value and proceeding in increments of 1 to the second operand value.\n\nHere 1:20 produces an array:\n\n1,2,3,4,…19,20",
										"DiagramX": 20,
										"DiagramY": 15,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1:20"
										},
										"showInput": "y"
									},
									{
										"name": "Range_2",
										"Notes": "Combined with other arithmetic operators, this can be used to initialize value arrays of any sort.  For instance:\n\n1:20 * 2\n\nwould result in an array 20 long having members:\n\n2, 4, 6, 8, ... 38, 40\n",
										"DiagramX": 20,
										"DiagramY": 105,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1:20 * 2"
										},
										"showInput": "y"
									},
									{
										"name": "Range_3",
										"Notes": "The range operator has the highest precedence, so you would need the parenthesis in the following to get an array from 1 to 40:\n\n1:(20*2)\n \nYou can scroll the result display by dragging to see additional members.  \n\nDragging the row header column will scroll quickly.",
										"DiagramX": 105,
										"DiagramY": 15,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1:(20*2)"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Transpose",
								"Notes": "Transpose: Using transpose to change a column array into row array.",
								"DiagramX": 95,
								"DiagramY": 15,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Array",
										"Notes": "A column array from 1 to 20",
										"DiagramX": 25,
										"DiagramY": 35,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1:20"
										},
										"showInput": "y"
									},
									{
										"name": "Transpose",
										"Notes": "The transpose function, normally abbreviated as tr, can be used to rotate a matrix.  In this case it has transformed the column array “array” into a row array.\n\nYou can scroll result matrix by dragging to see additional values.\n\nIn the transpose information view, dragging on the column header will scroll quickly.",
										"DiagramX": 100,
										"DiagramY": 35,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{tr array}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Multiply",
								"Notes": "Multiply: Multiplying an array by a scalar.",
								"DiagramX": 20,
								"DiagramY": 105,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Array",
										"Notes": "A column array from 1 to 20.",
										"DiagramX": 45,
										"DiagramY": 100,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1:20"
										},
										"showInput": "y"
									},
									{
										"name": "WithUnits",
										"Notes": "A scalar constant of 50 cm.\n",
										"DiagramX": 45,
										"DiagramY": 135,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "n",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "50 cm"
										},
										"showInput": "y"
									},
									{
										"name": "multiply",
										"Notes": "Multiply WithUnits times Array",
										"DiagramX": 135,
										"DiagramY": 60,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "WithUnits*Array"
										},
										"showInput": "y"
									},
									{
										"name": "Overview",
										"Notes": "The column array “Array” is multiplied by the scalar \"WithUnits\".\n\nThe result is a column array with each element of “Array” multiplied by the value of \"WithUnits\".\n\nSince \"WithUnits\" has a unit of length and “Array” has no units, the result also has a unit of length.\n\nNote that we could not have added these two values since Math Minion does not permit values with different unit types to be added.\n\nWe could of course have multiplied “Array” with a suitable constant that had a length unit before adding them though.\n\nSee \"Units” in the root model for more examples of conversion units.",
										"DiagramX": 45,
										"DiagramY": 65,
										"HideInfo": "n",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									}
								]
							},
							{
								"name": "Indices",
								"Notes": "Indices: Getting array and matrix elements.",
								"DiagramX": 95,
								"DiagramY": 105,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Matrix",
										"Notes": "The array function is used to generate a 10 x 10 matrix.",
										"DiagramX": 25,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{array 10, 10, 1:100}"
										},
										"showInput": "y"
									},
									{
										"name": "indices",
										"Notes": "Elements of a value can be accessed by using indices inside square brackets.\n\nThe indices can be arrays themselves.  \n\nIn this case I have used ranges to create a subset of the “Matrix” expression value.",
										"DiagramX": 115,
										"DiagramY": 5,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "matrix[5:6,2:3]"
										},
										"showInput": "y"
									},
									{
										"name": "rowIndex",
										"Notes": "If only the row index is given, the entire row(s) is returned.",
										"DiagramX": 115,
										"DiagramY": 90,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "Matrix[5]"
										},
										"showInput": "y"
									},
									{
										"name": "columnIndex",
										"Notes": "To select entire columns, an index of 0 can be used for the row index.",
										"DiagramX": 115,
										"DiagramY": 135,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "matrix[0,5]"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Array_Function",
								"Notes": "Array_Function: The array function is used to create an array or matrix.",
								"DiagramX": 20,
								"DiagramY": 60,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Matrix",
										"Notes": "The array function in this expression\n\n{array 3, 2, 1:2}\n\nhas three parameters, in which case the first is the number of rows and the second the number of columns the resulting matrix should have.\n\nThe third parameter is the value(s) that the elements should have and if it is an array, then its values are used in order on a row by row basis until the matrix if filled.\n\nHere the value parameter is an array with the elements 1 and 2.",
										"DiagramX": 110,
										"DiagramY": 10,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{array 3, 2, 1:2}"
										},
										"showInput": "y"
									},
									{
										"name": "Array",
										"Notes": "Arrays and matrices can be created with the array function.  This takes either two or three parameters.\n\nIf there are only two parameters, as with this expression,\n\n{array 5, 2}\n\nthen the first is the number of rows the resulting column array should have.\n\nThe second parameter will be the value(s) to be placed in array elements.\n\nIf this second parameter is itself an array, its values will be cycled through in order until the new array is completely populated.\n",
										"DiagramX": 20,
										"DiagramY": 10,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{array 5, 2:3}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "ColXRow",
								"Notes": "ColXRow: Overview of arithmetic operations between matrices of different shapes.",
								"DiagramX": 95,
								"DiagramY": 60,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Column",
										"Notes": "A column array from 1 to 20.",
										"DiagramX": 105,
										"DiagramY": -20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1:20"
										},
										"showInput": "y"
									},
									{
										"name": "Row",
										"Notes": "A row array from 21 to 40, using the range operator and transpose function.",
										"DiagramX": 15,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{tr 21:40}"
										},
										"showInput": "y"
									},
									{
										"name": "ColXRow",
										"Notes": "Column times row. The result is a 20x20 matrix.",
										"DiagramX": 105,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "column * row"
										},
										"showInput": "y"
									},
									{
										"name": "Overview",
										"Notes": "When any binary arithmetic operator is used between two matrices of different shapes, the result is a matrix with the number of rows and columns each equal to the larger of the respective values for the two operands.\n\nThus a 2x8 matrix added to a 4x2 matrix will yield a 4x8 result. The value at row i and column j will be the product of the values at the corresponding indices in the operands.\n\nWhen the index is greater than the number of rows or columns for the operand, the row and column values are repeated in order as necessary to fill in the result.\n\nIn this case a column array is multiplied by a row array to produce a matrix.\n\nNote that if a <b>matrix product</b>, i.e. an inner product, is required, use the <b>dot</b> function.",
										"DiagramX": 15,
										"DiagramY": -20,
										"HideInfo": "n",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									}
								]
							}
						]
					},
					{
						"name": "Comparisons",
						"Notes": "<b>Comparisons</b>\nThe \"if\" function and associated comparison functions can be used to create calculation branches.",
						"DiagramX": -75,
						"DiagramY": 85,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Array_Length",
								"Notes": "An array of lengths.",
								"DiagramX": 35,
								"DiagramY": 65,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{cc 1, -2, 3, -4, 5} * 1 m"
								},
								"showInput": "y"
							},
							{
								"name": "Array_if",
								"Notes": "Here an array is checked to see if it is less than or equal to a scalar.\n\nThe less than or equal function, le, will return an array with values\n\n0, 1, 0, 1, 0\n\nThis will be used to select either the scalar second argument, 1 cm, or the value in the corresponding position of Array_Length for each position of the result.",
								"DiagramX": 35,
								"DiagramY": 100,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{if {le array_length, 0 m},\n  1 cm,\n  array_length\n}"
								},
								"showInput": "y"
							},
							{
								"name": "Scalar_If",
								"Notes": "This “if” function returns the lessor of 2 m or Scalar_Length.\n\nThe less than function, lt, returns 1 if the first argument is less than the second or zero otherwise.\n\nSince it returns 1, the first argument is the one returned by the if function.",
								"DiagramX": -55,
								"DiagramY": 135,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{if {lt 2 m, scalar_length},\n  2 m,\n  scalar_length\n}"
								},
								"showInput": "y"
							},
							{
								"name": "Scalar_Length",
								"Notes": "A scalar length\n",
								"DiagramX": -55,
								"DiagramY": 100,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "10 ft"
								},
								"showInput": "y"
							},
							{
								"name": "Overview",
								"Notes": "The if function takes three parameters:\n\nIf the first parameter is unknown, then the result is also unknown.\n\nNote that in these expressions, the first parameter is the result of a function.\n\nIf the first parameter yields a nonzero scalar result, then the result of the second parameter is returned.\n\nIf the result of the first parameter is a scalar value of zero, the third parameter is returned.\n\nIf the result of the first parameter is not a scalar, then the second and third parameters must be the same size as the first is and the result will be an element by element selection of the respective second and third parameter elements based on the first parameter element being zero or not.",
								"DiagramX": -55,
								"DiagramY": 65,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							},
							{
								"name": "Arrays_if",
								"Notes": "Here all the parameters are arrays",
								"DiagramX": 35,
								"DiagramY": 225,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{if {cc 1, 1, 0, 0, 1},\n\t1:5,\n\t-5:-1\n}"
								},
								"showInput": "y"
							},
							{
								"name": "min",
								"Notes": "The above could be done more succinctly with the min function.",
								"DiagramX": -55,
								"DiagramY": 235,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{min 2 m, scalar_length}"
								},
								"showInput": "y"
							}
						]
					},
					{
						"name": "Date_And_Time",
						"Notes": "<b>Date_and_Time</b>\nDate and time units and functions.",
						"DiagramX": 5,
						"DiagramY": -65,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"indexTool": "dateunit",
						"Objects": [
							{
								"name": "Input_Output",
								"Notes": "Examples of different date units",
								"DiagramX": 480,
								"DiagramY": 520,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "InputDate",
										"Notes": "The date and time of Apollo 11's landing on the moon is input using the date unit and displayed with the same unit.\n",
										"DiagramX": 20,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "19690720.2018 date"
										},
										"showInput": "y",
										"displayUnit": "date",
										"format": "14.4f"
									},
									{
										"name": "OutDateD",
										"Notes": "This is the InputDate value displayed with the dated unit, which has the format\nddmmyyyy.hhmmss.",
										"DiagramX": 20,
										"DiagramY": 75,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "InputDate"
										},
										"showInput": "y",
										"displayUnit": "dated",
										"format": "14.4f"
									},
									{
										"name": "OutputDateM",
										"Notes": "This is the InputDate value displayed with the datem unit, which has the format\nmmddyyyy.hhmmss.",
										"DiagramX": 20,
										"DiagramY": 125,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "OutDateD"
										},
										"showInput": "y",
										"displayUnit": "datem",
										"format": "14.4f"
									},
									{
										"name": "InputDateM",
										"Notes": "The date and time of Apollo 11's landing on the moon is input using the datem unit and displayed with the same unit.\n\nThe datem format is\nddmmyyyy.hhmmss.",
										"DiagramX": 180,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "07201969.2018 datem"
										},
										"showInput": "y",
										"displayUnit": "datem"
									},
									{
										"name": "InputDateD",
										"Notes": "The date and time of Apollo 11's landing on the moon is input using the dated unit and displayed with the same unit.\n\nThe dated format is\nddmmyyyy.hhmmss.",
										"DiagramX": 105,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "20071969.2018 dated"
										},
										"showInput": "y",
										"displayUnit": "dated"
									}
								]
							},
							{
								"name": "Functions",
								"Notes": "Examples of functions that deal with date and time.",
								"DiagramX": 480,
								"DiagramY": 560,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "DateFunc",
										"Notes": "The date function converts a time into a dimensionless number of the form:\n\nyyyymmdd.hhmmss\n",
										"DiagramX": 115,
										"DiagramY": -65,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{date {now}}"
										},
										"showInput": "y",
										"format": "14.4f"
									},
									{
										"name": "MktimeFunc",
										"Notes": "The mktime function is the inverse of the date function.  It takes a dimensionless number of the form yyyymmdd.hhmmss and converts it into the number of seconds since 00:00 Jan 1, 1970 GMT.\n\nThe result can of course be displayed with any time unit.",
										"DiagramX": 115,
										"DiagramY": -5,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{mktime DateFunc}"
										},
										"showInput": "y",
										"displayUnit": "date",
										"format": "14.4f"
									},
									{
										"name": "Now",
										"Notes": "The current time in seconds since 00:00 January 1, 1970. GMT.\n\nSince expressions cache their results unless they are changed, this value will only be calculated when first viewed in a given session.\n\nTo force it to update, click the equals  button to the left of the formula field.\n\nSince no display unit has been assigned, it is displayed in seconds.",
										"DiagramX": 25,
										"DiagramY": -65,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{now}"
										},
										"showInput": "y",
										"format": "14.2f"
									},
									{
										"name": "HumanNow",
										"Notes": "By using the date display unit, we get a more readable date and time.  Unless you are in the GMT time zone though, it won't represent your local time.\n",
										"DiagramX": 25,
										"DiagramY": 65,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{now}"
										},
										"showInput": "y",
										"displayUnit": "date",
										"format": "14.4f"
									},
									{
										"name": "NowWithTZ",
										"Notes": "By adding the result of the {timezone} function, we can convert a time from GMT to our local timezone.\n",
										"DiagramX": 25,
										"DiagramY": 130,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{now} + {timezone}"
										},
										"showInput": "y",
										"displayUnit": "date",
										"format": "14.4f"
									}
								]
							},
							{
								"name": "DateTime",
								"Notes": "<b>Date Unit</b>\n\nDate and time in Math Minion is simply a measure of the number of seconds since 00:00 January 1, 1970.\n\nHowever since X billion seconds isn't all that comprehensible a date measurement, there is a special date unit for time, which will output a time value in the form:\n\n   <b>yyyymmdd.hhmmss</b>\n\nIn other words the date in year, month day before the decimal point and the time in hours, minutes and seconds after the decimal point.\n\nThere are two additional time units available which can be used to input or display alternate date formats:\n\n   <b>dated - ddmmyyyy.hhmmss</b>\n   <b>datem - mmddyyyy.hhmmss</b>\n\nThe current time, displayed with a date unit.",
								"DiagramX": 395,
								"DiagramY": 520,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{now}"
								},
								"showInput": "y",
								"displayUnit": "date",
								"format": "14.4f"
							}
						]
					},
					{
						"name": "Strings",
						"Notes": "<b>Strings</b>\nOperations and functions for strings.",
						"DiagramX": 5,
						"DiagramY": -35,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "aString",
								"Notes": "A string is represented by text surrounded by double quotes.",
								"DiagramX": 30,
								"DiagramY": -70,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "\"The quick red fox\""
								},
								"showInput": "y"
							},
							{
								"name": "Multiline",
								"Notes": "<b>Multiline</b>\nString that have more than one line.",
								"DiagramX": 105,
								"DiagramY": -70,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Multiline",
										"Notes": "A string can span more than one line.  As with normal strings, it must begin and end with double quotes.\n\nAlternatively, if the formula starts with a single quote, normally the comment character, then everything that follows it will be considered a string value and a closing quote is not necessary.\n\nA long string like this won't fit into an expression's result display cell, but clicking on a string cell will produce a view of the entire string.",
										"DiagramX": 25,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "\"A string can span more than one line.  As with normal strings, it must begin and end with double quotes.\n\nAlternatively, if the formula starts with a single quote, normally the comment character, then everything that follows it will be considered a string value and a closing quote is not necessary.\n\nA long string like this won't fit into an expression's result display cell, but clicking on a string cell will produce a view of the entire string.\""
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Format",
								"Notes": "<b>Format</b>\nFormatting numbers",
								"DiagramX": 105,
								"DiagramY": 0,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Format",
										"Notes": "A number can be formatted using the fmt function.\n\nThe first first parameter should be a string containing a number format specification, such as \"12.2f\", which designates a field 12 characters wide, with two decimal places in floating point format.\n\nTable cells are 14 characters wide, so this leaves two spaces to the right of the value.\n\nNote that numbers in Math Minion are always real numbers, not integers.",
										"DiagramX": 15,
										"DiagramY": 15,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{fmt \"12.2f\", 12.1234}"
										},
										"showInput": "y"
									},
									{
										"name": "Format_Unit",
										"Notes": "An optional third parameter can be supplied to the fmt function and if present, it should be a string that is the name of the unit to be used for the number.\n\nThis unit must be of the same unit type as the number being formatted.\n\nIn this case the number is dimensionless and a percentage unit is requested.",
										"DiagramX": 110,
										"DiagramY": 15,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{fmt \"12.2f\", 12.1234, \"%\"}"
										},
										"showInput": "y"
									},
									{
										"name": "DisplayFormat",
										"Notes": "Note that you can set the display format on some tools, like this expression. It has a display format of\n12.2f and so is displayed appropriately without having to use the fmt function.",
										"DiagramX": 110,
										"DiagramY": 130,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "123.4567"
										},
										"showInput": "y",
										"format": "12.2f"
									},
									{
										"name": "CommaFormat",
										"Notes": "You can replace the f with a c to have commas included.",
										"DiagramX": 15,
										"DiagramY": 165,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{fmt `12.2c`, 12345678.1234}"
										},
										"showInput": "y"
									},
									{
										"name": "ExpFormat",
										"Notes": "Or use an 'e' specifier for exponential format.",
										"DiagramX": 15,
										"DiagramY": 205,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{fmt \"12.6e\", 12345678.1234}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Arrays",
								"Notes": "<b>Arrays</b>\nArrays of strings",
								"DiagramX": 105,
								"DiagramY": 30,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "length",
										"Notes": "The strlen function returns the length of the elements of a string value.",
										"DiagramX": 15,
										"DiagramY": 60,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{strlen Names}"
										},
										"showInput": "y",
										"format": "8.0f"
									},
									{
										"name": "upperCase",
										"Notes": "Makes all characters uppercase.",
										"DiagramX": 15,
										"DiagramY": 105,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{uppercase Names}"
										},
										"showInput": "y"
									},
									{
										"name": "Join",
										"Notes": "The join function creates a single string from an array of strings and a separator string.",
										"DiagramX": 15,
										"DiagramY": 145,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{join Names, \" and \"}"
										},
										"showInput": "y"
									},
									{
										"name": "lowerCase",
										"Notes": "Makes all characters lowercase.",
										"DiagramX": 110,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{lowercase upperCase}"
										},
										"showInput": "y"
									},
									{
										"name": "split",
										"Notes": "The split function separates a string into parts.  If there are just two arguments, the first is the string to split and the second is the character or phrase to split upon.\n\nIf the string has more than one column and more than one row, the result will be one row per value of s, with each value split into columns.\n\nAlso an optional third parameter can be supplied, in which case the second parameter is used to separate the columns and the third parameter is used to separate the rows, resulting in a string matrix. In this case, only the first value of the string is used (i.e. element 1,1).",
										"DiagramX": 110,
										"DiagramY": 60,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{split join, \" \"}"
										},
										"showInput": "y"
									},
									{
										"name": "Names",
										"Notes": "String arrays are allowed.",
										"DiagramX": 15,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{cc \"tom\", \"dick\", \"harry\"}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Examples",
								"Notes": "<b>Examples</b>\nIllustrates the use of a number of string functions.  See the function browser for a complete list.",
								"DiagramX": 105,
								"DiagramY": 90,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Numbers",
										"Notes": "A matrix of numbers to use with string functions.\n",
										"DiagramX": 25,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "-7:7+{tr 1:2}/10"
										},
										"showInput": "y"
									},
									{
										"name": "multiFmt",
										"Notes": "Just to confuse things, here an array of format statements is created using a fmt function and a range.  ",
										"DiagramX": 25,
										"DiagramY": 65,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "\"9.\" + {fmt \"1.0f\", 1:3} + \"f\""
										},
										"showInput": "y"
									},
									{
										"name": "columnFmt",
										"Notes": "Here we are creating a row array with different format strings for each column.",
										"DiagramX": 25,
										"DiagramY": 120,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{transpose\n\t{concat \n\t\t\"10.2f\", \n\t\t\"10.3f\"\n\t}\n}"
										},
										"showInput": "y"
									},
									{
										"name": "formattedMatrix",
										"Notes": "Here multFmt, the fabricated column array of format strings, is applied to a matrix of numbers.\n\nSince there are fewer format rows than number rows, the format array is repeated as necessary in the same way that matrix operations work with numbers.\n\nTap on this note to view the expression result with the leading spaces. The html representation of the model view will strip them out.",
										"DiagramX": 105,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{fmt multiFmt, numbers, \"%\" } "
										},
										"showInput": "y"
									},
									{
										"name": "formattedColumns",
										"Notes": "When the row format is used with the number matrix, the individual columns are formatted appropriately.",
										"DiagramX": 105,
										"DiagramY": 120,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{fmt columnFmt, numbers } "
										},
										"showInput": "y"
									},
									{
										"name": "matrixAddition",
										"Notes": "The rules for adding different dimension string values are the same as for number values.",
										"DiagramX": 195,
										"DiagramY": 230,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "\"X =  \" + formattedColumns"
										},
										"showInput": "y"
									},
									{
										"name": "find",
										"Notes": "The strfind function searches the first argument for the regular expression represented by the second argument. In this case it means searching for a string of digits.\n\nA numeric matrix is returned, with two columns and one row for each element of the searched value.  The position of the start of the first occurrence of expression will be in the first column and the length in the second column.  If the searched value is a matrix, the order of the results will be row by row.\n\nIf the expression is not found, the position will be a huge value and the length 0.",
										"DiagramX": 190,
										"DiagramY": 10,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{strfind formattedMatrix, \"\\d+\"}"
										},
										"showInput": "y",
										"format": "14.0f"
									},
									{
										"name": "subString2",
										"Notes": "If the substr function contains a third parameter, it will be used as the length of the sub string.\n\nNote here how the 30 elements of each column of the find expression are used correctly in order with the elements of the 15x2 elements of formattedMatrix.\n\nThe result is the first set of digits found in each element of formattedMatrix.",
										"DiagramX": 190,
										"DiagramY": 45,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{substr formattedMatrix,\n\tfind[0,1], find[0,2]}"
										},
										"showInput": "y"
									},
									{
										"name": "JoinMatrix",
										"Notes": "Joining a matrix will produce a single column array with all the columns joined together.  Here the columns of formattedColumns are joined by a string consisting of some spaces and ->.",
										"DiagramX": 195,
										"DiagramY": 85,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{join formattedColumns, \"\t->\"}"
										},
										"showInput": "y"
									},
									{
										"name": "Join2",
										"Notes": "With three parameters, the second is used to join columns and the third to join rows.  Note that the third parameter is a newline in quotes.\n\nSame as nested joins",
										"DiagramX": 195,
										"DiagramY": 120,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{join formattedColumns, \"\t->\t\", \"\n\"}"
										},
										"showInput": "y"
									},
									{
										"name": "Match",
										"Notes": "The match function will return the first string in each string value element, that is matched by a regular expression.  Here the regular expression  designates that a decimal point followed by 0 or more digits is to be matched.",
										"DiagramX": 195,
										"DiagramY": 155,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{match \"\\.\\d*\" formattedColumns }"
										},
										"showInput": "y"
									},
									{
										"name": "Replace",
										"Notes": "The replace function returns a string value where each element is transformed by applying a regular expression replacement.  The first parameter is the string to match, while the second is the replacement and the third the source string value.\n\nHere every digit is replaced with the character \"x\".",
										"DiagramX": 195,
										"DiagramY": 195,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{replace \"\\d\", \"x\", formattedColumns} "
										},
										"showInput": "y"
									},
									{
										"name": "JoinJoin",
										"Notes": "Using join again to create a single string, with each row separated by a newline character.",
										"DiagramX": 280,
										"DiagramY": 10,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{join JoinMatrix, \"\\n\"}"
										},
										"showInput": "y"
									},
									{
										"name": "split2",
										"Notes": "With three parameters, the second parameter is used to split the string into columns, while the third splits it into rows.",
										"DiagramX": 280,
										"DiagramY": 45,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "n",
										"Type": "Expression",
										"Formula": {
											"Formula": "{split join2, \"\t->\t\", \"\n\"}"
										}
									},
									{
										"name": "indexof",
										"Notes": "The indexOf function works with strings, but it must be an exact match.",
										"DiagramX": 280,
										"DiagramY": 80,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{indexof \".200\", match}"
										},
										"showInput": "y"
									},
									{
										"name": "equal",
										"Notes": "Check that strings are equal",
										"DiagramX": 280,
										"DiagramY": 120,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{eq match, \".10\"}"
										},
										"showInput": "y",
										"format": "8.0f"
									},
									{
										"name": "aString",
										"Notes": "",
										"DiagramX": 285,
										"DiagramY": 155,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "\"Hello World\""
										},
										"showInput": "y"
									},
									{
										"name": "subString",
										"Notes": "With just two parameters, the substr function returns the portion of the string in the first parameter starting at the character position given by the second parameter and continuing to the end of the string.\n\nIf the first parameter has more elements than the second, the second's elements will be reused as necessary.",
										"DiagramX": 285,
										"DiagramY": 240,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{substr aString 7}"
										},
										"showInput": "y"
									},
									{
										"name": "subString2Copy",
										"Notes": "If the substr function contains a third parameter, it will be used as the length of the sub string.\n",
										"DiagramX": 285,
										"DiagramY": 185,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{substr aString, 7, 3}\n"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Addition",
								"Notes": "<b>Addition</b>\nAdding strings with the + operator, concatenates them.",
								"DiagramX": 105,
								"DiagramY": -40,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "\"hello \" + \"world\""
								},
								"showInput": "y"
							},
							{
								"name": "String_Logicals",
								"Notes": "<b>String_Logicals</b>\nComparison of strings",
								"DiagramX": 105,
								"DiagramY": 60,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "le",
										"Notes": "Boolean functions and strings",
										"DiagramX": 100,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{le \"ab\", \"abc\"}"
										},
										"showInput": "y",
										"format": "8.0f"
									},
									{
										"name": "lt",
										"DiagramX": 100,
										"DiagramY": 50,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "n",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{lt \"ab\", \"abc\"}"
										},
										"showInput": "y",
										"format": "8.0f"
									},
									{
										"name": "ge",
										"DiagramX": 100,
										"DiagramY": 70,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "n",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{ge \"ab\", \"abc\"}"
										},
										"showInput": "y",
										"format": "8.0f"
									},
									{
										"name": "gt",
										"DiagramX": 100,
										"DiagramY": 90,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "n",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{gt \"ab\", \"abc\"}"
										},
										"showInput": "y",
										"format": "8.0f"
									},
									{
										"name": "and",
										"DiagramX": 100,
										"DiagramY": 110,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "n",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{and \"\", \"abc\"}"
										},
										"showInput": "y",
										"format": "8.0f"
									},
									{
										"name": "or",
										"DiagramX": 100,
										"DiagramY": 130,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{or \"\", \"abc\"}"
										},
										"showInput": "y"
									},
									{
										"name": "not",
										"DiagramX": 100,
										"DiagramY": 150,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{not \"a\"}"
										},
										"showInput": "y",
										"format": "8.0f"
									},
									{
										"name": "ifBlank",
										"Notes": "If a string value is used as a condition in an if function, a blank string will evaluate as false, while all others will be true.\n\nIn this case, the third element of the condition is blank, so the result will use the third element of the third parameter.",
										"DiagramX": 20,
										"DiagramY": 100,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{if\t{cc \"a\",\"b\",\"\",\"d\"},\n\t{cc 1, 2, 3, 4},\n\t{cc 11, 12, 13, 14}\n}"
										},
										"showInput": "y",
										"format": "8.0f"
									},
									{
										"name": "StringLogicals",
										"Notes": "The comparison and logical functions work with strings as well.  A blank string is considered false, while a string that contains anything is considered true.  Comparisons are done lexically.",
										"DiagramX": 20,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{if \"something here?\",\n\t\"true\",\n\t\"false\"\n}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "backTick",
								"Notes": "You can also define a string using backtick characters, which is handy if the string itself contains double quotes.",
								"DiagramX": 30,
								"DiagramY": -25,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "`A string containing \"double quotes\"`"
								},
								"showInput": "y"
							}
						]
					},
					{
						"name": "Complex",
						"Notes": "<b>Complex</b>\nHow to use complex numbers.",
						"DiagramX": 5,
						"DiagramY": 25,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "CValue",
								"Notes": "The complex function is used to create a table value representing an array of complex numbers.  The \"r\" column is the real component and the \"i\" column is the imaginary one.\n\nThis is a nice representation, but any two column numeric can be used as a complex number.",
								"DiagramX": 85,
								"DiagramY": -10,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": " {complex -5:5, -5:5^2}"
								},
								"showInput": "y"
							},
							{
								"name": "csin",
								"Notes": "complex sin",
								"DiagramX": 95,
								"DiagramY": -85,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{csin cvalue}"
								},
								"showInput": "y"
							},
							{
								"name": "cmult",
								"Notes": "Use cmult to multiply cvalue by itself.\n",
								"DiagramX": 95,
								"DiagramY": -50,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{cmult cvalue, cvalue}"
								},
								"showInput": "y"
							},
							{
								"name": "Polar",
								"Notes": "The polar function is used to convert CValue into polar coordinates.\n\nNote that the units for the second column have been set to degrees, by clicking on the column header and then clicking the button beside the unit line and selecting the unit from the unit browser.\n\nAlso note there is no valid angle when converting 0, 0 to polar.",
								"DiagramX": 185,
								"DiagramY": -60,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{polar CValue}"
								},
								"showInput": "y",
								"tableUnits": {
									"2": "degree"
								}
							},
							{
								"name": "sqrt",
								"Notes": "Use cpow to take the square root of cmult and retrieve cvalue.\n\nIn this case the exponent is a real, but it can also be a complex value as well.",
								"DiagramX": 185,
								"DiagramY": -130,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{cpow cmult, 0.5}"
								},
								"showInput": "y"
							},
							{
								"name": "Cartesian",
								"Notes": "The cart function is used to transform the polar version of CValue back into cartesian coordinates.\n\nThere is no valid conversion for 0, 0.",
								"DiagramX": 260,
								"DiagramY": -130,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{cart polar}"
								},
								"showInput": "y",
								"tableUnits": {}
							},
							{
								"name": "Plot",
								"Notes": "A plot of CValue's imaginary component versus its real one.",
								"DiagramX": 95,
								"DiagramY": -130,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Graph",
								"X1": {
									"v": "Cvalue.r",
									"vmin": "",
									"vmax": "",
									"Y1": {
										"v": "Cvalue.i",
										"vmin": "",
										"vmax": "",
										"lineType": 0
									}
								}
							},
							{
								"name": "Complex",
								"Notes": "Complex numbers in Math Minion are represented by either a matrix or table value with two columns, the first column being the real component and the second the imaginary one.\n\n All complex value functions return table values with the first column labeled r and the second labeled i.\n\nBe sure to check out the Complex Numbers section of the function browser as well as the Complex Number help page that it links to.\n",
								"DiagramX": 5,
								"DiagramY": -130,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{complex 1, 2}"
								},
								"showInput": "y"
							}
						]
					},
					{
						"name": "References",
						"Notes": "<b>References</b>\nDemonstrates the use tool references, which are now rarely used.",
						"DiagramX": 5,
						"DiagramY": 55,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "aModel",
								"Notes": "This model (aModel) contains another model, which in turn just contains an expression with a value of 2 times pi.",
								"DiagramX": 15,
								"DiagramY": 15,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "subModel",
										"Notes": "Another sub-model, which in turn just contains an expression with a value of 2 times pi.",
										"DiagramX": 115,
										"DiagramY": 15,
										"HideInfo": "n",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Model",
										"diagramScale": 1,
										"Objects": [
											{
												"name": "twoPi",
												"Notes": "Just a value to return. In this case it uses the pi function to calculate 2pi.",
												"DiagramX": 65,
												"DiagramY": 20,
												"HideInfo": "y",
												"DiagramNotes": "y",
												"HtmlNotes": "y",
												"isOutput": "y",
												"Type": "Expression",
												"Formula": {
													"Formula": "{pi}*2"
												},
												"showInput": "y"
											}
										]
									},
									{
										"name": "GrossWeight",
										"Notes": "",
										"DiagramX": 115,
										"DiagramY": 65,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "n",
										"Type": "Expression",
										"Formula": {
											"Formula": "100 kg"
										}
									},
									{
										"name": "TareWeight",
										"Notes": "",
										"DiagramX": 115,
										"DiagramY": 90,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "n",
										"Type": "Expression",
										"Formula": {
											"Formula": "10 kg"
										}
									},
									{
										"name": "Net_Weight",
										"Notes": "",
										"DiagramX": 115,
										"DiagramY": 115,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "n",
										"Type": "Expression",
										"Formula": {
											"Formula": "grossWeight - tareWeight"
										}
									}
								]
							},
							{
								"name": "Reference",
								"Notes": "This expression references <b>subModel</b> in <b>aModel</b>\n\nThe result can be used as if it were the model itself.\n\nThe view of <b>subModel</b> is displayed here and if you click on the name or note for <b>twoPi</b> to view it, you will see the title on the resulting view is aModel.subModel.twoPi",
								"DiagramX": 15,
								"DiagramY": 65,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "aModel.subModel"
								},
								"showInput": "y"
							},
							{
								"name": "Direct",
								"Notes": "However in this case it is easier to access <b>twoPi</b> directly.",
								"DiagramX": 105,
								"DiagramY": -15,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "aModel.subModel.twoPi"
								},
								"showInput": "y"
							},
							{
								"name": "With_Reference",
								"Notes": "Here the <b>twoPi</b> value is requested from <b>Reference</b>, which in turn gets it from <b>subModel</b>.",
								"DiagramX": 15,
								"DiagramY": 95,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "Reference.twoPi"
								},
								"showInput": "y"
							},
							{
								"name": "Overview",
								"Notes": "<b>Reference Values</b>\n\nWhile some tools, like expression, data table and matrix, return a numeric, string or table value when referenced in a formula, many others return a reference to themselves.",
								"DiagramX": 15,
								"DiagramY": -15,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							},
							{
								"name": "Weights",
								"Notes": "You can use an index operator with a string to retrieve tool references from a model.  The string can contain \"*\" wildcard characters that will match any sequence of characters.\n\nHere we ask for all the tools whose names end with \"weight\". This will return reference to three scalar expressions, whose values are listed below, but you probably wouldn't normally display a reference array. Click here to see the how the array looks in the expression display.",
								"DiagramX": 105,
								"DiagramY": 30,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "aModel[\"*Weight\"]"
								},
								"showInput": "y"
							},
							{
								"name": "WeightTable",
								"Notes": "More typically you might use a referance array to construct an output table as in this expression.",
								"DiagramX": 105,
								"DiagramY": 120,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{table\n\t\"Name\", weights.myname,\n\t\"Value\", weights.value\n}"
								},
								"showInput": "y"
							},
							{
								"name": "WeightsType",
								"Notes": "Alternatively, if you prefix the index term with <b>\"type:\"</b>, the type name of the tool will be searched instead of the name. Here a search for <b>\"note:expr*\"</b> will return all the Expression tools in aModel.",
								"DiagramX": 105,
								"DiagramY": 60,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "aModel[\"type:expr*\"]"
								},
								"showInput": "y"
							},
							{
								"name": "WeightsNotes",
								"Notes": "Similarly a prefix of <b>\"notes:\"</b> can be used to search tool notes.  Here the term is used to find the tools in aModel that don't have notes.",
								"DiagramX": 105,
								"DiagramY": 90,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								},
								"showInput": "y"
							}
						]
					},
					{
						"name": "Overview",
						"Notes": "<b>Formulas</b>\n\nAt the heart of Math Minion calculations are the formulas that express the relationships between various objects.\n\nThey can be as simple as a scalar constant, or <b>2 + 2</b>, but if the need arises, they can be complicated expressions involving functions and conditions.\n\nTap on the icons for the models below or on the diagram to explore the different features of formulas.\n\nFormulas are displayed in blue text in fields preceded by and equals sign (<b>=</b>) and followed by an expland character <b>⤢</b>. Tapping on the expand character will open a formula editor.  See the help for more information on its features.",
						"DiagramX": -75,
						"DiagramY": -65,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": ""
						}
					},
					{
						"name": "Table_Values",
						"Notes": "<b>Table_Values</b>\nTables are a great way to organize and store data.",
						"DiagramX": 5,
						"DiagramY": -5,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Index",
								"Notes": "<b>Index</b>\nSlicing and dicing tables with indexes.",
								"DiagramX": 5,
								"DiagramY": -25,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "indexCell",
										"Notes": "Cells of a table value can be referenced with the [ ] index operator in the normal row, column manner using numbers.",
										"DiagramX": 115,
										"DiagramY": 120,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "hours[3, 2]"
										},
										"showInput": "y"
									},
									{
										"name": "indexCell2",
										"Notes": "A column index can be replaced with a column name for a table value.",
										"DiagramX": 115,
										"DiagramY": 170,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "hours[3, \"Client\"]"
										},
										"showInput": "y"
									},
									{
										"name": "IndexRows",
										"Notes": "An array of row indexes can be used to get certain rows of a table value.  The result will itself be a table value.",
										"DiagramX": 115,
										"DiagramY": 215,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "hours[ 3:5 ]"
										},
										"showInput": "y"
									},
									{
										"name": "IndexColumns",
										"Notes": "If an array of column names (here created by the concat function) is used as a column index, then those columns will be in the table value result.",
										"DiagramX": 215,
										"DiagramY": 85,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "hours[ 1:4, {cc \"project\", \"hours\"} ]"
										},
										"showInput": "y"
									},
									{
										"name": "SingleColumn",
										"Notes": "If only a single column is returned, then it is returned as a normal numeric or string array, rather than as a table value.\n\nNote that in this case the display unit is not retained and the value is displayed in seconds.  You could of course set the display unit for this expression.",
										"DiagramX": 215,
										"DiagramY": 150,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "hours[1:4,1]"
										},
										"showInput": "y"
									},
									{
										"name": "ColumnRef",
										"Notes": "A single column can also be obtained by using the column name in the dot notation.",
										"DiagramX": 215,
										"DiagramY": 250,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "hours[1:4].date"
										},
										"showInput": "y",
										"format": "8.0f"
									},
									{
										"name": "Hours",
										"Notes": "This expression has its Model Input checkbox checked, which lets it reference the Hours data table in the parent model. Its value is thus the table value of that table.\n\nThings to note (in the actual information view):\n - the table cannot be modified as they can in the source data table.\n\n - the display unit for each column retains the display unit from its source, but you can change that by tapping on the column name and then on the display unit (above the table.\n\n- the format for each column is also retained, but can be changed by tapping on the column name and then entering a new format in the field at the right side of the unit line.",
										"DiagramX": 115,
										"DiagramY": 85,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "hours"
										},
										"isInput": "y",
										"showInput": "y",
										"tableUnits": {}
									}
								]
							},
							{
								"name": "Select",
								"Notes": "<b>Select</b>\nThe select function is a powerful way of getting information out of a table value.",
								"DiagramX": 5,
								"DiagramY": 5,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Hours",
										"Notes": "This expression has its input checkbox checked, which lets it reference the Hours data table in the parent model. Its value is thus the table value from that table.",
										"DiagramX": -50,
										"DiagramY": 70,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "hours"
										},
										"isInput": "y",
										"showInput": "y",
										"tableUnits": {}
									},
									{
										"name": "boolSelect",
										"Notes": "Also finds all the rows of Hours that have Coyote in the project column, but uses a boolean selector array instead of a string command.",
										"DiagramX": 50,
										"DiagramY": 40,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select hours,\n\t{eq hours.project, \"Coyote\"}\n}"
										},
										"showInput": "y"
									},
									{
										"name": "Select",
										"Notes": "Find all the rows of Hours that have Coyote in the project column.",
										"DiagramX": -50,
										"DiagramY": 135,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select hours, \"project = Coyote\"}"
										},
										"showInput": "y"
									},
									{
										"name": "OrSelect",
										"Notes": "Find all rows where project is either Coyote or Accounting",
										"DiagramX": -50,
										"DiagramY": 225,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select hours,\n\t\"project = coyote\n\t| project = accounting\"\n}"
										},
										"showInput": "y"
									},
									{
										"name": "BeforeAugust",
										"Notes": "Another example of using the select, this time to obtain all the records before Aug 1, 2012. Note the use of the date unit.",
										"DiagramX": 50,
										"DiagramY": 95,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select hours, \"date < 20120801 date\"}"
										},
										"showInput": "y"
									},
									{
										"name": "OrAndSelect",
										"Notes": "Select all rows where the project is either Coyote or Accounting and has a date before August.",
										"DiagramX": 50,
										"DiagramY": 150,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select hours,\n\t\"project = coyote,\n\t| project = accounting,\n\tdate < 20120801 date\"\n}"
										},
										"showInput": "y"
									},
									{
										"name": "NumberbyString",
										"Notes": "Select rows where column 2 values are less than 60",
										"DiagramX": 135,
										"DiagramY": 85,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select {append 1:50, 51:100},\n\t\"2 <= 60\"\n}"
										},
										"showInput": "y",
										"format": "8.0f"
									},
									{
										"name": "StringByString",
										"Notes": "Select rows where column 1 (the only column) values are greater or equal to \"f\".",
										"DiagramX": 135,
										"DiagramY": 40,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select\n\t{cc\n\t\t\"a\",\"b\",\"c\",\"d\",\"e\",\n\t\t\"f\",\"g\",\"h\",\"i\",\"j\"\n\t}, \"1 >= f\"\n}"
										},
										"showInput": "y"
									},
									{
										"name": "AndSelect",
										"Notes": "Select rows where Fred is the client and the project is Accounting.",
										"DiagramX": -50,
										"DiagramY": 180,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select hours,\n\t\"client = Fred,\n\tproject = accounting\"\n}"
										},
										"showInput": "y"
									},
									{
										"name": "Overview",
										"Notes": "<b>Select Function</b>\n\nThe select function can be used to choose certain rows of a table, thus creating a new table value. For instance the <b>Select</b> expression in this model uses the formula:\n\n   <b>{select hours, \"project = Coyote\"}</b>\n\nto find all the rows in the table value <b>hours</b> which have a value of \"Coyote\" in the project column.\n\nThe first parameter of the function is simply the table value, in this case from the expression <b>hours</b>.\n\nThe second parameter is a string of the form\n\n   <b>\"column op value\"</b>\n\nwhere <b>column</b> is the name of the table column and the <b>op</b> term is one of (<b>=, !=, <, <=, >, >=</b>). The <b>value</b> term is some value that will be matched against each row of the column using the given operation.  The value isn't a formula, but can have a unit if it is numeric. String comparisons are case insensitive and a missing value term will match a string made up zero or more blanks.\n\nIf the selector has more than one row, or multiple terms separated by a new line or comma, each result while be \"ANDed\" with the previous result, unless the \"column\" term is preceded by a \"|\" character. In that case an OR operation is performed with the previous result. An \"&\" character can optionally be used for AND operations to make the formula more descriptive.\n\nInstead of a string value, the second parameter of select can be a column array with the same number of rows as the table.  All the rows of this argument which are nonzero will be selected from the source table and included in the result.\n\nThe expression <b>boolSelect</b> uses the formula:\n\n   <b>{select hours, {eq hours.project, \"Coyote\"}}</b>\n\nwhich will also select all the rows whose project column has a value of \"Coyote\", producing the same result as the <b>Select</b> expression.\n\nThe select command will also work on matrices of numbers and strings in the same way, with the column name being replaced by the column number.\n\nSee the various other expressions in this model for examples.",
										"DiagramX": -50,
										"DiagramY": 40,
										"HideInfo": "n",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									},
									{
										"name": "Contains",
										"Notes": "The question mark operator can be used with string columns to mean contains. Here all projects that have \"ou\" in them are selected.",
										"DiagramX": 50,
										"DiagramY": 200,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select hours,\n\t\"project ? ou,\n\thours > 3 h\"\n}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Sums",
								"Notes": "<b>Sums</b>\nIllustrates the summation functions for table values",
								"DiagramX": 85,
								"DiagramY": -155,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "DayHours",
										"Notes": "If you group on a numeric column, the values in the column are first converted to strings.\n\nHere we calculated the total number of hours on each date.\n",
										"DiagramX": 115,
										"DiagramY": 210,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{groupsum Hours, \"Date\"}"
										},
										"showInput": "y",
										"tableUnits": {
											"1": "date"
										},
										"tableFormats": [
											null,
											"10.0f",
											"10.1f",
											"12.2f"
										]
									},
									{
										"name": "clients",
										"Notes": "Here the clientIndex values are used to extract the client names from Hours, corresponding to the projects in projectsum.\n\nBecause it is a single column, it is returned as a simple column array, not a table value.",
										"DiagramX": 205,
										"DiagramY": 90,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "hours.client[ clientIndex[0,1] ]"
										},
										"showInput": "y"
									},
									{
										"name": "ProjectHours",
										"Notes": "The append function can be used to combine the columns of different tables into a single table.  All of the arguments must have the same number of rows.\n\nIt is used here to add a column of client names to the projectsum result:\n\n{append\n  {table \"Client\", clients},\n  projectsum\n}\n\nThe clients value is not a table, but we can easily convert it into one with the table function.",
										"DiagramX": 205,
										"DiagramY": 155,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{append\n\t{table \"Client\", clients},\n\t projectsum\n}"
										},
										"showInput": "y"
									},
									{
										"name": "projectsum",
										"Notes": "This expression uses the groupsum function to get the total hours by project:\n\n{groupsum hours[0,\n  {cc\n    \"project\",\n    \"Hours\",\n    \"Charge\"\n  }],\n  \"project\"\n} \n\nThe first argument is the table value to be totalled.  In this case the index operator has been used to select just the project, hours and charge columns.\n\nThe second argument is the column for which identical values are to be grouped together into a single row.\n\n Other columns in that row will be the sums of the values for that group.\n\nThe argument must be a string and must be the name of a column in the table.\n\nThere are also groupmin and groupmax functions.",
										"DiagramX": 205,
										"DiagramY": 120,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{groupsum hours[0,\n\t{cc\n\t\t\"project\",\n\t\t\"Hours\",\n\t\t\"Charge\"\n\t}],\n\t\"project\"\n}"
										},
										"showInput": "y"
									},
									{
										"name": "Hours",
										"Notes": "This expression has its input checkbox checked, which lets it reference the Hours data table in the parent model. Its value is thus the table value from that table.",
										"DiagramX": 115,
										"DiagramY": 120,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "hours"
										},
										"isInput": "y",
										"showInput": "y",
										"tableUnits": {}
									},
									{
										"name": "clientIndex",
										"Notes": "Indexof returns a matrix with two columns.\n\nThe first column holds the row numbers of the first cell found in hours.project, which has the same value as the first value found in projectsum.project.\n\nThe second column holds the column number of that cell.\n\nThus for each project name in projectsum, there will be a row with the indices for the first occurrence of that name in the projects column of hours.",
										"DiagramX": 115,
										"DiagramY": 240,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{indexof\n\tprojectsum.project,\n\thours.project\n}"
										},
										"showInput": "y"
									},
									{
										"name": "SumColumns",
										"Notes": "The sumcols function can be used to sum all the columns of a table. In the resulting table, string columns are retained, but just have a blank value.\n\nIn this case summing the date column doesn't make much sense, but the Hours and Charge columns do.",
										"DiagramX": 115,
										"DiagramY": 150,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{sumcols hours}"
										},
										"showInput": "y",
										"tableFormats": [
											null,
											"10.0f",
											null,
											null,
											"10.1f",
											"10.2f"
										]
									},
									{
										"name": "SumRows",
										"Notes": "The sumrows function will sum all the values in a row.  These must all have conformable units, so in this case I have just selected the date and the hours columns. The answer is kind of silly, but sort of makes sense when shown with the date unit type.",
										"DiagramX": 115,
										"DiagramY": 180,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{sumrows hours[0, {cc \"date\", \"hours\"}]}"
										},
										"showInput": "y",
										"displayUnit": "date",
										"format": "13.2f"
									},
									{
										"name": "Overview",
										"Notes": "<b>Sums</b>\n\nThis model illustrates the summation functions for table values. These are:\n\n   <b>- sumcols</b> - returns a single row table with each column having the sum of the table value argument.\n\n   <b>- sumrows</b> - returns a numerical array with the row by row sum of all the columns of the table value argument. All the columns must be of the same unit type.\n\n   <b>- groupsum</b> - returns a table with each row having the sum of all the rows that have the same value in a given column.\n\nThese functions all have min and max function counterparts.",
										"DiagramX": 115,
										"DiagramY": 90,
										"HideInfo": "n",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									}
								]
							},
							{
								"name": "Combining",
								"Notes": "<b>Combining</b>\nConcatenating and appending tables",
								"DiagramX": 85,
								"DiagramY": -35,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Concatenate",
										"Notes": "Conformable tables can be concatenated using the cc function. The resulting table value has all of the rows of the concatenated tables.",
										"DiagramX": 90,
										"DiagramY": -145,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{cc table1, table2}"
										},
										"showInput": "y"
									},
									{
										"name": "Table1",
										"Notes": "The table function is used to make a table with two numeric columns with different unit types, as well as two string columns.",
										"DiagramX": 0,
										"DiagramY": -145,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table\n\t{cc \"Row\",\"Length\",\n\t\t\"Weight\",\"Pounds\"\n\t},\n\t\"Row\" + {fmt \"%3.0f\", 1:5},\n\t1:5 * 1\"m\",\n\t100:105 * 1\"kg\",\n\t\"lb=\" + {fmt \"%f\",\n\t\t\t100:105 * 1\"kg\",\n\t\t\t\t\"lb\"\n\t\t\t}\n}"
										},
										"showInput": "y"
									},
									{
										"name": "Table2",
										"Notes": "Another table, conformable to Table1",
										"DiagramX": 0,
										"DiagramY": -85,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table {cc\n\t\t\"Row\", \"Length\",\n\t\t\"Weight\",\"Pounds\"\n\t},\n\t\"No\" + {fmt \"%3.0f\", 11:15},\n\t1:5 * 3\"m\",\n\t100:104 * 3\"kg\",\n\t\"lb=\" + {fmt \"%f\",\n\t\t200:204 * 1\"kg\", \"lb\"\n\t}\n}"
										},
										"showInput": "y"
									},
									{
										"name": "Append",
										"Notes": "The append command will produce a table with all the columns of the arguments.  The arguments must all have the same number of rows.\n\nYou can also append column arrays to tables and they will be given a column name equivalent to their column number.",
										"DiagramX": 85,
										"DiagramY": -85,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{append table1, table2, 1:5 * 10 kg}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Hours",
								"Notes": "This data table tool is a simple fictitious time sheet with a month of values.  See the data table help for a description of how it works",
								"DiagramX": 5,
								"DiagramY": -85,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Data Table",
								"Columns": [
									{
										"name": "Date",
										"displayUnit": "date",
										"format": "8.0f",
										"nValues": [
											1342396800,
											1342396800,
											1342483200,
											1342569600,
											1342569600,
											1342656000,
											1342656000,
											1342742400,
											1342742400,
											1342828800,
											1342828800,
											1342915200,
											1343001600,
											1343174400,
											1343174400,
											1343260800,
											1343347200,
											1343433600,
											1343433600,
											1343520000,
											1343606400,
											1343692800,
											1343779200,
											1343779200,
											1343865600,
											1343865600,
											1343952000,
											1344038400,
											1344038400,
											1344124800,
											1344124800,
											1344297600,
											1344384000,
											1344470400,
											1344556800,
											1344556800,
											1344643200,
											1344729600,
											1344729600,
											1344816000,
											1344902400,
											1344902400,
											1344988800,
											1344988800
										],
										"unitDimensions": "0 0 1 0 0 0 0",
										"defaultValue": "{mktime {int {date {now}}}}"
									},
									{
										"name": "Client",
										"displayUnit": "string",
										"sValues": [
											"HAL",
											"Fred",
											"Acme",
											"Acme",
											"Acme",
											"HAL",
											"Acme",
											"HAL",
											"Fred",
											"Fred",
											"Acme",
											"Acme",
											"Acme",
											"Fred",
											"HAL",
											"HAL",
											"HAL",
											"HAL",
											"Acme",
											"Acme",
											"Pear",
											"Pear",
											"Pear",
											"HAL",
											"Pear",
											"Fred",
											"Pear",
											"Pear",
											"Acme",
											"Pear",
											"HAL",
											"HAL",
											"HAL",
											"HAL",
											"Fred",
											"HAL",
											"HAL",
											"HAL",
											"Fred",
											"Fred",
											"Pear",
											"Fred",
											"HAL",
											"Acme"
										],
										"defaultValue": "clients.name",
										"isMenu": true
									},
									{
										"name": "Project",
										"displayUnit": "string",
										"sValues": [
											"DeepThought",
											"Accounting",
											"Coyote",
											"Coyote",
											"Coyote",
											"DeepThought",
											"RR",
											"DeepThought",
											"Accounting",
											"Accounting",
											"RR",
											"RR",
											"RR",
											"Accounting",
											"DeepThought",
											"DeepThought",
											"DeepThought",
											"DeepThought",
											"RR",
											"Coyote",
											"iWant",
											"iWant",
											"iWant",
											"DeepThought",
											"iWant",
											"Accounting",
											"iWant",
											"iWish",
											"RR",
											"iWish",
											"Clarke",
											"Clarke",
											"Clarke",
											"Clarke",
											"Accounting",
											"Clarke",
											"Clarke",
											"Clarke",
											"Report",
											"Report",
											"iWish",
											"Report",
											"Clarke",
											"Coyote"
										],
										"defaultValue": ""
									},
									{
										"name": "Hours",
										"displayUnit": "h",
										"format": "10.1f",
										"nValues": [
											7200,
											10800,
											18000,
											21600,
											7200,
											10800,
											7200,
											10800,
											7200,
											14400,
											21600,
											28800,
											32400,
											18000,
											10800,
											25200,
											28800,
											7200,
											14400,
											14400,
											21600,
											32400,
											25200,
											7200,
											25200,
											7200,
											25200,
											21600,
											7200,
											18000,
											7200,
											28800,
											32400,
											25200,
											7200,
											18000,
											28800,
											18000,
											10800,
											28800,
											18000,
											7200,
											25200,
											7200
										],
										"unitDimensions": "0 0 1 0 0 0 0",
										"defaultValue": "0 h"
									},
									{
										"name": "Charge",
										"displayUnit": "dollar",
										"format": "10.2f",
										"nValues": [
											239.99999975999998,
											300.00000024,
											874.9999998,
											1049.99999976,
											349.99999992,
											359.99999963999994,
											349.99999992,
											359.99999963999994,
											200.00000016,
											400.00000032,
											1049.99999976,
											1399.99999968,
											1574.99999964,
											500.00000040000003,
											359.99999963999994,
											839.9999991599999,
											959.9999990399999,
											239.99999975999998,
											699.99999984,
											699.99999984,
											840.0000002400001,
											1260.00000036,
											980.00000028,
											239.99999975999998,
											980.00000028,
											200.00000016,
											980.00000028,
											840.0000002400001,
											349.99999992,
											700.0000002,
											239.99999975999998,
											959.9999990399999,
											1079.9999989199998,
											839.9999991599999,
											200.00000016,
											599.9999994,
											959.9999990399999,
											599.9999994,
											300.00000024,
											800.00000064,
											700.0000002,
											200.00000016,
											839.9999991599999,
											349.99999992
										],
										"unitDimensions": "0 0 0 0 0 0 0",
										"defaultValue": "$.hours * clients.rate[\n\t{indexof\n\t\t$.client,\n\t\tclients.name\n\t}[0,1]\n]",
										"isCalculated": true
									}
								],
								"Filter": {
									"Formula": ""
								}
							},
							{
								"name": "Overview",
								"Notes": "<b>Table Values</b>\n\nIn addition to arrays and matrices of numbers and strings, Math Minion can also have table values.\n\nThese often originate with a Data Table object like the Hours object in this and the example models, but they can be created directly from formulas as illustrated in the MakeTable expressions.\n\nEssentially a table value is a collection of columns, which all have the same number of rows.\n\nThey can be of different types; that is string or numeric and if numeric, they can have different unit types.\n\nData table tools will be discussed in more detail in the Tools model of the Root model.",
								"DiagramX": 5,
								"DiagramY": -155,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							},
							{
								"name": "Table_Function",
								"Notes": "<b>Table_Function</b>\nUsing table function to make table values.",
								"DiagramX": 85,
								"DiagramY": -125,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "TableArithmetic",
										"Notes": "The basic arithmetic operators can be used with tables, with the proviso that the units must conform.  Thus if you are adding or subtracting a scalar, then all the columns must have the same unit type as the scalar.\n\nNote that the first and third columns are strings and are just copied without change.",
										"DiagramX": 115,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "2 * MakeTable / 3"
										},
										"showInput": "y"
									},
									{
										"name": "AddTables",
										"Notes": "The two tables are added together.  They must have the same number of rows and columns and the columns must conform in type and unit type.\n\nNote that the first and last columns are strings and are just taken from the first argument, without modification.",
										"DiagramX": 200,
										"DiagramY": 110,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "MakeTable2 + MakeTable3"
										},
										"showInput": "y",
										"tableFormats": [
											null,
											null,
											"10.1f",
											"10.1f"
										]
									},
									{
										"name": "Alternate_Table",
										"Notes": "Alternatively the first argument can be an array of names that will be used as the table column names.\n\nThe remaining parameters must all be arrays having the same number of rows.\n\nTheir columns will be used to make the columns of the new table value.\n\nIf the number of names in the first argument is not the same as the total number of columns in the rest of the arguments, the lessor is used and any extras ignored.\n\nThis table function produces the same result as the MakeTable expression.",
										"DiagramX": 35,
										"DiagramY": 125,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table {cc \"one\", \"two\", \"three\"},\n\t{cc \"s1\", \"s2\", \"s3\", \"s4\"},\n\t1:4,\n\t\"n =\" + {fmt \"%3.0f\", 1:4*10}\n}"
										},
										"showInput": "y"
									},
									{
										"name": "MakeTable",
										"Notes": "The table function is used to make a table value and the supplied arguments can be in two forms.\n\nIn this case, the arguments are pairs of column names and column values, with the first column of each value being used as the table column. Values should all have the same number of rows.",
										"DiagramX": 35,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table \"one\", {cc \"s1\", \"s2\", \"s3\", \"s4\"},\n\t \"two\", 1:4,\n\t\"three\", \"n =\" + {fmt \"%3.0f\", 1:4*10}\n}"
										},
										"showInput": "y"
									},
									{
										"name": "MakeTable2",
										"Notes": "The table function is used to make a table with two numeric columns with different unit types, as well as two string columns.",
										"DiagramX": 115,
										"DiagramY": 130,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table\n\t\"Row\",\t\t\"Row\" + {fmt \"%3.0f\", 1:5},\n\t\"Length\",\t1:5 * 1\"m\",\n\t\"Weight\",\t100:105 * 1\"kg\",\n\t\"Pounds\",\t\"lb=\" + {fmt \".2f\",\n\t\t\t100:105 * 1\"kg\",\n\t\t\t\t\"lb\"\n\t\t\t}\n}"
										},
										"showInput": "y",
										"tableFormats": [
											null,
											null,
											"10.1f",
											"10.1f"
										]
									},
									{
										"name": "MakeTable3",
										"Notes": "Another table, conformable to MakeTable2.\n\nIt uses the alternate argument method, with the twist that the column names can be supplied by having the first argument being another table.",
										"DiagramX": 200,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table MakeTable2,\n\t\"No\" + {fmt \"%3.0f\", 11:15},\n\t1:5 * 3\"m\",\n\t100:104 * 3\"kg\",\n\t\"lb=\" + {fmt \"%.2f\",\n\t\t200:204 * 1\"kg\", \"lb\"\n\t}\n}"
										},
										"showInput": "y"
									},
									{
										"name": "MakeTableCsv",
										"Notes": "The table function can also create a table value from CSV data.\n\nIf the table function is given a single string argument that has the following format format:\n\nThe first line is:\ntable,en\n\nwhere the comma can be replaced with another separator, like a tab, and the en with a different country code.\n\nThe second line is a series of double quoted column names, separated by the separator charactor.\n\nThe third line is a matching series of double quoted unit names for number columns or the word string for string columns.\n\nThe remaining lines are data matching the form of the second and third lines in CSV format.\n\nA table value is returned.",
										"DiagramX": 200,
										"DiagramY": 210,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table `table,en\n\"one\",\"two\",\"three\"\n\"string\",\"Fraction\",\"string\"\n\"s1\",1.0000000000,\"n = 10\"\n\"s2\",2.0000000000,\"n = 20\"\n\"s3\",3.0000000000,\"n = 30\"\n\"s4\",4.0000000000,\"n = 40\"\n`}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Table_Arithmetic",
								"Notes": "<b>Table_Arithmetic</b>\nUsing numeric operators with tables.",
								"DiagramX": 85,
								"DiagramY": -95,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Table1",
										"Notes": "The table function is used to make a table with two numeric columns with different unit types, as well as two string columns.",
										"DiagramX": 75,
										"DiagramY": -145,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table\n\t{cc \"Row\",\"Length\",\n\t\t\"Weight\",\"Pounds\"\n\t},\n\t\"Row\" + {fmt \"%3.0f\", 1:5},\n\t1:5 * 1\"m\",\n\t100:105 * 1\"kg\",\n\t\"lb=\" + {fmt \"%f\",\n\t\t\t100:105 * 1\"kg\",\n\t\t\t\t\"lb\"\n\t\t\t}\n}"
										},
										"showInput": "y"
									},
									{
										"name": "Table2",
										"Notes": "Another table, conformable to MakeTable2",
										"DiagramX": 75,
										"DiagramY": -85,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table {cc\n\t\t\"Row\", \"Length\",\n\t\t\"Weight\",\"Pounds\"\n\t},\n\t\"No\" + {fmt \"%3.0f\", 11:15},\n\t1:5 * 3\"m\",\n\t100:104 * 3\"kg\",\n\t\"lb=\" + {fmt \"%f\",\n\t\t200:204 * 1\"kg\", \"lb\"\n\t}\n}"
										},
										"showInput": "y"
									},
									{
										"name": "ScalarArithmetic",
										"Notes": "The basic arithmetic operators can be used with tables, with the proviso that the units must conform.  Thus if you are adding or subtracting a scalar, then all the columns must have the same unit type as the scalar. Here we are just multiplying and dividing\n\nNote that string columns, like the first one, are just copied without change.",
										"DiagramX": 75,
										"DiagramY": -45,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "Table1 * 2 / 3"
										},
										"showInput": "y"
									},
									{
										"name": "AddTables",
										"Notes": "The two tables are added together.  They must have the same number of columns and the columns must conform in type and unit type. The number of rows must also be the same, unless one argument has just one row.\n\nNote that the first and last columns are strings and are just taken from the first argument, without modification.",
										"DiagramX": 160,
										"DiagramY": -145,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "Table1 + Table2"
										},
										"showInput": "y"
									},
									{
										"name": "SingleRow",
										"Notes": "Tables with a single row can participate in arithmetic operations with multiple row tables as long as their columns are conformable.",
										"DiagramX": 155,
										"DiagramY": -35,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "(Table1  + Table2[1]) * Table2[2]"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Numeric",
								"Notes": "<b>Numeric</b>\nTransforming a table into a numeric matrix",
								"DiagramX": 85,
								"DiagramY": -65,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Numeric",
										"Notes": "The numeric function will transform a table into a numeric matrix, but only if all the numeric columns have the same unit type.\n\nThe string columns are simply omitted.\n\n  Here both date and hours are of type time and the other columns are strings, so the operation is allowed.\n",
										"DiagramX": 150,
										"DiagramY": -215,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{numeric sameunits}"
										},
										"showInput": "y",
										"format": "14.0f"
									},
									{
										"name": "SameUnits",
										"Notes": "Hours without the Charge column (see the Index model) to provide the Numeric expression with a table where all numeric unit types are the same.",
										"DiagramX": 65,
										"DiagramY": -150,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "Hours[0,1:4]"
										},
										"showInput": "y"
									},
									{
										"name": "Hours",
										"Notes": "This expression has its input checkbox checked, which lets it reference the Hours data table in the parent model. Its value is thus the table value from that table.",
										"DiagramX": 65,
										"DiagramY": -215,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "hours"
										},
										"isInput": "y",
										"showInput": "y",
										"tableUnits": {}
									}
								]
							},
							{
								"name": "Clients",
								"Notes": "A list of client names and charge rates",
								"DiagramX": 5,
								"DiagramY": -125,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Data Table",
								"Columns": [
									{
										"name": "Name",
										"displayUnit": "string",
										"sValues": [
											"HAL",
											"Fred",
											"Acme",
											"Pear"
										],
										"defaultValue": ""
									},
									{
										"name": "Rate",
										"displayUnit": "dollar/h",
										"format": "10.2f",
										"nValues": [
											0.0333333333,
											0.0277777778,
											0.0486111111,
											0.0388888889
										],
										"unitDimensions": "0 0 -1 0 0 0 0",
										"defaultValue": "0 1/s"
									}
								],
								"Filter": {
									"Formula": ""
								}
							},
							{
								"name": "Transpose",
								"Notes": "<b>Transposing</b>\nUsing the transpose function to switch columns and rows in the display.",
								"DiagramX": 85,
								"DiagramY": 5,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Indices",
										"Notes": "For instance, indices still refer to the untransposed value. This is the same result as what clients[3,2] would yield.",
										"DiagramX": 10,
										"DiagramY": -40,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "transposed[3,2]"
										},
										"showInput": "y"
									},
									{
										"name": "Dot_Column",
										"Notes": "Similarly you can still use column names to return corresponding column array.",
										"DiagramX": 95,
										"DiagramY": -135,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "transposed.name"
										},
										"showInput": "y"
									},
									{
										"name": "Clients_Indicies",
										"Notes": "",
										"DiagramX": 10,
										"DiagramY": 15,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "n",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "clients[3,2]"
										},
										"isInput": "y",
										"showInput": "y"
									},
									{
										"name": "Transposed",
										"Notes": "The transpose function (shortcut tr) can be used to switch the display of the columns and rows.\n\nThis does not affect how the value is used otherwise.\n\nNote this expression has its model input box checked so it can reference clients from the parent model.",
										"DiagramX": 10,
										"DiagramY": -135,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{tr clients}"
										},
										"isInput": "y",
										"showInput": "y"
									},
									{
										"name": "Double_Tr",
										"Notes": "Using the transpose function on a transposed value, turns it off.",
										"DiagramX": 95,
										"DiagramY": -80,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{tr transposed}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Csv_Function",
								"Notes": "The csv function takes a table value as an argument and returns a string value in Comma Separated Value format.",
								"DiagramX": 85,
								"DiagramY": 35,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{csv clients}"
								},
								"showInput": "y"
							}
						]
					},
					{
						"name": "JsonValue",
						"Notes": "",
						"DiagramX": 5,
						"DiagramY": 85,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "n",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Overview",
								"Notes": "",
								"DiagramX": 10,
								"DiagramY": 10,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "HTML Form",
								"Formula": {
									"Formula": "'\n<html>\n\t<head>\n\t\t<style>\n\t\t\t.link {\n\t\t\t\tcolor: blue;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t\t#page {\n\t\t\t\tmargin-top: 10px;\n\t\t\t\tborder: solid 1px;\n\t\t\t\tpadding: 5px;\n\t\t\t\tbackground-color: #f2f2f2;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"page\">\n\t\t<div>\n\t\t\t<p><b>JSON Values</b></p>\t\t\n\t\t\t<p>\n\t\t\t\t<a href=\"https://en.wikipedia.org/wiki/JSON\" target=\"_blank\">JSON</a> is a very popular way of representing data in a text format. The <b>jsonparse</b> function creates a JSON object value the contents of which can be referenced and converted into Math Minion number and string values.\n\t\t\t</p>\n\t\t</div>\n\t</body>\n</html>"
								}
							},
							{
								"name": "parsedClients",
								"Notes": "the jsonparse function will return a JsonValue. It is displayed simply as a JSON string.",
								"DiagramX": 10,
								"DiagramY": 65,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{jsonparse clientsjson}"
								}
							},
							{
								"name": "ClientsJson",
								"Notes": "For example given this JSON source:",
								"DiagramX": 10,
								"DiagramY": 35,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "'{\n\t\"Names\": [\n\t\t\"HAL\",\n\t\t\"Fred\",\n\t\t\"Acme\",\n\t\t\"Pear\"\n\t],\n\t\"rate\": [\n\t\t120.00,\n\t\t100.00,\n\t\t175.00,\n\t\t140.00\n\t]\n}"
								}
							},
							{
								"name": "Names",
								"Notes": "You can reference the elements of a JsonValue with normal dot notation and if the element is a string or number array, the appropriate Math Minion value will be returned.\n\nNote that the member names are case sensitive.",
								"DiagramX": 10,
								"DiagramY": 95,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "parsedClients.Names"
								},
								"showInput": "y"
							},
							{
								"name": "ClientTable",
								"Notes": "Making a table from the JsonValue.",
								"DiagramX": 10,
								"DiagramY": 125,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{table\n\t\"Client\", Names,\n\t\"Rate $/h\", parsedClients.rate\n}"
								},
								"showInput": "y",
								"tableFormats": [
									null,
									null,
									"12.2f"
								]
							},
							{
								"name": "ClientsJson2",
								"Notes": "JSON data can take many forms.  Here the base object contains an array named clients, where each member of the array has a \"Name\" and \"rate\" member.  The base object also contains a \"Date\" string value.",
								"DiagramX": 85,
								"DiagramY": 10,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "'{\n\t\"Clients\": [\n\t\t{\n\t\t\t\"Name\": \"Hal\",\n\t\t\t\"Rate\": 120.00\n\t\t},\n\t\t{\n\t\t\t\"Name\": \"Fred\",\n\t\t\t\"Rate\": 100.00\n\t\t},\n\t\t{\n\t\t\t\"Name\": \"Acme\",\n\t\t\t\"Rate\": 175.00\n\t\t},\n\t\t{\n\t\t\t\"Name\": \"Pear\",\n\t\t\t\"Rate\": 140.00\n\t\t}\n\t],\n\t\"Date\": \"2023-09-01\"\n}"
								}
							},
							{
								"name": "ParsedClients2",
								"Notes": "",
								"DiagramX": 85,
								"DiagramY": 40,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"Type": "Expression",
								"Formula": {
									"Formula": "{jsonparse clientsjson2}"
								},
								"showInput": "y"
							},
							{
								"name": "ClientsMember",
								"Notes": "Referencing the \"Clients\" member will return another JsonValue containing just the referenced member.",
								"DiagramX": 85,
								"DiagramY": 65,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "parsedClients2.Clients"
								},
								"showInput": "y"
							},
							{
								"name": "Names2",
								"Notes": "Using a special index value consisting of a string starting with a colon, followed by a member name, will extract all those members from an array of objects.",
								"DiagramX": 85,
								"DiagramY": 95,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "ClientsMember[\":Name\"]"
								},
								"showInput": "y"
							},
							{
								"name": "ClientTable2",
								"Notes": "Creating the same table as ClientTable from the ClientsJson2 source.",
								"DiagramX": 85,
								"DiagramY": 125,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{table\n\t\"Client\", Names2,\n\t\"Rate $/h\", ClientsMember[\":Rate\"]\n}"
								},
								"showInput": "y",
								"tableFormats": [
									null,
									null,
									"12.2f"
								]
							},
							{
								"name": "MemberNames",
								"Notes": "Using an string index consisting of just a \"*\" will return the names of all the members of an object.",
								"DiagramX": 85,
								"DiagramY": 155,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "parsedClients2[\"*\"]"
								},
								"showInput": "y"
							},
							{
								"name": "ClientsJson3",
								"Notes": "In this case the Clients object isn't an array, but rather has keyed subobjects each containing a name and rate.",
								"DiagramX": 165,
								"DiagramY": 10,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "'{\n\t\"Clients\": {\n\t\t\"C001\": {\n\t\t\t\"Name\": \"Hal\",\n\t\t\t\"Rate\": 120.00\n\t\t},\n\t\t\"C002\": {\n\t\t\t\"Name\": \"Fred\",\n\t\t\t\"Rate\": 100.00\n\t\t},\n\t\t\"C003\": {\n\t\t\t\"Name\": \"Acme\",\n\t\t\t\"Rate\": 175.00\n\t\t},\n\t\t\"C004\": {\n\t\t\t\"Name\": \"Pear\",\n\t\t\t\"Rate\": 140.00\n\t\t}\n\t},\n\t\"Date\": \"2023-09-01\"\n}"
								}
							},
							{
								"name": "ParsedClients3",
								"Notes": "",
								"DiagramX": 165,
								"DiagramY": 40,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"Type": "Expression",
								"Formula": {
									"Formula": "{jsonparse clientsjson3}"
								},
								"showInput": "y"
							},
							{
								"name": "ClientObjectArray",
								"Notes": "Using a string index of \":*\" selects all the members of an object.",
								"DiagramX": 165,
								"DiagramY": 65,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "ParsedClients3.Clients[\":*\"]"
								},
								"showInput": "y"
							},
							{
								"name": "ClientTable3",
								"Notes": "Here we will make up yet another client table, including a column of IDs by extracting the member names from the Client object and then the name and rate from the member values.",
								"DiagramX": 165,
								"DiagramY": 95,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{table\n\t\"ID\", ParsedClients3.Clients[\"*\"],\n\t\"Client\", ClientObjectArray[\":Name\"],\n\t\"Rate\", ClientObjectArray[\":Rate\"]\n}"
								},
								"showInput": "y",
								"tableFormats": [
									null,
									null,
									"12.2f",
									"12.2f"
								]
							}
						]
					}
				]
			},
			{
				"name": "Welcome",
				"Notes": "Welcome to the Math Minion's \"Getting Started\" session.",
				"DiagramX": 80,
				"DiagramY": -35,
				"HideInfo": "y",
				"DiagramNotes": "y",
				"HtmlNotes": "n",
				"isOutput": "y",
				"Type": "HTML Form",
				"Formula": {
					"Formula": "'\n<html>\n\t<head>\n\t\t<style>\n\t\t\t#header {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-template-columns: 1fr 65px;\n\t\t\t\tgrid-gap: 10px;\n\t\t\t\tborder-bottom: 1px solid black;\n\t\t\t\tmargin-bottom: 10px;\n\t\t\t}\n\t\t\t#header img {\n\t\t\t\talign-self: center;\n\t\t\t}\n\t\t\t.disclaimer {\n\t\t\t\tcolor: #004400;\n\t\t\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t\t\t\tfont-size: 0.7em;\n\t\t\t\tfont-style: italic;\n\t\t\t\tborder-bottom: 1px solid black;\n\t\t\t}\n\t\t\t.link {\n\t\t\t\tcolor: blue;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t\t#page {\n\t\t\t\tmargin-top: 10px;\n\t\t\t\tborder: solid 1px;\n\t\t\t\tpadding: 5px;\n\t\t\t\tbackground-color: #f2f2f2;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"page\">\n\t\t<div id=\"header\">\n\t\t<h4>Welcome to Math Minion's<br> \"Getting Started\" session</h4>\n\t\t</div>\n\t\t<p class=\"disclaimer\">\n\t\t\tMath Minion is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\t\t\t<span class=\"link\"\n\t\t\t\tonClick=\"mmpost([], {mm_viewurl: '../LICENSE.txt'})\">\n\t\t\t\tGNU General Public License\n\t\t\t</span> for more details.\n\t\t</p>\n\t\t<p>\n\t\t\tWelcome to Math Minion, my quirky take on a general purpose calculation tool.\n\t\t\tIt is a\n\t\t\t<span class=\"link\"\n\t\t\t\tonClick=\"mmpost([], {mm_viewurl: 'help/freeprivate.html'})\">\n\t\t\t\tfree and private\n\t\t\t</span> javascript app that runs locally in your web browser.\n\t\t</p>\n\t\t<p>\n\t\t\tThis session is both a guide to and a demonstration of Math Minions many tools and features.\n\t\t\tAlong with the\n\t\t\t<span class=\"link\"\n\t\t\t\tonClick=\"mmpost([], {mm_viewurl: 'help/helppage.html'})\">\n\t\t\t\thelp pages\n\t\t\t</span> it is a primary documentation resource.\n\t\t\t\n\t\t</p>\n\t\t<p>\t\t\t\n\t\t\tHowever before diving into it, it may be a good idea to check out <b><a href=\"https://www.mathminion.org/video/mmnavigate.mp4\" target=\"_blank\">this video</a></b>\n\t\t\ton navigating in Math Minion and the\n\t\t\t<span class=\"link\"\n\t\t\t\tonClick=\"mmpost([], {mm_viewurl: 'help/tutorial.html'})\">\n\t\t\t\tIntroduction Tutorial\n\t\t\t</span>.\n\t\t</p>\n\t\t<p>\n\t\t\tThen be sure to explore the models in this session.\n\t\t</p>\n\t\t<p>\n\t\t\tYou might also want to check out the examples you can import from the\n\t\t\t<span class=\"link\"\n\t\t\t\tonClick=\"mmpost({}, {mm_view: 'examples'})\">\n\t\t\t\tExamples</span> HtmlPage.\n\t\t</p>\n\t\t<p>\n\t\t\tKeep your <b>Getting Started</b> session and <b>Math Minion News</b> session up to date by\n\t\t\treloading them with these links:\n\t\t</p>\n\t\t<ul>\n\t\t\t<li><span class=\"link\" onClick=\"mmpost({}, {mm_loadurl: '../help/Getting%20Started.txt', mm_view: 'Welcome'});\">Reload Getting Started</span></li>\n\t\t\t<li><span class=\"link\" onClick=\"mmpost({}, {mm_loadurl: '../news/MM_News.txt', mm_view: 'Welcome'});\">Reload MM_News</span></li>\n\t\t</ul>\n\t\t<p>\n\t\t\tIf you have any questions or comments, please don't hesitate to\n\t\t\t<a href=\"http://www.redtree.com/contact.html\" target=\"_blank\">send them to me</a>.\n\t\t</p>\n\t\t<p>Craig</p>\n\t\t</div>\n\t</body>\n</html>"
				}
			},
			{
				"name": "Examples",
				"Notes": "<b>Examples</b>\nA few interesting uses of Math Minion.",
				"DiagramX": 155,
				"DiagramY": 90,
				"HideInfo": "y",
				"DiagramNotes": "y",
				"HtmlNotes": "y",
				"Type": "HTML Form",
				"Formula": {
					"Formula": "'\n<html>\n\t<head>\n\t\t<link rel=\"stylesheet\" href=\"./examples/htmlpage.css\"\n\t\t\ttype=\"text/css\">\n\t\t<style>\n\t\t\t#header {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-template-columns: 1fr 65px;\n\t\t\t\tgrid-gap: 10px;\n\t\t\t\tborder-bottom: 1px solid black;\n\t\t\t\tmargin-bottom: 10px;\n\t\t\t}\n\t\t\t#header img {\n\t\t\t\talign-self: center;\n\t\t\t}\n\t\t\t.example {\n\t\t\tborder-bottom: 1px solid black;\n\t\t\tpadding-bottom: 10px;\n\t\t\tmargin-bottom: 2em;\n\t\t}\n\t\t.extitle {\n\t\t\tfont-size: 1em;\n\t\t\tfont-family: \"Verdana\";\n\t\t\tfont-style: italic;\n\t\t\tfont-weight: bold;\n\t\t}\n\n\t\t.exsubtitle {\n\t\t\tborder-bottom: 1px dashed black;\n\t\t\tmargin-bottom: 0.75em;\n\t\t\tpadding-bottom: 0.5em;\n\t\t}\n\t\t.hiddenalert {\n\t\t\tcolor: #F00;\n\t\t}\t\n\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"page\">\n\t\t<div id=\"header\">\n\t\t\t<h3>A Few Interesting<br> Uses of Math Minion</h3>\n\t\t</div>\n\t\t<div id=\"examples\">\n\t\t\t<div id=\"financialfunc\" class=\"example\">\n\t\t\t\t<div class=\"extitle\">\n\t\t\t\t\t\tFinancial Functions\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exsubtitle\"><span class=\"excat\">\n\t\t\t\t\t\tFinancial\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exdesc\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThis session contains a number of financial functions implemented as MM models.\n\t\t\t\t\t\tThese are the types of things (present value, internal rate of return, depreciation etc.)\n\t\t\t\t\t\tthat are often found in spreadsheet function libraries, but I thought it might be more\n\t\t\t\t\t\tuseful and instructive to just construct them from Minion objects.  Your thoughts and\n\t\t\t\t\t\tsuggestions on this are of course welcome.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"link\">\n\t\t\t\t\t<button onClick=\"mmpost({}, {mm_loadurl: '../examples/Financial.txt'});\">Import</button>\n\t\t\t\t</div>\t\t\n\t\t\t</div>\t\n\n\t\t\t<div id=\"indexof\" class=\"example\">\n\t\t\t\t<div class=\"extitle\">\n\t\t\t\t\t\tUsing Indexof to Look Up Table Values\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exsubtitle\"><span class=\"excat\">\n\t\t\t\t\t\tData Handling\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exdesc\">\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tIllustrates using the indexof function to do table look ups.\n\t\t\t\t\t\t\tIn this case looking up names and share holdings in one table by\n\t\t\t\t\t\t\tusing the company symbols in a second table.\n\t\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"link\">\n\t\t\t\t\t<button onClick=\"mmpost({}, {mm_loadurl: '../examples/indexof.txt'});\">Import</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div id=\"formattime\" class=\"example\">\n\t\t\t\t<div class=\"extitle\">\n\t\t\t\t\tFormat Time\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exsubtitle\"><span class=\"excat\">\n\t\t\t\t\tString Handling\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exdesc\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThis example contains a model that accepts a time value and calculates\n\t\t\t\t\t\tinteger values for the different date and time parts\n\t\t\t\t\t\tas well as formatted date and time strings.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tYou could create a library session with models like these to\n\t\t\t\t\t\tcopy and paste into your models as needed.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"link\">\n\t\t\t\t\t<button onClick=\"mmpost({}, {mm_loadurl: '../examples/FormatTime.txt'});\">Import</button>\n\t\t\t\t</div>\t\t\n\t\t\t</div>\n\n\t\t\t<div id=\"predator\" class=\"example\">\n\t\t\t\t<div class=\"extitle\">\n\t\t\t\t\t\tODE Example - Predator/Prey\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exsubtitle\"><span class=\"excat\">\n\t\t\t\t\t\tDynamic Modeling\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exdesc\">\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tThis example illustrates the use of the ODE solver simulate the classic\n\t\t\t\t\t\t\tpredator/prey relationship as characterized by the Lotka-Volterra model.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tSee <a href=\"http://wikipedia.org/wiki/Lotka-Volterra_equation\">\n\t\t\t\t\t\t\t\twikipedia.org/wiki/Lotka-Volterra_equation</a>.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tThe calculation is contained in the Population model, with the results\n\t\t\t\t\t\t\tillustrated in the two Plot objects.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tMathworks has a published demonstration of this problem (look for\n\t\t\t\t\t\t\t\"Numerical Integration of Differential Equations\" in the demos section\n\t\t\t\t\t\t\tof the mathworks.com website).  The Math Minion solution to this problem\n\t\t\t\t\t\t\tis reproduced in the MatlabExample model.\n\t\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"link\">\n\t\t\t\t\t<button onClick=\"mmpost({}, {mm_loadurl: '../examples/Predator.txt'});\">Import</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div id=\"triangulate\" class=\"example\">\n\t\t\t\t<div class=\"extitle\">\n\t\t\t\t\tTriangulate with Optimizer\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exsubtitle\"><span class=\"excat\">\n\t\t\t\t\tOptimizing\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exdesc\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThis example uses the optimizer to calculate the best estimate of the\n\t\t\t\t\t\tlocation of a receiver, given approximate distances to a number of transmitters\n\t\t\t\t\t\tof known location.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tFor simplicity, everything is assumed to be on a single 2D surface.\n\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div class=\"link\">\n\t\t\t\t\t<button onClick=\"mmpost({}, {mm_loadurl: '../examples/Triangulate.txt'});\">Import</button>\n\t\t\t\t</div>\t\t\n\t\t\t</div>\n\n\t\t\t<div id=\"footinch\" class=\"example\">\n\t\t\t\t<div class=\"extitle\">\n\t\t\t\t\tFoot Inch Calculator\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exsubtitle\"><span class=\"excat\">\n\t\t\t\t\tString Handling\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exdesc\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tImplements a four function Reverse Polish Notation calculator for\n\t\t\t\t\t\tfoot, inch fraction format.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThis is a fairly advanced example of the HtmlPage tool and its ability\n\t\t\t\t\t\tto communicate with the underlying Math Minion calculations.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tBoth the Math Minion models and the form code are heavily commented.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"link\">\n\t\t\t\t\t<button onClick=\"mmpost({}, {mm_loadurl: '../examples/Foot_Inch_Calculator.txt'});\">Import</button>\n\t\t\t\t</div>\t\t\n\t\t\t</div>\n\n\t\t\t<div id=\"orbits\" class=\"example\">\n\t\t\t\t<div class=\"extitle\">\n\t\t\t\t\tOrbits\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exsubtitle\"><span class=\"excat\">\n\t\t\t\t\t\tDynamic Modeling\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exdesc\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThis models the orbital motion of 2 or more planets around a sun.\n\t\t\t\t\t\tIt is a simplification of one of Marco M's wonderful models and as such,\n\t\t\t\t\t\tany mistakes are almost certainly once again mine.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tFor simplicity all of the planet masses are assumed to be equal,\n\t\t\t\t\t\talthough this could be relaxed at the expense of slightly more complicated equations.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\t\n\t\t\t\t\t\tAs set up, there are only three massive planets in close orbits.\n\t\t\t\t\t\tThe large mass 1000 ME (earth mass) was chosen in order to have visible\n\t\t\t\t\t\teffects very quickly and their initial positions and velocities result in\n\t\t\t\t\t\tthem orbiting around each other while orbiting the central sun.  Small changes\n\t\t\t\t\t\tto their orbital velocities will result in significant changes.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\t\n\t\t\t\t\t\tNote that two custom units ME (earth mass) and AU (astronomical unit) are used\n\t\t\t\t\t\tin this session.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\t\n\t\t\t\t\t\tThen try changing the leading 1.0 in the  InitialVx expression to 1.1 and rerun the\n\t\t\t\t\t\tsimulation.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"link\">\n\t\t\t\t\t<button onClick=\"mmpost({}, {mm_loadurl: '../examples/orbits.txt'});\">Import</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div id=\"friction\" class=\"example\">\n\t\t\t\t<div class=\"extitle\">\n\t\t\t\t\t\tFriction Factor vs Reynolds\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exsubtitle\"><span class=\"excat\">\n\t\t\t\t\t\tEngineering\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exdesc\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tFriction factors are determined by solving the Colebrook equation for a\n\t\t\t\t\t\trange of Reynolds numbers and roughness over diameter factors.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tIf you want an operating point displayed, enter the appropriate values in\n\t\t\t\t\t\tOperatingF and OperatingRe.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThe friction factors are determined by solving the Colebrook equation for a\n\t\t\t\t\t\trange of Reynolds numbers and roughness over diameter factors.\n\t\t\t\t\t</p>\t\t\t\t\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div class=\"link\">\n\t\t\t\t\t<button onClick=\"mmpost({}, {mm_loadurl: '../examples/FrictionFactor.txt'});\">Import</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div id=\"mccabe\" class=\"example\">\n\t\t\t\t<div class=\"extitle\">\n\t\t\t\t\t\tMcCabe Thiele\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exsubtitle\"><span class=\"excat\">\n\t\t\t\t\t\tEngineering\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exdesc\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThis is a partial port of a McCabe Thiele Excel spreadsheet written by my\n\t\t\t\t\t\tgood friend, Marco Satyro, for teaching purposes.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThe spreadsheet made extensive use of the VBA programming language and my\n\t\t\t\t\t\tpurpose was to see if Math Minion could implement the key aspects of the\n\t\t\t\t\t\tcalculations just using its formulas.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThe math and science behind this are all Marco's and the errors and omissions\n\t\t\t\t\t\tI undoubtedly introduced are all mine.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"link\">\n\t\t\t\t\t<button onClick=\"mmpost({}, {mm_loadurl: '../examples/McCabe_Thiele.txt'});\">Import</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div id=\"steamturbine\" class=\"example\">\n\t\t\t\t<div class=\"extitle\">\n\t\t\t\t\t\tSteam Turbine\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exsubtitle\"><span class=\"excat\">\n\t\t\t\t\t\tEngineering\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exdesc\">\n\t\t\t\t\t<p>Given:</p>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>inlet temperature</li>\n\t\t\t\t\t\t<li>inlet pressure</li>\n\t\t\t\t\t\t<li>outlet pressure</li>\n\t\t\t\t\t\t<li>mass flow</li>\n\t\t\t\t\t\t<li>isentropic efficiency</li>\n\t\t\t\t\t</ul> \n\t\t\t\t\t<p>\n\t\t\t\t\t\tthis model calculates the power, outlet temperature and polytropic\n\t\t\t\t\t\tefficiency of a steam turbine.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tIt uses  steam correlations taken from the\n\t\t\t\t\t\t<a href=\"http://www.iapws.org/relguide/IF97-Rev.pdf\">\n\t\t\t\t\t\t\t\"IAPWS Industrial Formulation 1997 for the Thermodynamic Properties of Water and Steam\" document</a>.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tOf course and as always, there are zero guarantees of correct implementation.\n\t\t\t\t\t</p>\n\t\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div class=\"link\">\n\t\t\t\t\t<button onClick=\"mmpost({}, {mm_loadurl: '../examples/Turbine.txt'});\">Import</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div id=\"taylor\" class=\"example\">\n\t\t\t\t<div class=\"extitle\">\n\t\t\t\t\t\tTaylor Series Expansion\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exsubtitle\"><span class=\"excat\">\n\t\t\t\t\t\tMath\n\t\t\t\t</div>\n\t\t\t\t<div class=\"exdesc\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tSeries expansion is a common mathematical tool for approximating functions\n\t\t\t\t\t\tthat cannot be directly calculated.  This example will show how Math Minion's\n\t\t\t\t\t\tmatrix object can be used to easily implement a series expansion, specifically\n\t\t\t\t\t\ta Taylor series to calculate e^x and sin(x).\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tSee the notes for each of the objects.\n\t\t\t\t\t</p>\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div class=\"link\">\n\t\t\t\t\t<button onClick=\"mmpost({}, {mm_loadurl: '../examples/Taylor_Series_Expansion.txt'});\">Import</button>\n\t\t\t\t</div>\t\t\n\t\t\t</div>\t\t\t\t\t\n\t\t</div>\n\t\t</div>\n\t</body>\n</html>"
				}
			},
			{
				"name": "Tools",
				"Notes": "<b>Tools</b> - where formulas live",
				"DiagramX": 155,
				"DiagramY": 50,
				"HideInfo": "n",
				"DiagramNotes": "y",
				"HtmlNotes": "y",
				"Type": "Model",
				"diagramScale": 1,
				"Objects": [
					{
						"name": "Iterator",
						"Notes": "<b>Iterator</b>\nWhen you really need to loop.",
						"DiagramX": 145,
						"DiagramY": -45,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Dice",
								"Notes": "Dice\nA table of all possible outcomes of rolling two dice is calculated in the expression \"rolls\".",
								"DiagramX": 205,
								"DiagramY": -50,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "rolls",
										"Notes": "A simple addition of a range  from 1 to 6 to the transpose of another range from 1 to 6 produces a matrix of all possible outcomes of rolling two dice.",
										"DiagramX": 40,
										"DiagramY": 50,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1:6+{transpose 1:6}"
										},
										"showInput": "y",
										"format": "12.0f"
									},
									{
										"name": "sumn",
										"Notes": "Using the \"eq\" function to compare \"rolls\" with a scalar, in this case the iterator's loop variable, will return a matrix with a 1 in positions that match and 0 in the other positions.\n\nBy summing this matrix, we get a count of the number of matches.",
										"DiagramX": 40,
										"DiagramY": 120,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{sum {eq rolls, count.x}}"
										},
										"showInput": "y",
										"format": "12.0f"
									},
									{
										"name": "count",
										"Notes": "Initializes \"x\" to 2 and then loops while it is less than or equal to 12, incrementing \"x\" on each loop.\n\nThe values for \"x\" and \"sumn\" are recorded for each loop.",
										"DiagramX": 130,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Iterator",
										"whileFormula": {
											"Formula": "{le $.x, 12}"
										},
										"initXFormula": {
											"Formula": "2"
										},
										"nextXFormula": {
											"Formula": "$.x + 1"
										},
										"recFormulas": [
											{
												"Formula": "$.x 'Roll"
											},
											{
												"Formula": "sumn"
											}
										],
										"AutoRun": "y"
									},
									{
										"name": "Probability",
										"Notes": "The probability of any outcome is the number of ways that outcome can be achieved, divided by all the possible roll combinations.",
										"DiagramX": 130,
										"DiagramY": 95,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "count.sumn / (6*6)"
										},
										"showInput": "y"
									},
									{
										"name": "plot",
										"Notes": "The results are displayed in this rather dull graph.",
										"DiagramX": 225,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "count.roll'Roll",
											"vmin": "",
											"vmax": "",
											"Y1": {
												"v": "count.sumn'Count",
												"vmin": "",
												"vmax": "",
												"lineType": 1
											},
											"Y2": {
												"v": "Probability",
												"vmin": "0",
												"vmax": "0.2",
												"lineType": 0
											}
										},
										"Selected": "0_0"
									},
									{
										"name": "table",
										"Notes": "and also displayed in this table.",
										"DiagramX": 225,
										"DiagramY": 65,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "plot.table\n"
										},
										"showInput": "y",
										"tableFormats": [
											null,
											"12.0f",
											"12.0f"
										]
									},
									{
										"name": "Overview",
										"Notes": "<b>OverviewM</b>\n\nA table of all possible outcomes of rolling two dice is calculated in the expression \"rolls\".\n\nThe \"sumn\" expression calculates the total number of outcomes equaling a given value.  That value is the current \"x\" value of the iterator \"counts\".\n\nThe iterator \"count\" initializes it's \"x\" parameter to 2 and loops until it is equal to 12, incrementing \"x\" on each loop.\n\nThe value of \"x\" and \"sumn\" are recorded for each loop.\n\nThe recorded number of occurrences is divided by 36 in \"Probability\" and the results presented in table form in \"nTable\".",
										"DiagramX": 40,
										"DiagramY": 20,
										"HideInfo": "n",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									}
								]
							},
							{
								"name": "XArray",
								"Notes": "XArray\nAn iterator is used to create a matrix of lengths and a matrix of its values squared.  This can be easily accomplished in a single expression, without an iterator, as shown in \"No_Loop\". However the iterator illustrates the use of a non-scalar loop variable.",
								"DiagramX": 290,
								"DiagramY": -50,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "n",
										"Notes": "Number of values.",
										"DiagramX": 135,
										"DiagramY": 15,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "6"
										},
										"showInput": "y"
									},
									{
										"name": "iter",
										"Notes": "The iterator initializes its \"x\" variable to an array ranging from 1 m to 6 m.\n\nOn each loop, this array is incremented by 1 m and the result is recorded, along with the \"i\" variable and the square of the \"x\" variable.  In this case it would be more sensible to just square the recorded value array outside of the iterator, but this is just for illustration.\n\nThe \"while\" expression just uses the count variable \"i\", to loop over the first \"n\" values.",
										"DiagramX": 135,
										"DiagramY": 55,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Iterator",
										"whileFormula": {
											"Formula": "{le $.i, n}"
										},
										"initXFormula": {
											"Formula": "1:n*1 m"
										},
										"nextXFormula": {
											"Formula": "$.x + 1 m"
										},
										"recFormulas": [
											{
												"Formula": "$.i'i"
											},
											{
												"Formula": "$.x"
											},
											{
												"Formula": "$.x^2"
											}
										],
										"AutoRun": "y"
									},
									{
										"name": "r1",
										"Notes": "The recorded \"i\" values",
										"DiagramX": 220,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "iter.r1"
										},
										"showInput": "y",
										"format": "12.0f"
									},
									{
										"name": "r2",
										"Notes": "The recorded x values.  Each value is an array, so the result is a matrix.",
										"DiagramX": 220,
										"DiagramY": 55,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "iter.r2"
										},
										"showInput": "y",
										"format": "12.0f"
									},
									{
										"name": "r3",
										"Notes": "The recorded x squared values.",
										"DiagramX": 220,
										"DiagramY": 100,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "iter.r3"
										},
										"showInput": "y",
										"format": "12.0f"
									},
									{
										"name": "No_Loop",
										"Notes": "This calculates the equivalent of the \"x\" squared matrix, as represented by \"r3\", but does it much more efficiently and simply in a single expression.\n\nMost problems that would require a loop in a programming language, can be solved with simple expressions in Math Minion.",
										"DiagramX": 220,
										"DiagramY": 140,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "(\n\t1:6 * 1 m +\n\t{transpose 0:5 * 1 m}\n)^2"
										},
										"showInput": "y",
										"format": "12.0f"
									}
								]
							},
							{
								"name": "Overview",
								"Notes": "<b>Overview</b>\nMath Minion's array and matrix tools, including the range operator and its solvers, make conventional loops largely unnecessary.  However they can still be occasionally useful, particularly for case study type problems.\n\nThe iterator tool provides this capability.  It has a loop variable (parameter X) and a loop counter (parameter i) and also allows values to be recorded for each iteration.\n\nThere are two simple examples presented here.  The Dice model calculates the likelihood of a given outcome of rolling two dice.  This is done in a brute force manner to illustrate iterator use.\n\nThe XArray model doesn't really do anything, other than illustrate that the loop variable does not have to be a scalar.",
								"DiagramX": 205,
								"DiagramY": -80,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							}
						]
					},
					{
						"name": "Expressions",
						"Notes": "<b>Expressions</b>\nExpressions are the simplest Math Minion tool - just a formula and the display of a result.",
						"DiagramX": 50,
						"DiagramY": -15,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "ColumnArray",
								"Notes": "Here the range operator is used to create an array of numbers between 1 and 20, which is then multiplied by 1\"m\" to convert the values into lengths.\n\nOn the expression view, you can drag the results table up or down to see more. Dragging on the row and column headers will scroll quickly.",
								"DiagramX": 20,
								"DiagramY": 70,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "1:20 * 1\"m\""
								},
								"showInput": "y"
							},
							{
								"name": "RowArray",
								"Notes": "Here the transpose function (which can be abbreviated as just tr) is used to create a row array.\n\nIn this case the display unit has been changed to \"cm\".  You can tap on the unit name to select a different unit from the unit browser.",
								"DiagramX": 20,
								"DiagramY": 100,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{transpose 1:10 * 1\"m\"}"
								},
								"showInput": "y",
								"displayUnit": "cm"
							},
							{
								"name": "matrix",
								"Notes": "Multiplying the ColumnArray by the RowArray creates a matrix.\n\nTapping on the info button beside the unit name will bring up a unit browser where you can choose a display unit.  \n\nIf a specific display unit is used, rather than the default, the unit type and name are displayed in blue.\n\nSee the dot function for matrix multiplication (inner product).",
								"DiagramX": 20,
								"DiagramY": 130,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "ColumnArray * RowArray"
								},
								"showInput": "y",
								"displayUnit": "ft^2"
							},
							{
								"name": "StringArray",
								"Notes": "Arrays can have string values as well",
								"DiagramX": 110,
								"DiagramY": 5,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "\"Row \" + {fmt \"3.0f\", 1:20}"
								},
								"showInput": "y"
							},
							{
								"name": "TableValue",
								"Notes": "Expressions can also display table values.  These often result from operations on a DataTable tool, but can also be created with functions as in this example.\n\nIf you tap in the expression view on the column header titled \"Value\", the current display unit and format for the column will be shown. Tapping on the unit will bring up the unit browser where you can select a different display unit for the column.\n\nChanging the display unit never effects the actual calculations, only how the results are displayed.",
								"DiagramX": 110,
								"DiagramY": -25,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{table {cc \"Name\", \"Value\"}\n\tStringArray, ColumnArray\n}"
								},
								"showInput": "y",
								"tableFormats": [
									null,
									null,
									"12.1f"
								]
							},
							{
								"name": "Complex",
								"Notes": "Any two column array can be used as a complex number, with the first column representing the real component and the second the imaginary one.\n\nAll the complex value functions use table values to represent their results, with column 1 being labeled \"r\" and column 2 \"i\".",
								"DiagramX": 110,
								"DiagramY": 135,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{complex 1, 2}"
								},
								"showInput": "y"
							},
							{
								"name": "Overview",
								"Notes": "<b>Expressions</b>\n\nAn expression is the simplest Math Minion object - just a formula and the display of a result.  But they are the work horse of any problem.\n\nYou will probably use expressions more than any other Math Minion tool.  This model has some examples and information about using them, but most of it is also covered elsewhere.",
								"DiagramX": 20,
								"DiagramY": -25,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							},
							{
								"name": "distance",
								"Notes": "An expression contains a single formula or constant. For instance this expression is named distance has the formula:\n\n5 km\n\nwhich is a scalar constant.",
								"DiagramX": 20,
								"DiagramY": 10,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "5 km"
								},
								"showInput": "y"
							},
							{
								"name": "speed",
								"Notes": "This expression has the formula:\n\ndistance / 180 s\n\nand will have a value 27.78 m/s or 100 kph.\n\nThe display unit and number format have been set on the expression's view.",
								"DiagramX": 20,
								"DiagramY": 40,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "distance / 180 s"
								},
								"showInput": "y",
								"displayUnit": "kph",
								"format": "10.2f"
							},
							{
								"name": "LongerString2",
								"Notes": "Normally a single quote is used to add a comment to the end of a formula, but if the entire formula consists of a comment, it is interpreted as a string value.\n\nThis is handy for long strings as you just need to start them with a single quote.",
								"DiagramX": 110,
								"DiagramY": 105,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "'This string has several lines,\nsuch as this one,\nand this one\nand yet another one."
								},
								"isInput": "y",
								"showInput": "y"
							},
							{
								"name": "ScalarString",
								"Notes": "A string constant can be defined by including the desired text in double quotes or backticks.",
								"DiagramX": 110,
								"DiagramY": 45,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "\"Hello World\""
								},
								"isInput": "y",
								"showInput": "y"
							},
							{
								"name": "LongerString",
								"Notes": "By using the expanded formula editor, you can create strings with more than one line, by enclosing the whole thing in double quotes or backticks.\n\nYou will notice that the string no longer fits completely in the display cell at the bottom, but if you click on that cell, a view will open that displays the entire string.\n\nHowever you can only change the value of the expression by editing the formula, not the displayed string.",
								"DiagramX": 110,
								"DiagramY": 75,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "`This string has\ntwo lines.`"
								},
								"isInput": "y",
								"showInput": "y"
							}
						]
					},
					{
						"name": "Optimizer",
						"Notes": "<b>Optimizer</b>\nAttempts to obtain the smallest value possible for a single function.",
						"DiagramX": 145,
						"DiagramY": -75,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Rosenbrock",
								"Notes": "The Rosenbrock function is a classic performance test problem for optimizers.  The global minimum is inside a flat bottomed, long, narrow and curved valley.\n\nThe function is: \n\nf(x,y) = (1 - x)^2 + 100(y - x^2)^2\n\nAnd has a global minimum at (1,1).\n\nNote that the optimizer runs automatically if it's inputs are changed and the Optimize switch is on.\n\n Uncheck the box after the optimization is complete if you wish to prevent this.\n\nThe reset button will return the output values to their initial value of 0 and turn off the optimize switch.  Turn it on again when you want the optimizer to run.\n",
								"DiagramX": -135,
								"DiagramY": -145,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Optimizer",
								"optFormula": {
									"Formula": "( 1.0 - $.1 ) ^ 2.0 + 100.0 * ($.2 - $.1*$.1)^2.0"
								},
								"countFormula": {
									"Formula": "2"
								},
								"outputs": [
									0.9999999999999118,
									0.9999999899998104
								],
								"Enabled": true,
								"Optimized": true
							},
							{
								"name": "LeastSqr",
								"Notes": "An optimizer is used to fit a parabola to a set of semi random points.\n\nThe points are generated by adding random numbers to the a and b parameters of an equation:\n\ny = x^A + b\n\nwhere a is 2 and b is 50 in this example.",
								"DiagramX": -65,
								"DiagramY": -145,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "randCurve",
										"Notes": "By adding random numbers to the parameters defining a parabola, we create a set of points which approximate the curve, but with significant errors.",
										"DiagramX": 40,
										"DiagramY": -35,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "x^(2  + rand1) + (50 + rand2)"
										},
										"showInput": "y"
									},
									{
										"name": "error",
										"Notes": "The squares of the differences between the randomized points and the points generated using the optimizer outputs as the parameters of the parabola.\n",
										"DiagramX": 130,
										"DiagramY": -35,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "(line - randCurve)^2"
										},
										"showInput": "y"
									},
									{
										"name": "actual",
										"Notes": "The curve we want to fit.  The \"randCurve\" expression will produce points approximating this curve by adding random numbers to the two parameters.",
										"DiagramX": 40,
										"DiagramY": 130,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "x^2 + 50"
										},
										"showInput": "y"
									},
									{
										"name": "line",
										"Notes": "The y values generated for a parabola whose parameters are the outputs from the optimizer.",
										"DiagramX": 130,
										"DiagramY": 85,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "x^lstsqr.1 + lstsqr.2 "
										},
										"showInput": "y"
									},
									{
										"name": "graph",
										"Notes": "The randomized points, the actual curve and the curve whose parameters were optimized are all plotted.",
										"DiagramX": 130,
										"DiagramY": 135,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "x",
											"vmin": "",
											"vmax": "",
											"Y1": {
												"v": "randCurve'Points",
												"vmin": "0",
												"vmax": "500",
												"lineType": 1
											},
											"Y2": {
												"v": "line'Optimized",
												"vmin": "0",
												"vmax": "500",
												"lineType": 0
											},
											"Y3": {
												"v": "actual'Actual",
												"vmin": "0",
												"vmax": "500",
												"lineType": 0
											}
										},
										"Selected": "0_2"
									},
									{
										"name": "rand2",
										"Notes": "A second set of random numbers used to generate the points to fit.",
										"DiagramX": -65,
										"DiagramY": 105,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "randomness * ({rand n} - .5) * 4 * x"
										},
										"showInput": "y"
									},
									{
										"name": "n",
										"Notes": "The number of points to generate.",
										"DiagramX": 40,
										"DiagramY": 40,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "20"
										},
										"showInput": "y"
									},
									{
										"name": "lstsqr",
										"Notes": "We want to minimized the sum of the square of the errors, so that the outputs of this optimizer are a good fit as parameters of a parabola.\n",
										"DiagramX": 130,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Optimizer",
										"optFormula": {
											"Formula": "{sum error}"
										},
										"countFormula": {
											"Formula": "2"
										},
										"outputs": [
											1.9885703603575509,
											52.73544368969517
										],
										"Enabled": true,
										"Optimized": true
									},
									{
										"name": "rand1",
										"Notes": "One of two arrays of random numbers that will be used to generate points approximating a parabola.\n\nNote that if the rand function has a parameter, it is taken as the number of random points to generate.",
										"DiagramX": -65,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "randomness * ({rand n} - .5)  / 10"
										},
										"showInput": "y"
									},
									{
										"name": "x",
										"Notes": "A range of x values to be used in other expressions.",
										"DiagramX": 40,
										"DiagramY": 80,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1:n"
										},
										"showInput": "y"
									},
									{
										"name": "ErrorActual",
										"Notes": "Calculate the errors for the random points versus the actual line",
										"DiagramX": -65,
										"DiagramY": 150,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{sum (actual - randCurve)^2}"
										},
										"showInput": "y"
									},
									{
										"name": "randomness",
										"Notes": "Changes the amount of randomness.\n\nSet to 0 and the solution should be exactly 2 and 50.\n",
										"DiagramX": -65,
										"DiagramY": -35,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Overview",
								"Notes": "<b>Overview</b>\n\nLike the solver tool, the optimizer manipulates one or more output values to achieve a desired result.  \n\nFor the optimizer this is to obtain the smallest value possible for a single function that incorporates the solver outputs.\n\nThe Powell method is used.\n\nThis model contains two examples:\n\n   <b>Rosenbrock</b> - a classic optimization example.\n\n   <b>LeastSqr</b> - uses the optimizer to fit a curve to a set of data points.",
								"DiagramX": -135,
								"DiagramY": -175,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							}
						]
					},
					{
						"name": "Matrices",
						"Notes": "<b>Matrices</b>\nThe matrix tool and operations on matrices.",
						"DiagramX": 50,
						"DiagramY": 45,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Multiply",
								"Notes": "<b>Multiply</b>\nAdditional examples of multiplying matrices.",
								"DiagramX": 60,
								"DiagramY": 25,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "cDotC",
										"Notes": "By taking the transpose of the column array, we can use the dot function to matrix multiply it by it's untransposed self.  The result is a scalar.",
										"DiagramX": 20,
										"DiagramY": 80,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{dot {tr col}, col}"
										},
										"showInput": "y"
									},
									{
										"name": "col2",
										"Notes": "A column array with elements 2 and 3",
										"DiagramX": 20,
										"DiagramY": 145,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "2:3"
										},
										"showInput": "y"
									},
									{
										"name": "rxc",
										"Notes": "As multiplication is commutative, reversing the order and multiplying the row array by the column array results in the same 8x4 result.",
										"DiagramX": 20,
										"DiagramY": -10,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "row*col"
										},
										"showInput": "y"
									},
									{
										"name": "row",
										"Notes": "A row array of length 4 generated by using the transpose function on a column array.",
										"DiagramX": -70,
										"DiagramY": -10,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{tr 11:14}"
										},
										"showInput": "y"
									},
									{
										"name": "row2X",
										"Notes": "An example of multiplying a matrix by a row matrix that has fewer columns.",
										"DiagramX": 115,
										"DiagramY": -10,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{transpose col2}*rxc"
										},
										"showInput": "y"
									},
									{
										"name": "dot",
										"Notes": "The dot function does matrix multiplication of the two arguments.\n\nThe nontechnical Wikipedia definition of a matrix multiplication result is \"a matrix whose elements are found by multiplying the elements of the same row from the first matrix times the associated elements of the same column from the second matrix and summing\".\n\nIn this case matrix multiplying the column array times the row array results in the same 8x4 matrix as the normal multiplication yielded.  This is because the number of columns in the first argument and rows in the second argument are 1, so the summation takes place over a single cell.\n\nMatrix multiplication is not commutative and in this case a matrix multiplication of the row array by the column array would be illegal since the number of columns of the first must equal the number of rows of the second.\n\nSee the mmult expression for an example of using the dot function on actual matrices.",
										"DiagramX": 20,
										"DiagramY": 50,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{dot col, row}"
										},
										"showInput": "y"
									},
									{
										"name": "cxr",
										"Notes": "Multiplying the 8 row column array by the 4 column row array results in an 8x4 matrix.",
										"DiagramX": 20,
										"DiagramY": -60,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "col*row"
										},
										"showInput": "y"
									},
									{
										"name": "col",
										"Notes": "A column matrix of length 8 generated with the range operator.",
										"DiagramX": -70,
										"DiagramY": -60,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1:8"
										},
										"showInput": "y"
									},
									{
										"name": "col2X",
										"Notes": "An example of multiplying a matrix by a column matrix that has fewer rows.",
										"DiagramX": 115,
										"DiagramY": -60,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "col2*rxc"
										},
										"showInput": "y"
									},
									{
										"name": "B",
										"Notes": "A 3x2 matrix with all cells defined as constants.  The unit for these values is defined as meters.",
										"DiagramX": 115,
										"DiagramY": 100,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Matrix",
										"unit": "m",
										"CellInputs": {
											"0_0": "0 m",
											"3_2": "5 m",
											"2_1": "9 m",
											"3_1": "8 m",
											"1_2": "25 m",
											"2_2": "10 m",
											"1_1": "12 m"
										},
										"rowCount": "3",
										"columnCount": "2"
									},
									{
										"name": "A",
										"Notes": "A 4x3 matrix with all cells defined as constants.  The unit for these values is defined as newtons.",
										"DiagramX": 115,
										"DiagramY": 40,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Matrix",
										"unit": "N",
										"CellInputs": {
											"0_0": "0 N",
											"2_1": "2 N",
											"3_3": "7 N",
											"1_2": "9 N",
											"3_1": "0 N",
											"4_3": "3 N",
											"2_2": "11 N",
											"1_3": "3 N",
											"4_1": "5 N",
											"3_2": "12 N",
											"1_1": "14 N",
											"2_3": "15 N",
											"4_2": "2 N"
										},
										"rowCount": "4",
										"columnCount": "3"
									},
									{
										"name": "mmult",
										"Notes": "The dot function is used to matrix multiply a 4x3 matrix by a 3x2 matrix, yielding a 4x2 result.\n\nUnits are honoured in matrix multiplication as with other multiplications.\n\nIn this case multiplying a newton by a meter results in a joule, but the SI unit set uses kilojoules as the default output, so the numbers are smaller by a factor of a 1000 than if units hadn't been used.\n\nOf course you can set the display unit to a different energy unit if you wish.",
										"DiagramX": 200,
										"DiagramY": -60,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{dot A, B}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Example",
								"Notes": "Cell function example",
								"DiagramX": 60,
								"DiagramY": 110,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "n",
								"Type": "Model",
								"diagramScale": 1,
								"indexTool": "overview",
								"Objects": [
									{
										"name": "interest",
										"Notes": "A constant for the Savings calculation.",
										"DiagramX": 20,
										"DiagramY": 50,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "10 %"
										},
										"showInput": "y"
									},
									{
										"name": "initial",
										"Notes": "The initial amount of savings\n",
										"DiagramX": 20,
										"DiagramY": 90,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1000"
										},
										"showInput": "y"
									},
									{
										"name": "futureV",
										"Notes": "One can accomplish the same thing as the savings matrix with a single formula, if you aren't trying to demonstrate matrix behaviour. :-)",
										"DiagramX": 120,
										"DiagramY": 130,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "initial *\n(1 + interest/12)^(1:(10*12))"
										},
										"showInput": "y",
										"format": "10.2f"
									},
									{
										"name": "savings",
										"Notes": "Assuming an initial value and an interest compounded monthly, the ever growing monthly savings can be calculated by:\n\n{cell -1,0} * ( 1 + interest / 12)\n\nThe initial amount for the end of the first month is entered into cell 1,1 and this formula is used for the rest of the column 1 cells.\n\nAssuming the interest is an annual interest, it is divided by 12, added to 1 and the result used to multiply last months value from the cell above.\n\nThe number of rows is set to be 10 * 12 to provide 10 years of month by month calculations.",
										"DiagramX": 20,
										"DiagramY": 125,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Matrix",
										"unit": "dollar",
										"CellInputs": {
											"0_0": "0",
											"0_1": "{cell -1,0} * ( 1 + interest / 12)",
											"1_1": "initial * (1 + interest/12)"
										},
										"rowCount": "10 * 12",
										"columnCount": "1",
										"format": "10.2f"
									},
									{
										"name": "yearlySavings",
										"Notes": "Rather than looking at every month, perhaps we are only interested in yearly values.\n\nHere I use a index array to extract the 12th, 24th, 36th etc. values.  The range operator produces an array 1,2,3..20, which is multiplied by twelve to produce an array 12,24,36...240.  These values are then used as the indices into the savings array.",
										"DiagramX": 120,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "savings[1:10*12]"
										},
										"showInput": "y"
									},
									{
										"name": "Overvlew",
										"Notes": "<b>Overview</b>\n\nThe cell function was discussed in the notes for the Matrix tool, but how it might be useful may not have been obvious in that contrived example.\n\nIt actually comes up quite frequently, so here is another contrived and very simple example of its use.",
										"DiagramX": 20,
										"DiagramY": 20,
										"HideInfo": "n",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									}
								]
							},
							{
								"name": "Inversion",
								"Notes": "<b>Inversion</b>\nMatrix inversion example",
								"DiagramX": 60,
								"DiagramY": 70,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Random",
										"Notes": "This is a 50x50 matrix filled with random numbers for use with the invert function.\n\nInverting a matrix of random numbers has a very high likelihood of succeeding.  The numbers are random though, so there is a small possibility that a singular or otherwise evil matrix might be generated resulting in the inversion failing.\n\nIn that case just tap on the equals sign in front of the formula field for the origin cell. This will cause the formula to be reevaluated.",
										"DiagramX": 45,
										"DiagramY": 15,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Matrix",
										"CellInputs": {
											"0_0": "{rand} "
										},
										"rowCount": "50",
										"columnCount": "50"
									},
									{
										"name": "Invert",
										"Notes": "The invert function is used to invert the Random matrix.  See the notes on the Random matrix if this should fail.",
										"DiagramX": 125,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{invert random}"
										},
										"showInput": "y"
									},
									{
										"name": "matmult",
										"Notes": "Matrix multiplying a matrix by its inverse should result in the identity matrix, as demonstrated here.\n\nThe off diagonal values won't be identically zero, but as an engineer, I will call it close enough. :-)",
										"DiagramX": 210,
										"DiagramY": 15,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{dot random, invert}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Operations_2",
								"Notes": "<b>Operations_2</b>\nMore matrix operations",
								"DiagramX": 60,
								"DiagramY": -15,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "m2x8",
										"Notes": "A matrix used to illustrate how binary arithmetic operators work with matrices.",
										"DiagramX": 45,
										"DiagramY": 10,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Matrix",
										"CellInputs": {
											"0_0": "{row} + {col}/10"
										},
										"rowCount": "2",
										"columnCount": "8"
									},
									{
										"name": "m4x3",
										"Notes": "A second matrix for illustrating binary arithmetic operators.",
										"DiagramX": 45,
										"DiagramY": 65,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Matrix",
										"CellInputs": {
											"0_0": "{row}*10 + {col}/100"
										},
										"rowCount": "4",
										"columnCount": "3"
									},
									{
										"name": "s4x8",
										"Notes": "Here a 2x8 matrix is added to a 4x3 matrix to illustrate how binary operators work with matrices.\n\nNormally you will be performing such operations on matrices that conform in size, but Math Minion does permit operations on mismatched matrices such as these.\n\nThe result will always have a number of rows equal to the larger of the two operands.  Similarly the number of result columns will be the larger of the two.\n\nEach result cell is calculated by performing the arithmetic operation on the cells of the operands with indices corresponding to that of the result cell.\n\nIf either of these indices would be too large for the operand, the modulus of its value with respect to the maximum size is used.\n\nIn effect this means the smaller operands values are reused in order as needed.\n\nThe effect is easy to examine in this example as the calculation results in values where the inner two digits represent the row and column of the 2x8 operand, while the outer digits represent the row and column of the 4x3 operand.\n\nBe sure and see the notes in Multiply in the parent model for more examples of operations on matrices, including matrix multiplication with the dot function.\n\nNot that the concat function can be abbreviated as just cc.",
										"DiagramX": 250,
										"DiagramY": 20,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "m2x8 + m4x3"
										},
										"showInput": "y"
									},
									{
										"name": "concat",
										"Notes": "The concat, usually abbreviated as cc, function creates a new array by concatenating the values of all of its arguments.  Matrix arguments will be unwound row by row.  The redim function can be used to redimension the resulting array if desired.",
										"DiagramX": 45,
										"DiagramY": 110,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{cc m2x8, m4x3}"
										},
										"showInput": "y"
									},
									{
										"name": "redim",
										"Notes": "The redim function can be used to redimension a value.  This does not change how many elements the object has, or even the order in which they are stored' but rather changes how they are arranged in rows and columns.\n\nThe function takes two arguments.  The first is the value to be copied and the second is the number of columns the result is to have.  The number of columns must divide evenly into the total number of elements in the source value.\n\nMatrices in Math Minion are stored row by row, so that if you were to use this function to change a matrix into a column array with only one column, then the top values would be those from the first row, with the values from the second row, following and so forth.",
										"DiagramX": 150,
										"DiagramY": 105,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{redim concat 4}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Operations_1",
								"Notes": "<b>Operations_1</b>\nBasic matrix operations",
								"DiagramX": 60,
								"DiagramY": -55,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Matrix",
										"Notes": "A matrix object.",
										"DiagramX": 55,
										"DiagramY": -255,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Matrix",
										"CellInputs": {
											"0_0": "{row} + {col} / 10",
											"0_2": "{cell -1, 0} + {row}",
											"1_2": "1",
											"3_0": "100 * {col}^2"
										},
										"rowCount": "5",
										"columnCount": "4"
									},
									{
										"name": "Transpose",
										"Notes": "The transpose function rotates a matrix so that its rows become columns and it columns become rows.  Thus the 5x4 Matrix value becomes a 4x5 matrix.",
										"DiagramX": 55,
										"DiagramY": -95,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{transpose matrix}"
										},
										"showInput": "y"
									},
									{
										"name": "Cell",
										"Notes": "A cell of a matrix can be referenced by following the matrix name by the comma separated row and column numbers in square brackets:\n\nmatrix[4,2]",
										"DiagramX": 55,
										"DiagramY": -220,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "matrix[4,2]"
										},
										"showInput": "y"
									},
									{
										"name": "Row",
										"Notes": "If only a single index is given inside the square brackets, it is assumed to be a row number and returns the entire row.  Thus for a column array, a[3] would be equivalent to a[3,1].",
										"DiagramX": 150,
										"DiagramY": -190,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "matrix[4]"
										},
										"showInput": "y"
									},
									{
										"name": "Subsets",
										"Notes": "The row and column values inside the square bracket index operator don't have to be scalars.\n\nIn this case the array from the Indices object is used for the row value, while the range operator 2:3 is used for the columns.  The result is a 3x2 subset of Matrix.\n\nWhile all the values in indices must be valid for the matrix being referenced, they do not have to be contiguous or in a specific order.\n\nIf the index is a matrix rather than an array, it will be unwound row by row to produce the index array.",
										"DiagramX": 235,
										"DiagramY": -190,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "matrix[ indices, 2:3]"
										},
										"showInput": "y"
									},
									{
										"name": "Upper",
										"Notes": "An \"if\" function is used to extract the diagonal and upper triangle of the Matrix matrix, while setting the lower triangle values to 1.\n",
										"DiagramX": 55,
										"DiagramY": -150,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Matrix",
										"CellInputs": {
											"0_0": "{if {gt {row}, {col}},\n  1,\n  matrix[ {row}, {col} ]\n}\n' select 1 if row number is greater than column number, otherwise the corresponding value from the matrix object is used.\n\nNote the use of the single quote to append a comment to the end of a formula.\n"
										},
										"rowCount": "{nrows matrix}",
										"columnCount": "{ncols matrix}"
									},
									{
										"name": "Column",
										"Notes": "If the row index is 0, then all rows are selected.\n\nThus matrix[0,2] will result in a column array consisting of the 2nd column of matrix.",
										"DiagramX": 150,
										"DiagramY": -115,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "matrix[0,2]"
										},
										"showInput": "y"
									},
									{
										"name": "indices",
										"Notes": "This is a column matrix with some values for use with the Subsets expression.",
										"DiagramX": 170,
										"DiagramY": -255,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{cc 1, 4, 5}"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Matrices",
								"Notes": "While the result of every calculation in Math Minion is a matrix, even if it is often just a 1x1 matrix, there is also a specific matrix tool that can be added to the diagram.\n\nThis tool allows for a detailed specification of a matrix.\n\nIndependent formulas can be supplied for each row, column or cell and these formulas are allowed to reference other cells in the matrix.\n",
								"DiagramX": -25,
								"DiagramY": -55,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Matrix",
								"CellInputs": {
									"0_0": "{row} * {col} ",
									"0_2": "{row} * 100",
									"3_1": "{cell -1, 1} * 5",
									"3_2": "10000 %",
									"2_0": "{col} *10"
								},
								"rowCount": "4",
								"columnCount": "2"
							},
							{
								"name": "The_Matrix_Tool",
								"Notes": "<b>The_Matrix_Tool</b>\nA matrix tool allows a detailed specification of a matrix at the cell, column and row levels.",
								"DiagramX": -25,
								"DiagramY": 75,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Matrix",
										"Notes": "A matrix tool allows a detailed specification of a matrix at the cell, column and row levels.\n\nTap on the matrix icon to view the matrix and then zoom in on the diagram notes so you can read them while viewing the matrix.",
										"DiagramX": 10,
										"DiagramY": -190,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Matrix",
										"CellInputs": {
											"0_0": "{row} + {col} / 10",
											"0_2": "{cell -1, 0} + {row}",
											"1_2": "1",
											"3_0": "100 * {col}^2"
										},
										"rowCount": "5",
										"columnCount": "4",
										"format": "10.2f"
									},
									{
										"name": "Notes2",
										"Notes": "The formula for cell 1,2 is simply 1.\n\nThe label cell for row 3 has the formula:\n\n100 * {col}^2\n\nBecause this formula is defined for the label cell, it will be used for each cell in the row that does not have it's own formula (a constant is just a type of formula).\n\nThe function {col} is only valid when called by a formula in a matrix cell and returns the column number for the cell that is evaluating the formula.  Thus this formula causes the cell's column number to be squared and multiplied by 100, resulting in values of 100, 400, 900 and 1600 in the cells of the row.",
										"DiagramX": 175,
										"DiagramY": -190,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {}
									},
									{
										"name": "Notes1",
										"Notes": "The number of rows and columns is specified in the fields below the tool name field.\n\nThese fields are formula fields and their values can be calculated from external values.\n\nIn this case we have a matrix with 5 rows and 4 columns.\n\nFor this matrix four different formulas are used to define the content of the matrix.\n\nCells with formulas have an orange background unless they are the selected cell, in which case the background is green.\n\nIf there is a formula for the selected cell, it appears in the formula field below the rows and columns fields",
										"DiagramX": 90,
										"DiagramY": -190,
										"HideInfo": "n",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									},
									{
										"name": "Notes3",
										"Notes": "The label cell for column 2 has the formula:\n\n{cell -1, 0} + {row}\n\nThe function \"cell\" can also only be called by a cell formula.  It returns the value of the cell in the same matrix whose index is computed by adding the first parameter to the calling cell's row number and the second parameter to the calling cell's column number.  The result here is the value of the cell immediately above it in the same column.\n\nBecause cell 1,2 has a value already defined as 1, this formula is not used for it, however for cell 2,2 it will be used and the cell function will evaluate to 1, the value of cell 1,2.  The {row} function is analogous to the {col} function and returns the evaluating cell's row number, which in this case is 2.  Thus the value for cell 2,2 will be 1 + 2 = 3.",
										"DiagramX": 250,
										"DiagramY": -190,
										"HideInfo": "n",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									},
									{
										"name": "Notes4",
										"Notes": "Cell 3,2 already has a value determined by the row formula to be 400 and row formulas have precedence over column formulas.\n\nThe column equation is again used for  cell 4,2, where it adds it's row number, 4, to value of the cell above to get 404.  A similar calculation for cell 5,2 yields 409.\n\nFinally there is a formula specified for the origin cell at the top left that is unlabelled:\n\n{row} + {col} / 10\n\nThis formula has the lowest priority and is used for all the cells that have no cell, row or column formula to use.  In this case it creates a value which is the cell's row number plus its column number divided by 10.  Thus cell 1,1 has a value of 1.1.",
										"DiagramX": 325,
										"DiagramY": -190,
										"HideInfo": "n",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									},
									{
										"name": "Notes5",
										"Notes": "Some other points worth noting:\n\nAll values in a matrix must have the same unit type, although constant formulas can have differing units as long as they are all of the same type.\n\n If a unit is set using the info button beside the unit type, then all constant values that don't have an explicit unit will be assumed to use that unit.  It is a good idea to set the unit type of a matrix before entering any cell formulas.\n\nTapping in any cell selects it, moves its formula to the formula field and opens the formula editor for it.",
										"DiagramX": 400,
										"DiagramY": -190,
										"HideInfo": "n",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									}
								]
							}
						]
					},
					{
						"name": "ODEs",
						"Notes": "<b>ODEs</b>\nThe ODE solver is used to integrate a set of 1 or more ordinary differential equations (ODE).",
						"DiagramX": 50,
						"DiagramY": 115,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Interest",
								"Notes": "In the \"Matrices\" model, there was an example where the growth of an investment was calculated assuming interest that was compounded monthly.\n\nThis example uses the ODE solver to see what would happen if the interest were continuously compounded.",
								"DiagramX": 10,
								"DiagramY": -35,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "interest",
										"Notes": "The interest rate.  Note the unit.",
										"DiagramX": -5,
										"DiagramY": 115,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "10 %/year"
										},
										"showInput": "y"
									},
									{
										"name": "initial",
										"Notes": "The same initial investment as in the monthly example.  The dollar unit is numerically equal to fraction, but useful for clarity.",
										"DiagramX": -5,
										"DiagramY": 150,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1000 dollar"
										},
										"showInput": "y",
										"displayUnit": "dollar",
										"format": "12.2f"
									},
									{
										"name": "dy",
										"Notes": "The derivative is simply the current principal, represented by the \"ode\" output, times the interest rate.",
										"DiagramX": 85,
										"DiagramY": 150,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "interest * ode.y"
										},
										"showInput": "y",
										"displayUnit": "dollar/year",
										"format": "12.2f"
									},
									{
										"name": "ode",
										"Notes": "See the documentation (Help button) for details on the ODE inputs.\n\nFor this example:\n\nY0 in this case it is the value of the “initial” expression and is a scalar.\n\ndY/dT is the value of the “dy” expression.\n\nIt has units compatible with y and t. Since t has time units and y is dimensionless, the unit for this must be 1/time.\n\n EndT - the solver always integrates from 0 to this value of t.  It has to have the same units a t, which in this case is time, specifically 20 years.\n\nNextT  uses the formula\n\n$.t + 1 year\n\nto calculate the next record time. Here it is just the previous value plus a constant.\n\nNote this only applies to the record time and is not an integration step size.\n\nThe tolerances are left at their default values.\n\nThe t and y values are recorded for each year and labeled as “Time” and “Dollars” respectively.",
										"DiagramX": 85,
										"DiagramY": 115,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "ODE Solver",
										"y0Formula": {
											"Formula": "initial"
										},
										"dyFormula": {
											"Formula": "dy"
										},
										"nextTFormula": {
											"Formula": "$.t + 1 year"
										},
										"endTFormula": {
											"Formula": "20 year"
										},
										"relTolFormula": {
											"Formula": "1.0e-5"
										},
										"absTolFormula": {
											"Formula": "1.0e-10*{baseunit $.y}"
										},
										"recFormulas": [
											{
												"Formula": "$.t 'Time"
											},
											{
												"Formula": "$.y 'Dollars"
											}
										],
										"AutoRun": "y"
									},
									{
										"name": "Plot",
										"Notes": "You will notice that the final savings are higher than when the interest was only compounded monthly, but not hugely so.",
										"DiagramX": 175,
										"DiagramY": 115,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "ode.Time 'Time",
											"vmin": "",
											"vmax": "",
											"unit": "year",
											"Y1": {
												"v": "ode.Dollars 'Dollars",
												"vmin": "0",
												"vmax": "8000",
												"lineType": 0
											}
										}
									},
									{
										"name": "Table",
										"Notes": "The plot values can be\nretrieved as a table value,\nif desired.",
										"DiagramX": 175,
										"DiagramY": 170,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "n",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "plot.table"
										},
										"showInput": "y",
										"tableUnits": {
											"2": "dollar"
										},
										"tableFormats": [
											null,
											"8.0f",
											"10.2f"
										]
									},
									{
										"name": "futureV",
										"Notes": "Calculation of future value with monthly compounding.",
										"DiagramX": -5,
										"DiagramY": 205,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "\ninitial *\n(1 + interest * 1 year / 12)^(1:20*12)"
										},
										"showInput": "y",
										"displayUnit": "dollar",
										"format": "12.2f"
									},
									{
										"name": "Increase",
										"Notes": "The additional value after 20 years as compared to monthly compounding.",
										"DiagramX": 175,
										"DiagramY": 215,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "table.dollars[ -1 ] - futureV[ -1 ]"
										},
										"showInput": "y",
										"displayUnit": "dollar",
										"format": "10.2f"
									}
								]
							},
							{
								"name": "Pendulum",
								"Notes": "This model calculates the motion of a simple pendulum.\n\nIf the \"c\" expression is non-zero, it will be damped.",
								"DiagramX": 90,
								"DiagramY": -70,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "ode",
										"Notes": "               The integrator",
										"DiagramX": 105,
										"DiagramY": 10,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "n",
										"Type": "ODE Solver",
										"y0Formula": {
											"Formula": "y0"
										},
										"dyFormula": {
											"Formula": "dy"
										},
										"nextTFormula": {
											"Formula": "$.t + 0.1 s"
										},
										"endTFormula": {
											"Formula": "10 s"
										},
										"relTolFormula": {
											"Formula": "1.0e-5"
										},
										"absTolFormula": {
											"Formula": "1.0e-10*{baseunit $.y}"
										},
										"recFormulas": [
											{
												"Formula": "$.t 'Time"
											},
											{
												"Formula": "Theta"
											}
										],
										"AutoRun": "y"
									},
									{
										"name": "theta",
										"Notes": "y1 is the position in radians, but displayed here in degrees.\n",
										"DiagramX": 105,
										"DiagramY": 65,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "ode.y.angle"
										},
										"showInput": "y",
										"displayUnit": "degree"
									},
									{
										"name": "v",
										"Notes": "The angular velocity of the pendulum.",
										"DiagramX": 105,
										"DiagramY": 110,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "ode.y.velocity"
										},
										"showInput": "y"
									},
									{
										"name": "m",
										"Notes": "The pendulum mass.",
										"DiagramX": 5,
										"DiagramY": 105,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "n",
										"Type": "Expression",
										"Formula": {
											"Formula": "1 kg"
										}
									},
									{
										"name": "l",
										"Notes": "The length of the pendulum arm.",
										"DiagramX": 5,
										"DiagramY": 135,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "n",
										"Type": "Expression",
										"Formula": {
											"Formula": "1 m"
										}
									},
									{
										"name": "g",
										"Notes": "Unit g0 is the normal acceleration due to gravity on earth",
										"DiagramX": 5,
										"DiagramY": 170,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "n",
										"Type": "Expression",
										"Formula": {
											"Formula": "1 g0"
										}
									},
									{
										"name": "c",
										"Notes": "A damping coefficient.  Set to 0 for undamped.",
										"DiagramX": 5,
										"DiagramY": 210,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "n",
										"Type": "Expression",
										"Formula": {
											"Formula": ".8 kg-m/s"
										}
									},
									{
										"name": "a",
										"Notes": "The calculation of acceleration.",
										"DiagramX": 105,
										"DiagramY": 205,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "(g / l) * {sin theta} - (c /(l*m)) * v"
										},
										"showInput": "y"
									},
									{
										"name": "graph",
										"Notes": "The pendulum position versus time, with the angle displayed in degrees rather than radians.",
										"DiagramX": 195,
										"DiagramY": 10,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "ode.Time 'Time",
											"vmin": "",
											"vmax": "",
											"Y1": {
												"v": "ode.theta 'Theta",
												"vmin": "0",
												"vmax": "360 degree",
												"unit": "degree",
												"lineType": 0
											}
										}
									},
									{
										"name": "y0",
										"Notes": "The initial state of the pendulum, the velocity in radians per second.\n\nNote an angle of 0 is straight up.\n\nA table value is used so the integrated values can have different unit types.",
										"DiagramX": 5,
										"DiagramY": 10,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table {cc \"Angle\", \"Velocity\"},\n\t45 degree, 0 \"1/s\"\n}"
										},
										"showInput": "y"
									},
									{
										"name": "dy",
										"Notes": "The derivative of position is velocity and the derivative of velocity is acceleration.",
										"DiagramX": 105,
										"DiagramY": 150,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table {cc \"Velocity\", \"Acceleration\"},\n\tv, a\n}"
										},
										"showInput": "y"
									},
									{
										"name": "recorded",
										"Notes": "The recorded values",
										"DiagramX": 195,
										"DiagramY": 65,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "ode.table"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "DblPend",
								"Notes": "This is an extension of the pendulum problem to a double pendulum, that is a pendulum on the end of another pendulum.\n\nThe equations came from\n\nfreddie.witherden.org/tools/\ndoublependulum/report.pdf.\n\nNote that the relative tolerance on the ODE solver has been set quite small since this is a rather chaotic system.\n\nWhile more complex than the single version, the concepts are all the same and so the included notes are minimal.",
								"DiagramX": 90,
								"DiagramY": -5,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "g",
										"Notes": "Unit g0 is the normal acceleration due to gravity on earth",
										"DiagramX": -50,
										"DiagramY": 80,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1 g0"
										},
										"showInput": "y"
									},
									{
										"name": "ode",
										"Notes": "                Integrator",
										"DiagramX": 75,
										"DiagramY": 225,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "n",
										"Type": "ODE Solver",
										"y0Formula": {
											"Formula": "y02"
										},
										"dyFormula": {
											"Formula": "dy"
										},
										"nextTFormula": {
											"Formula": "$.t + .02 s"
										},
										"endTFormula": {
											"Formula": "10 s"
										},
										"relTolFormula": {
											"Formula": "1.0e-12"
										},
										"absTolFormula": {
											"Formula": "1.0e-10 * {baseunit $.y}"
										},
										"recFormulas": [
											{
												"Formula": "$.t 'Time"
											},
											{
												"Formula": "theta'theta"
											}
										],
										"AutoRun": "y"
									},
									{
										"name": "a1",
										"Notes": "Acceleration of pendulum 1",
										"DiagramX": 75,
										"DiagramY": 75,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "(\n\tm[2] * l[1] * v[1]^2 *\n\t{sin dt} * {cos dt} + \n\tm[2] * g * {sin theta[2]} * \n\t{cos dt} + m[2] * l[2] * \n\tv[2]^2 * {sin dt} - \n\tmSum * g * {sin theta[1]}\n) /\n(\n\tmSum * l[1] - m[2]*l[2] *\n\t{cos dt}^2\n)"
										},
										"showInput": "y"
									},
									{
										"name": "a2",
										"Notes": "Acceleration of pendulum 2",
										"DiagramX": 75,
										"DiagramY": 145,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "(\n\t-m[2] * l[2] * v[2]^2 *\n\t{sin dt} * {cos dt} +\n\tmSum * (\n\t\tg* {sin theta[1]} *\n\t\t{cos dt} - l[1] *\n\t\tv[1]^2* {sin dt} - g *\n\t\t{sin theta[2]}\n\t)\n) /\n(\n\tmSum * l[2] - m[2]*l[2] *\n\t{cos dt}^2\n)"
										},
										"showInput": "y"
									},
									{
										"name": "graph",
										"Notes": "          Angle vs time",
										"DiagramX": 185,
										"DiagramY": 25,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "ode.Time 'Time",
											"vmin": "",
											"vmax": "",
											"Y1": {
												"v": "ode.theta[0,1] 'Theta1",
												"vmin": "",
												"vmax": "",
												"unit": "radian",
												"lineType": 0
											},
											"Y2": {
												"v": "ode.theta[0,2] 'Theta2",
												"vmin": "",
												"vmax": "",
												"unit": "radian",
												"lineType": 0
											}
										}
									},
									{
										"name": "dt",
										"Notes": "      Difference in angles",
										"DiagramX": -50,
										"DiagramY": 120,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "theta[2] - theta[1]"
										},
										"showInput": "y"
									},
									{
										"name": "m",
										"Notes": "      Pendulum mass",
										"DiagramX": -50,
										"DiagramY": 15,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{cc 1 kg, 1 kg}"
										},
										"showInput": "y"
									},
									{
										"name": "x2",
										"Notes": "X coordinate of pendulum 2",
										"DiagramX": 75,
										"DiagramY": 175,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "l[1] * {sin ode.theta[0,1]} + \nl[2] * {sin\n\tode.theta[0,1] + ode.theta[0,2]\n}"
										},
										"showInput": "y"
									},
									{
										"name": "y2",
										"Notes": "Y coordinate of pendulum 2.",
										"DiagramX": 75,
										"DiagramY": 35,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "-l[1] * {cos ode.theta[0,1]} -\n\tl[2] * {cos\n\tode.theta[0,1] + ode.theta[0,2]\n}"
										},
										"showInput": "y"
									},
									{
										"name": "xy2graph",
										"Notes": "A plot of the x/y coordinates of pendulum 2 (the outer pendulum) in metres",
										"DiagramX": 185,
										"DiagramY": 60,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "x2",
											"vmin": "-l[1] - l[2]",
											"vmax": "l[1] + l[2]",
											"unit": "m",
											"Y1": {
												"v": "y2",
												"vmin": "-l[1] - l[2]",
												"vmax": "l[1] + l[2]",
												"lineType": 0
											}
										}
									},
									{
										"name": "y0",
										"Notes": "Initial states of the pendulums",
										"DiagramX": -50,
										"DiagramY": 190,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Data Table",
										"Columns": [
											{
												"name": "Angle",
												"displayUnit": "radian",
												"nValues": [
													0.7853999999999998,
													1.5708
												],
												"unitDimensions": "0 0 0 0 0 0 0",
												"defaultValue": "0 radian"
											},
											{
												"name": "Velocity",
												"displayUnit": "1/s",
												"nValues": [
													3,
													4
												],
												"unitDimensions": "0 0 -1 0 0 0 0",
												"defaultValue": "0 radian/s"
											}
										],
										"Filter": {
											"Formula": ""
										}
									},
									{
										"name": "dy",
										"Notes": "Derivative table",
										"DiagramX": 180,
										"DiagramY": 185,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table {cc \"Velocity\", \"Acceleration\"},\n\tv, a\n}"
										},
										"showInput": "y",
										"tableUnits": {
											"1": "radian/s",
											"2": "radian/s^2"
										}
									},
									{
										"name": "y02",
										"Notes": "Alternate formulation of y0 using table function",
										"DiagramX": -50,
										"DiagramY": 225,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "n",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table {cc \"Angle\", \"Velocity\"},\n\t{cc 0.25, 0.5} * {pi},\n\t{cc 3 1/s, 4 1/s}\n}"
										},
										"showInput": "y",
										"tableUnits": {
											"1": "radian"
										}
									},
									{
										"name": "theta",
										"Notes": "     Angle of pendulums",
										"DiagramX": -50,
										"DiagramY": 155,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "ode.y.angle"
										},
										"showInput": "y",
										"displayUnit": "radian"
									},
									{
										"name": "v",
										"Notes": "Angular velocity",
										"DiagramX": 180,
										"DiagramY": 145,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "ode.y[0,\"velocity\"]"
										},
										"showInput": "y",
										"displayUnit": "radian/s"
									},
									{
										"name": "a",
										"Notes": "          acceleration",
										"DiagramX": 180,
										"DiagramY": 105,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{cc a1, a2}"
										},
										"showInput": "y",
										"displayUnit": "radian/s^2"
									},
									{
										"name": "mSum",
										"Notes": "       Total mass",
										"DiagramX": 75,
										"DiagramY": 110,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{sum m}"
										},
										"showInput": "y"
									},
									{
										"name": "l",
										"Notes": "Length of pendulum arms",
										"DiagramX": -50,
										"DiagramY": 50,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{cc 1 m, 1 m}"
										},
										"showInput": "y"
									},
									{
										"name": "recorded",
										"Notes": "Recorded values table",
										"DiagramX": 185,
										"DiagramY": 220,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "ode.table"
										},
										"showInput": "y",
										"tableUnits": {
											"2": "degree",
											"3": "degree"
										},
										"tableFormats": [
											null,
											"12.2f",
											"12.2f",
											"12.2f"
										]
									}
								]
							},
							{
								"name": "Roberts",
								"Notes": "This example represents the kinetics of a 3 species chemical reaction.\n\nThe large difference in the rates of the reactions make this problem what is termed stiff.  Using integration time steps small enough to track the very sensitive components would be very inefficient given the long overall times required for the slower components.\n\nSpecial algorithms have been developed for these types of problems and in the case of Math Minion a Backward Difference Formula approach is used when the \"Stiff\" switch on the information view of the ODE solver is turned on.\n",
								"DiagramX": 170,
								"DiagramY": -70,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "ode",
										"Notes": "A few things to note about this ODE solver:\n\n- the \"Stiff\" switch is turned on.\n\n- the end time is very large.\n\n- if the recorded time intervals were constant, you would either miss what happens very quickly at the beginning of the run or have way to many points. Therefore NextT is calculated by:\n\n{if {eq $.t 0}, 1e-5, $.t * 2}\n\nWhere the first value, when t = 0, is set to a small number and each succeeding interval is twice the previous one.\n\n- the absolute tolerance has been reduced from the default because some of the values will be very small.",
										"DiagramX": 55,
										"DiagramY": 50,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "ODE Solver",
										"y0Formula": {
											"Formula": "y0"
										},
										"dyFormula": {
											"Formula": "dy"
										},
										"nextTFormula": {
											"Formula": "{if {eq $.t 0 s}, 1e-5 s, $.t * 2}"
										},
										"endTFormula": {
											"Formula": "4e10 s"
										},
										"relTolFormula": {
											"Formula": "1.0e-5"
										},
										"absTolFormula": {
											"Formula": "1.0e-14"
										},
										"recFormulas": [
											{
												"Formula": "$.t 'Time"
											},
											{
												"Formula": "$.y[1] 'Y1"
											},
											{
												"Formula": "$.y[2] ' Y2"
											},
											{
												"Formula": "$.y[3] ' Y3"
											}
										],
										"Stiff": "y ",
										"AutoRun": "y"
									},
									{
										"name": "y",
										"Notes": "The y values are simply the ode y values.  This expression isn't necessary, but makes the equations in the dy matrix a bit cleaner.",
										"DiagramX": -45,
										"DiagramY": 100,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "ode.y"
										},
										"showInput": "y"
									},
									{
										"name": "dy",
										"Notes": "The rate equations are defined.\n\ndy1 = -0.04*y1 + 10^4*y2*y3\ndy2 = dy1 - dy3\ndy3 = 3*10^7 * y2\n\nNote the use of the cell function to calculate the derivative for component 2, which is defined as dy1 - dy3.",
										"DiagramX": -45,
										"DiagramY": 155,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Matrix",
										"unit": "1/s",
										"CellInputs": {
											"0_0": "0 1/s",
											"2_1": "-{cell -1, 0} - {cell 1, 0}",
											"3_1": "3.0e7 1/s * y[2]^2",
											"1_1": "-0.04 1/s * y[1] + 1.0e4 1/s *y[2]*y[3]"
										},
										"rowCount": "{nrows y0}",
										"columnCount": "1"
									},
									{
										"name": "graph",
										"Notes": "A plot of the reaction progress.  Plotting against log t is necessary to capture the fast moving events that occur early.  Also y2 never exists in quantity, so its maximum is set quite low.",
										"DiagramX": 55,
										"DiagramY": 200,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "logT",
											"vmin": "-5",
											"vmax": "7",
											"Y1": {
												"v": "ode.y1[range] ' Y1",
												"vmin": "0",
												"vmax": "1",
												"lineType": 0
											},
											"Y2": {
												"v": "ode.y2[range] 'Y2",
												"vmin": "0",
												"vmax": "5.e-5",
												"lineType": 0
											},
											"Y3": {
												"v": "ode.y3[range] ' Y3",
												"vmin": "0",
												"vmax": "1",
												"lineType": 0
											}
										}
									},
									{
										"name": "logT",
										"Notes": "The log (base 10) of the recorded values of t (skipping the first one). Log values must be unitless, so t is divided by 1 s.",
										"DiagramX": 55,
										"DiagramY": 155,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{log ode.time[range] / 1 s}"
										},
										"showInput": "y"
									},
									{
										"name": "range",
										"Notes": "A plot versus log t will be more useful than one versus t, but the first value of t is 0 and should be skipped.  This expression just calculates that range for use in other expressions.",
										"DiagramX": 55,
										"DiagramY": 85,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "2:{nrows ode.r1}"
										},
										"showInput": "y"
									},
									{
										"name": "y0",
										"Notes": "The initial conditions  are the initial composition of the material and consists of pure compound 1.\n",
										"DiagramX": -45,
										"DiagramY": 50,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{cc 1, 0, 0}"
										},
										"showInput": "y"
									},
									{
										"name": "recorded",
										"Notes": "The recorded values",
										"DiagramX": 55,
										"DiagramY": 270,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "n",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "ode.table"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Overview",
								"Notes": "<b>Overview</b>\n\nThe ODE solver is used to integrate a set of 1 or more ordinary differential equations (ODE).\n\nAn ODE is a function with a single independent variable and a derivative with respect to that variable.\n\nEssentially it determines <b>y</b> with respect to <b>t</b> from <b>t=0</b> to some end point, where <b>dy/dt</b> is some function of <b>y</b>.\n\nArrays or tables <b>y</b> and <b>dy/dt</b> must be the same size and with compatible units (i.e units <b>y</b> must equal units <b>dy</b> times units <b>t</b>).\n\nMath Minion uses code inspired by the Sundials suite of solvers developed at the Lawerence Livermore National Library in the US.\n\nIt uses a variant of the Adam Moulton method for non-stiff problems and Backwards Difference Formulas (BDF) when the problem is designated as stiff.\n\nThis model contains some models illustrating the use of the ODE tool.",
								"DiagramX": 10,
								"DiagramY": -70,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							}
						]
					},
					{
						"name": "Models",
						"Notes": "<b>Models</b>\nThe hopefully now familiar tool containing tools.",
						"DiagramX": 50,
						"DiagramY": -45,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"indexTool": "introduction",
						"Objects": [
							{
								"name": "Overview",
								"Notes": "<b>Models</b>\n\nIf you have made it this far, you know that models are just containers for other tools, possibly including other models.",
								"DiagramX": 20,
								"DiagramY": 30,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "circle."
								}
							},
							{
								"name": "circumference",
								"Notes": "Also retrieved from the circle model.",
								"DiagramX": 110,
								"DiagramY": 100,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "circle.circumference"
								},
								"showInput": "y"
							},
							{
								"name": "circle",
								"Notes": "The <b>circle</b> model calculates the circumference and area of a circle, given the radius.",
								"DiagramX": 20,
								"DiagramY": 110,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "radius",
										"Notes": "By turning on the model input switch in the radius expression’s view, the variables used in the expression's formula refer to those of the parent model.",
										"DiagramX": 20,
										"DiagramY": 80,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "diameter / 2"
										},
										"isInput": "y",
										"showInput": "y"
									},
									{
										"name": "circumference",
										"Notes": "Calculated Circumference",
										"DiagramX": 100,
										"DiagramY": 45,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "2*radius*{pi}"
										}
									},
									{
										"name": "area",
										"Notes": "Calculated Area",
										"DiagramX": 100,
										"DiagramY": 75,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{pi}*radius^2"
										}
									},
									{
										"name": "xyplot",
										"Notes": "Plot the circle from calculated coordinates as well as one half the size.",
										"DiagramX": 100,
										"DiagramY": 150,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "coordinates.x 'X1",
											"vmin": "",
											"vmax": "",
											"Y1": {
												"v": "coordinates.y 'Y1",
												"vmin": "",
												"vmax": "",
												"lineType": 0
											}
										},
										"X2": {
											"v": "$.x1/2 'X2",
											"vmin": "",
											"vmax": "",
											"Y1": {
												"v": "$.y1/2 'Y2",
												"vmin": "",
												"vmax": "",
												"lineType": 0
											}
										}
									},
									{
										"name": "coordinates",
										"Notes": "Calculate the x-y coordinates for a circle with a radius equal to radius.",
										"DiagramX": 100,
										"DiagramY": 105,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{cart radius[1,1], 1:60 / 30  * {pi}}"
										},
										"showInput": "y"
									},
									{
										"name": "Coord_Calc",
										"Notes": "<b>Calculation of Coordinates</b>\n\nThe formula in the <b>coordinates</b> expression:\n\n   <b>{cart radius[1,1], 1:60 / 30  * {pi}}</b>\n\nis a bit more complicated. Library functions are called by enclosing them in curly braces, with the name of the function immediately after the opening brace. The parameters, if any, follow in a comma separated list.\n\nThus in the formula above there are two functions, <b>cart</b> and <b>pi</b>. The pi function doesn't take any parameters and just returns the value of pi.\n\nThe cart function calculates the cartesian coordinates from a radius and an angle. Specifically for:\n\n   <b>{cart r, a}</b>\n\ncart returns a table value with the first column being the <b>x</b> value and the second being the <b>y</b> of the radius <b>r</b> and angle <b>a</b> converted to cartesian coordinates.\n\nTable value columns can be referenced using dot notation, so <b>coordinates.x</b> would return an array corresponding to the rows of the <b>x</b> column.  These are used in the <b>xyplot</b> tool to graph the circle.\n\nThe first parameter to the cart function is <b>radius[1,1]</b>. The <b>[1,1]</b> index operator specifies we just want the value in the first row and column so it is guaranteed to be a scalar.\n\nThe second parameter, <b>1:60 / 30 * {pi}</b> creates an array of integers from 1 to 60 using the <b>:</b> operator. This is then divided by 30 giving 60 values evenly spaced up to 2. This array is then multiplied by pi to give an array of angles up to 2pi, which is of course the number of radians in a circle.",
										"DiagramX": 100,
										"DiagramY": 195,
										"HideInfo": "n",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									},
									{
										"name": "Overview",
										"Notes": "<b>Circle Overview</b>\n\nIf an expression has its <b>Model Input</b> switch turned on, then any tool names used in the expression will refer to tools in the parent model, rather than the model containing the expression. In this case, the expression <b>radius</b> has its Model Input switch turned on and so its formula:\n\n   <b>diameter / 2</b>\n\nlooks for a value called diameter in the parent model, not the circle model.\n\nHowever any tool in a child model can be referenced by the parent model. Thus a tool in this model's parent can have a formula like:\n\n   <b>circle.area</b>",
										"DiagramX": 20,
										"DiagramY": 45,
										"HideInfo": "n",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									}
								]
							},
							{
								"name": "diameter",
								"Notes": "An expression containing a constant with a unit of length.",
								"DiagramX": 20,
								"DiagramY": 65,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "3 m"
								},
								"showInput": "y"
							},
							{
								"name": "areaOfCircle",
								"Notes": "<b>areaOfCircle</b> retrieves a calculated outlet expression for area from the circle model.",
								"DiagramX": 110,
								"DiagramY": 50,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "circle.area"
								},
								"showInput": "y"
							}
						]
					},
					{
						"name": "HtmlPage",
						"Notes": "<b>HtmlPage</b>\nHTML page tools provide a way to present more customized input and result views than can be achieved with model views.",
						"DiagramX": 145,
						"DiagramY": 15,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "WeightPlot",
								"Notes": "Plot of previous weights.",
								"DiagramX": 125,
								"DiagramY": 150,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "n",
								"Type": "Graph",
								"X1": {
									"v": "Weight.date 'Date",
									"vmin": "",
									"vmax": "",
									"unit": "date",
									"Y1": {
										"v": "Weight.Weight 'Weight",
										"vmin": "",
										"vmax": "",
										"lineType": 0
									}
								}
							},
							{
								"name": "css",
								"Notes": "Cascading style sheet code for the HTML form.",
								"DiagramX": 130,
								"DiagramY": 75,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "n",
								"Type": "Expression",
								"Formula": {
									"Formula": "'\nbody {\n\tbackground-color: #EEFFEE;\n}\n\n\n/* Tables\n * --------------------------------------------------------------------- */\n\n\ttable {\n\t\tborder-top:     0px solid #ddd;\n\t\tborder-left:    0px solid #ddd;\n\t\tmargin-top: 0px;\n\t\tmargin-bottom: 0.5em;\n\t\twidth:300px;\n\t\tfont-size: x-large;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t}\n\tth,td {\n\t\tborder-bottom:  0px solid #ddd;\n\t\tborder-right:   0px solid #ddd;\n\t\tvertical-align: top;\n\t}\n/* Default Classes\n * --------------------------------------------------------------------- */\n\n\tp.title, a.title, div.title {\n\t\tcolor: #040;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t\tfont-size: 2.0em;\n\t\ttext-align: center;\n\t}\n\n\tp.subtitle {\n\t\tcolor: #040;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t\tfont-size: 1.1em;\n\t}\n\t\n\tpre {\n\t\tbackground: #eee;\n\t\tfont-size: 14px;\n\t\tfont-weight: bold;\n\t\tpadding: 5px;\n\t}\n\n\t\n\t.explain {\n\t\tcolor: #000;\n\t\tfont-size: 1.2em;\n\t}\n\t\n\t.explain a {\n\t\tcolor: blue;\n\t\ttext-decoration: underline;\n\t}\n\t\n\t.html {\n\t\tcolor: navy;\n\t\tfont-weight: bold;\n\t}\n\t\n\t.htmlresult {\n\t\tcolor: navy;\n\t\tfont-weight: bold;\n\t}\n\t\n\t.center {\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\twidth=320px;\n\t\ttext-align: center;\n\t}\n\t\n\t.link {\n\t\tcolor: blue;\n\t\tfont-weight: bold;\n\t}\n\n\t.input {\n\t\twidth: 100%;\n\t\tfont-size: large;\n\t}\n\tbutton {\n\t\tfont-size: large;\n\t\tmargin-left: 10px;\n\t\tmargin-right: 10px;\n\t\twidth: 120px;\n\t}\n\n\t.result {\n\t\ttext-align: center;\n\t\tfont-size: x-large;\n\t}\t\t\n\n\t.indent {\n\t\tmargin-left: 1\n\t\tem;\n\t}\n\t\n\t.buttonrow {\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\twidth: 300px;\n\t\ttext-align: center;\n\t}"
								}
							},
							{
								"name": "BMICalc",
								"Notes": "<b>BMICalc</b>\n\nThe BMI page uses this model to calculate body mass index, which is weight in kg divided by height, in m, squared.\n\nThe result is calculated as a dimensionless value so it is displayed correctly, regardless of display units.",
								"DiagramX": 50,
								"DiagramY": 150,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Weight",
										"Notes": "The values from the BMI html page will be strings, so the eval function is used to turn them into numbers.",
										"DiagramX": 10,
										"DiagramY": 35,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{eval BMI.weight}"
										},
										"isInput": "y",
										"showInput": "y",
										"displayUnit": "kg"
									},
									{
										"name": "Height",
										"DiagramX": 10,
										"DiagramY": 70,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "n",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{eval BMI.height}"
										},
										"isInput": "y",
										"showInput": "y",
										"displayUnit": "m"
									},
									{
										"name": "BMI",
										"Notes": "Calculates weight in kg over height in m squared.\n\nUnits are used to make this dimensionless, so its value is the same regardless of display units.",
										"DiagramX": 105,
										"DiagramY": 50,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "weight/1\"kg\" /\n(height/1\"m\")^2"
										},
										"showInput": "y"
									}
								]
							},
							{
								"name": "Explanation",
								"Notes": "",
								"DiagramX": 50,
								"DiagramY": 75,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "HTML Form",
								"Formula": {
									"Formula": "'\t\t\n<style>\n\t<mm>css</mm>\n</style>\n\n<p class=\"title\">HTML Pages</p>\n<div class=\"explain\">\n\t<p>\n\t\tMath Minion HTML page tools provide a way to present customized input and result views.  These can be used to simplify your own tasks, or to create calculation sheets that present a simpler interface for non-technical users.  The page you are reading is itself an  HTML page tool.\n\t</p>\n\t<p>\n\t\tAs the name implies, HTML page tools are presented as web browser views and have a single formula that should return a string value containing the HTML to be displayed. This formula can be any valid Math Minion formula, but most often simply consists of a single quote, followed by the desired HTML.\n\t</p>\n\t<p>\n\t\tSpecial HTML extensions allow the results of Math Minion formulas to appear on the rendered page and for the values from input fields to be made available to the Math Minion model.  Certain actions, such as adding rows to a data table or loading a different session can also be triggered from the html page.\n\t</p>\n\t<p>Tap on the <b>Help</b> button at the top right of this view to get help on how to do this.</p>\n</div>"
								},
								"inputs": {},
								"f0": "css"
							},
							{
								"name": "BMI",
								"Notes": "<b>BMI</b>\n \nAn html page or calculating and recording body mass index.\n\nClick on this note to view.",
								"DiagramX": 50,
								"DiagramY": 115,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "HTML Form",
								"Formula": {
									"Formula": "'\n<style>\n\t<mm>css</mm>\n</style>\n<p class=\"title\">Your BMI</p>\n<table class=\"center\">\n\t<tr><td><span class=\"rowlabel\">Weight</span></td>\n\t\t<td><input type=\"text\" id=\"weight\" value=\"<mm>$.weight</mm>\"\n\t\t\t class=\"input\" title=\"Enter weight with unit\">\n\t\t</td>\n\t</tr>\n\t<tr><td><span class=\"rowlabel\">Height</span>\n\t\t<td><input type=\"text\" id=\"height\" value=\"<mm>$.height</mm>\"\n\t\t\tclass=\"input\" title=\"Enter height with unit\">\n\t\t</td>\n\t</tr>\n</table>\n<div class=\"center\">\n\t<button onclick=\"mmpost(['weight','height']);\"\n\t\ttitle=\"Use the inputs to calculate the BMI\">Calculate</button>\n\t<button onclick=\"mmpost(['weight','height'],{mm_addrow: 'Weight'});\"\n\t\ttitle=\"Add weight to the Weight data table\">Record</button>\n</div>\n<p class=\"result\">\n\tBMI = <mm>BMICalc.BMI</mm><br>\n\tLast Recorded = <mm>{fmt \"%8.0f\", weight[{nrows weight}, \"date\"], \"date\"}</mm>\n</p>\n<div class=\"buttonrow moveup\">\n\t<button class=\"menubutton\" onclick=\"mmpost([],{mm_push: 'WeightPlot'});\"\n\t\ttitle=\"Plot the weight record\">Plot</button>\n\t<button class=\"menubutton\" onclick=\"mmpost([],{mm_push: 'Weight'});\"\n\t\ttitle=\"Show the weight table\">Table</button>\n</div>\n<p> </p>\n<mm>WeightPlot</mm>"
								},
								"inputs": {
									"weight": "77 kg",
									"height": "6 ft + 1 in"
								},
								"f0": "css",
								"f1": "$.weight",
								"f2": "$.height",
								"f3": "BMICalc.BMI",
								"f4": "{fmt \"%8.0f\", weight[{nrows weight}, \"date\"], \"date\"}",
								"f5": "WeightPlot"
							},
							{
								"name": "Weight",
								"Notes": "A table of previous weights.",
								"DiagramX": 130,
								"DiagramY": 115,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "n",
								"Type": "Data Table",
								"Columns": [
									{
										"name": "Date",
										"displayUnit": "date",
										"nValues": [
											1568074000,
											1568160000,
											1568246000,
											1568333000,
											1568419000,
											1568506000,
											1568592000,
											1568678000,
											1568765000,
											1568938000,
											1569024000,
											1569110000,
											1569197000,
											1569283000,
											1569370000,
											1569456000,
											1569542000,
											1569629000,
											1569715000,
											1569802000,
											1569888000,
											1569974000,
											1570061000,
											1570147000,
											1570234000,
											1570320000,
											1570406000,
											1570493000,
											1570579000,
											1570666000,
											1570752000,
											1570838000,
											1570925000,
											1571011000,
											1571098000,
											1571184000,
											1571270000,
											1571357000,
											1571443000,
											1571530000,
											1571616000,
											1571702000,
											1571789000,
											1571875000,
											1571962000,
											1572048000,
											1572134000,
											1572221000,
											1572307000,
											1572394000,
											1572480000,
											1572566000,
											1572653000,
											1572739000,
											1572826000,
											1572912000,
											1572998000,
											1573085000,
											1573171000,
											1573258000,
											1573344000,
											1573430000,
											1573517000,
											1573603000,
											1573690000,
											1573776000,
											1573862000,
											1573949000,
											1574035000,
											1574122000,
											1574208000,
											1574381000,
											1574467000,
											1574554000,
											1574640000,
											1574726000,
											1574813000,
											1574899000,
											1574986000,
											1575072000,
											1575158000,
											1575245000,
											1575331000,
											1575504000,
											1575590000,
											1575677000,
											1575763000,
											1575850000,
											1575936000,
											1576022000,
											1576109000,
											1576195000,
											1576282000,
											1576368000,
											1576454000,
											1576541000,
											1576627000,
											1576714000,
											1576800000,
											1576886000,
											1576973000,
											1577059000,
											1577146000,
											1577232000,
											1577318000,
											1577405000,
											1577491000,
											1577578000,
											1577664000,
											1577750000,
											1577837000,
											1577923000,
											1578010000,
											1578096000,
											1578182000,
											1578269000,
											1578355000,
											1578442000,
											1578528000,
											1578614000,
											1578701000,
											1578787000,
											1578874000,
											1578960000,
											1579046000,
											1579133000,
											1579219000,
											1579306000,
											1579392000,
											1579478000,
											1579565000,
											1579651000,
											1579738000,
											1579824000,
											1579910000,
											1579997000,
											1580083000,
											1580170000,
											1581466000,
											1581552000,
											1581638000,
											1581725000,
											1581811000,
											1581898000,
											1581984000,
											1582070000,
											1582157000,
											1582243000,
											1582330000,
											1582416000,
											1582502000,
											1582589000,
											1582675000,
											1582762000,
											1582848000,
											1582934000,
											1583021000,
											1583107000,
											1583194000,
											1583280000,
											1583366000,
											1583453000,
											1583539000,
											1583626000,
											1583712000,
											1583798000,
											1583885000,
											1583971000,
											1584058000,
											1584144000,
											1584230000,
											1584317000,
											1584403000,
											1584490000,
											1584576000,
											1584662000,
											1584749000,
											1584835000,
											1584922000,
											1585008000,
											1585094000,
											1585181000,
											1585267000,
											1585354000,
											1585440000,
											1585526000,
											1585613000,
											1585699000,
											1585786000,
											1585872000,
											1585958000,
											1586045000,
											1586131000,
											1586218000,
											1586304000,
											1586390000,
											1586477000,
											1586563000,
											1586650000,
											1586736000,
											1586822000,
											1586909000,
											1586995000,
											1587082000,
											1587168000,
											1587254000,
											1587341000,
											1587427000,
											1587514000,
											1587600000,
											1587686000,
											1587859000,
											1587946000,
											1588032000,
											1588118000,
											1588205000,
											1588291000,
											1588378000,
											1588464000,
											1588550000,
											1588637000,
											1588723000,
											1588810000,
											1588896000,
											1588982000,
											1589069000,
											1589155000,
											1589242000,
											1589328000,
											1589414000,
											1589501000,
											1589587000,
											1589674000,
											1589760000,
											1589846000,
											1589933000,
											1590019000,
											1590106000,
											1590192000,
											1590278000,
											1590365000,
											1590451000,
											1590538000,
											1590624000,
											1590710000,
											1590797000,
											1590883000,
											1590970000,
											1591056000,
											1591142000,
											1591229000,
											1591315000,
											1591402000,
											1591488000,
											1591574000,
											1591661000,
											1591747000,
											1591834000,
											1591920000,
											1592006000,
											1592093000,
											1592179000,
											1592266000,
											1592352000,
											1592438000,
											1592525000,
											1592611000,
											1592698000,
											1592784000,
											1592870000,
											1592957000,
											1593043000,
											1593130000,
											1593216000,
											1593302000,
											1593389000,
											1593475000,
											1593562000,
											1593648000,
											1593734000,
											1593821000,
											1593907000,
											1593994000,
											1594080000,
											1594166000,
											1594253000,
											1594339000,
											1594426000,
											1594512000,
											1594598000,
											1594685000,
											1594771000,
											1594858000,
											1594944000,
											1595030000,
											1595117000,
											1595203000,
											1595290000,
											1595376000,
											1595462400,
											1595548800,
											1595635200,
											1595721600,
											1595808000,
											1595894400,
											1595980800,
											1596067200,
											1596153600,
											1596240000,
											1596326400,
											1596412800,
											1596499200,
											1596585600,
											1596672000,
											1596758400,
											1596844800,
											1596931200,
											1597017600,
											1597104000,
											1597190400,
											1597276800,
											1597363200,
											1597449600,
											1597536000,
											1597622400,
											1597708800,
											1597795200,
											1597881600,
											1597968000,
											1598054400,
											1598140800,
											1598227200,
											1598313600,
											1598400000,
											1598486400,
											1598572800,
											1598659200,
											1598745600,
											1598832000,
											1598918400,
											1599004800,
											1599091200,
											1599177600,
											1599264000,
											1599350400,
											1599436800,
											1599523200,
											1599609600,
											1599696000,
											1599782400,
											1599868800,
											1599955200,
											1600041600,
											1600128000,
											1600214400,
											1600300800,
											1600387200,
											1600473600,
											1600560000,
											1600646400,
											1600732800,
											1600819200,
											1600905600,
											1600992000,
											1601078400,
											1601164800,
											1601251200,
											1601337600,
											1601424000,
											1601510400,
											1601596800,
											1601683200,
											1601769600,
											1601856000,
											1601942400,
											1602028800,
											1602115200,
											1602201600,
											1602288000,
											1602374400,
											1602460800,
											1602547200,
											1602633600,
											1602720000,
											1602806400,
											1602892800,
											1602979200,
											1603065600,
											1603152000,
											1603238400,
											1603324800,
											1603411200,
											1603497600,
											1603584000,
											1603670400,
											1603756800,
											1603843200,
											1603929600,
											1604016000,
											1604102400,
											1604188800,
											1604275200,
											1604361600,
											1604448000,
											1604534400,
											1604620800,
											1604707200,
											1604793600,
											1604880000,
											1604966400,
											1605052800,
											1605139200,
											1605225600,
											1605312000,
											1605398400,
											1605484800,
											1605571200,
											1605657600,
											1605744000,
											1605830400,
											1605916800,
											1606003200,
											1606089600,
											1606176000,
											1606262400,
											1606348800,
											1606435200,
											1606521600,
											1606608000,
											1606694400,
											1606780800,
											1606867200,
											1606953600,
											1607040000,
											1607126400,
											1607212800,
											1607299200,
											1607385600,
											1607472000,
											1607558400,
											1607644800,
											1607731200,
											1607817600,
											1607904000,
											1607990400,
											1608076800,
											1608163200,
											1608249600,
											1608336000,
											1608422400,
											1608508800,
											1608595200,
											1608681600,
											1608768000,
											1608854400,
											1608940800,
											1609027200,
											1609113600,
											1609200000,
											1609286400,
											1609372800,
											1609459200,
											1609545600,
											1609632000,
											1609718400,
											1609804800,
											1609891200,
											1609977600,
											1610064000,
											1610150400,
											1610236800,
											1610323200,
											1610409600,
											1610496000,
											1610582400,
											1610668800,
											1610755200,
											1610841600,
											1610928000,
											1611014400,
											1611100800,
											1611187200,
											1611273600,
											1611360000,
											1611446400,
											1611532800,
											1611619200,
											1611705600,
											1611792000,
											1611878400,
											1611964800,
											1612051200,
											1612137600
										],
										"unitDimensions": "0 0 1 0 0 0 0",
										"defaultValue": "{mktime {int {date {now}+{timezone}}}}"
									},
									{
										"name": "Weight",
										"displayUnit": "kg",
										"nValues": [
											78.3,
											78.3,
											78.4,
											78.4,
											78,
											78.5,
											78.2,
											78.2,
											77.9,
											77.6,
											78.4,
											78.1,
											78.5,
											78.1,
											78.5,
											78.4,
											78.7,
											78.3,
											78.3,
											77.9,
											77.7,
											77.8,
											77.8,
											78.6,
											78.5,
											78.9,
											78.6,
											79,
											78.7,
											78.5,
											78.3,
											78.9,
											78.1,
											78.6,
											78.6,
											78.9,
											78.8,
											79.3,
											78.9,
											79.2,
											79.1,
											79.1,
											79.1,
											79.2,
											79.1,
											78.6,
											78.7,
											78.6,
											78.8,
											79.5,
											79,
											78.8,
											78.8,
											78.5,
											78.5,
											79.2,
											79.4,
											78.7,
											79.1,
											78.2,
											78.2,
											78.1,
											78.3,
											78.6,
											79,
											78.5,
											78.4,
											78.7,
											78.1,
											78.5,
											78.2,
											78.6,
											78.8,
											78.4,
											78.5,
											78.7,
											78.5,
											78.9,
											78.6,
											78.4,
											78.3,
											78.7,
											78.2,
											79,
											78.9,
											79.2,
											79.4,
											78.4,
											78.5,
											78.5,
											77.9,
											78.2,
											78.1,
											78.3,
											78.4,
											78.2,
											78.2,
											78,
											78,
											78.5,
											78.9,
											78.6,
											78.8,
											78.6,
											79,
											78.8,
											78.5,
											78.7,
											78.6,
											78.9,
											79,
											78.3,
											78.6,
											78.2,
											78.4,
											78.2,
											78.6,
											78.9,
											78.5,
											78.2,
											78.7,
											79.2,
											78.7,
											78.9,
											78.2,
											78.4,
											78.3,
											78.9,
											78.4,
											78.7,
											78.8,
											78.4,
											78.9,
											78.3,
											78.9,
											78.7,
											78.4,
											78.1,
											79.7,
											79.5,
											79.1,
											79.2,
											79.2,
											79.1,
											79.1,
											79.1,
											79.2,
											79,
											79.1,
											78.9,
											78.8,
											79.2,
											78.9,
											78.8,
											78.3,
											78.3,
											78.8,
											78.8,
											78.6,
											78.8,
											79.1,
											78.5,
											78.5,
											78.6,
											78.1,
											78.1,
											78.7,
											78.6,
											78.6,
											78.7,
											78.4,
											78.6,
											79.2,
											78.8,
											78.8,
											79.1,
											79,
											78.9,
											78.5,
											78.9,
											78.5,
											78.3,
											78.8,
											78.9,
											78.4,
											78.9,
											78.9,
											78.7,
											78.7,
											78.8,
											78.8,
											78.5,
											78.5,
											78.9,
											78.6,
											79.2,
											78.8,
											78.7,
											78.3,
											78.6,
											78.5,
											78.8,
											78.7,
											79.1,
											78.8,
											79,
											78.9,
											79,
											78.9,
											78.4,
											78.9,
											78.3,
											78.7,
											78.9,
											78.6,
											78.4,
											78.1,
											78.4,
											78.8,
											78.9,
											78.7,
											78.1,
											78.3,
											78.8,
											78.4,
											78.5,
											78.5,
											78.6,
											78.4,
											78.5,
											78.8,
											78.8,
											78.5,
											78.6,
											78.5,
											78.4,
											78.5,
											78.3,
											78.8,
											78.6,
											79,
											79,
											78.5,
											78.5,
											79,
											78.5,
											78.7,
											78.3,
											78.2,
											78.6,
											78.7,
											78.8,
											78.3,
											78.4,
											78.2,
											78,
											78.1,
											78.2,
											77.8,
											78,
											78.2,
											77.9,
											78.1,
											78.3,
											78.3,
											78.2,
											78,
											78.4,
											78.3,
											77.9,
											77.9,
											78.1,
											78.5,
											78.2,
											78.3,
											78.3,
											78.1,
											78,
											77.9,
											78.3,
											77.8,
											78.1,
											77.5,
											78.1,
											77.9,
											77.8,
											77.3,
											77.4,
											77.7,
											77.5,
											77.7,
											77.7,
											78,
											77.8,
											77.8,
											78,
											78.1,
											77.6,
											78.09999999999998,
											78.3,
											78.09999999999998,
											78.2,
											77.8,
											77.8,
											78.3,
											78.2,
											78.3,
											78.2,
											78.3,
											78,
											78.09999999999998,
											77.90000000000002,
											77.90000000000002,
											77.90000000000002,
											77.7,
											78,
											77.8,
											78.09999999999998,
											78,
											78,
											78,
											78,
											78.09999999999998,
											78.40000000000002,
											78,
											78,
											78,
											78.40000000000002,
											78,
											78.09999999999998,
											78.3,
											77.90000000000002,
											78.09999999999998,
											78.09999999999998,
											78.2,
											77.8,
											77.5,
											78.2,
											78.3,
											77.90000000000002,
											78,
											78.09999999999998,
											78.40000000000002,
											78.40000000000002,
											78.40000000000002,
											78.3,
											78.2,
											77.8,
											78,
											78.3,
											78.59999999999998,
											78.09999999999998,
											77.8,
											77.8,
											77.90000000000002,
											78.09999999999998,
											78.09999999999998,
											78.3,
											78.09999999999998,
											78.2,
											78,
											77.59999999999998,
											78.09999999999998,
											78.2,
											77.90000000000002,
											78.3,
											77.90000000000002,
											78,
											78.09999999999998,
											78.09999999999998,
											78.09999999999998,
											78.2,
											78,
											78,
											77.90000000000002,
											78.2,
											78.5,
											77.7,
											77.90000000000002,
											78.09999999999998,
											77.59999999999998,
											78,
											78.09999999999998,
											77.90000000000002,
											78.09999999999998,
											78.09999999999998,
											77.8,
											78.09999999999998,
											78,
											78.09999999999998,
											78.3,
											78.3,
											78.2,
											78.3,
											78.40000000000002,
											78.09999999999998,
											78.2,
											78.5,
											78.40000000000002,
											77.8,
											78.2,
											78.3,
											78.2,
											78.40000000000002,
											78.2,
											78.09999999999998,
											78.5,
											78.3,
											78.3,
											77.7,
											78.09999999999998,
											77.90000000000002,
											78,
											77.8,
											77.90000000000002,
											77.90000000000002,
											77.8,
											78.59999999999998,
											78.09999999999998,
											77.90000000000002,
											78.3,
											78.3,
											77.90000000000002,
											77.7,
											77.90000000000002,
											77.59999999999998,
											78,
											77.90000000000002,
											77.90000000000002,
											78,
											77.5,
											77.90000000000002,
											77.8,
											77.90000000000002,
											77.3,
											77.40000000000002,
											77.40000000000002,
											77.59999999999998,
											77.3,
											77.5,
											77.59999999999998,
											77.90000000000002,
											77.90000000000002,
											77.7,
											77.90000000000002,
											77.8,
											78.3,
											77.7,
											77.7,
											77.7,
											78.2,
											78.2,
											78,
											78,
											78.09999999999998,
											77.59999999999998,
											77.8,
											78,
											77.90000000000002,
											78.09999999999998,
											78,
											78,
											78,
											78.09999999999998,
											78.09999999999998,
											77.7,
											78,
											77.90000000000002,
											77.8,
											77.7,
											77.8,
											77.59999999999998,
											77.8,
											77.40000000000002,
											77.5,
											77.5,
											77.40000000000002,
											77.90000000000002,
											77.8,
											77.7,
											77.8,
											78.2,
											78.7,
											77.8,
											77.90000000000002,
											78.09999999999998,
											77.8,
											78.2,
											77.7,
											78,
											78,
											78.2,
											78
										],
										"unitDimensions": "0 1 0 0 0 0 0",
										"defaultValue": "{eval bmi.weight}"
									}
								],
								"Filter": {
									"Formula": ""
								}
							},
							{
								"name": "money",
								"Notes": "Target for calculation command",
								"DiagramX": 215,
								"DiagramY": 115,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "40 dollar"
								},
								"showInput": "y"
							},
							{
								"name": "Calc_Commands",
								"Notes": "Issuing command to the calculation engine.",
								"DiagramX": 215,
								"DiagramY": 75,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "HTML Form",
								"Formula": {
									"Formula": "'\n<style>\n\t<mm>css</mm>\n</style>\n\n<p>\n\tThe user interface for Math Minion talks to the calculation engine by sending text messages to it and receiving text messages back. The <b>mm_cmd</b action allows an Html page to send a message to the calculation engine and optionally process a reply.\n</p>\n<p>\n\tBelow are two buttons and the one labelled <b>Clear Money</b> is defined by the following HTML:\n</p>\n<pre class=\"html\">\n&lt;button onClick=\n  \"mmpost([],\n  {\nmm_cmd:\n'.money.formula set formula 0 dollar'\n  }\n)\"\n&gt;\n  Clear Money\n&lt;/button&gt;</pre>\n<p>\n\tThe command <b>.money.formula set formula 0 dollar</b> tells the calculation engine to set the formula of the expression named <b>money</b. to <b>0 dollar</b>. Tap it and if money is some other value, your should see it immediately change.\n</p>\n<p>\n\tThe button labeled <b>Money = 40</b> is similar except its command is <b>.money.formula set formula 40 dollar</b> and it has a call back that shows the calculation engine response as JSON in an alert box. Try tapping it and after you have dismissed the alert, the value of money should change to 40 dollar.\n</p>\n<div>\n\t<button onClick=\n\t\t\"mmpost([],\n\t\t\t{\n\t\t\t\tmm_cmd:\n\t\t\t\t'.money.formula set formula 0 dollar'\n\t\t\t}\n\t\t)\"\n\t>\n\t\tClear Money\n\t</button>\n\t<button onClick=\n\t\t\"mmpost([],\n\t\t\t{\n\t\t\t\tmm_cmd:\n\t\t\t\t'.money.formula set formula 40 dollar'\n\t\t\t},\n\t\t\t(results) => {\n\t\t\t\talert(JSON.stringify(results, null, '  '));\n\t\t\t}\n\t\t)\"\n\t>\n\t\tMoney = 40\n\t</button>\n</div>\n<p>\n\tThe <span class=\"link\" onClick=\"mmpost([],\n\t\t{mm_push: 'Console'})\">Console HtmlPage\n\t</span>\n\tin this model has a bit more complicated example that generates a rough facsimile of the <a href=\"./help/console.html\" target=\"_blank\">Console View</a>.\n</p>"
								},
								"f0": "css"
							},
							{
								"name": "Console",
								"Notes": "Issuing command to the calculation engine.",
								"DiagramX": 215,
								"DiagramY": 150,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "HTML Form",
								"Formula": {
									"Formula": "'\n<style>\n\ttable {\n\t\twidth: 100%;\n\t\tborder-collapse: collapse;\n\t}\n\ttd, th {\n\t\tborder: 1px solid #ddd;\n\t\tpadding: 4px;\n\t}\n\n\ttr:nth-child(even){background-color: #f2f2f2;}\n\t\n\ttr:hover {background-color: #ddd;}\n\t\n\tth {\n\t\ttext-align: left;\n\t\tbackground-color: #04AA6D;\n\t\tcolor: white;\n\t}\n\tth.col0, td.col0 {\n\t\twidth: 50px;\n\t}\n\t#output {\n\t\twidth: 100%;\n\t\theight: 300px;\n\t\tmargin-top: 10px;\n\t}\n\t#input {\n\t\twidth: 100%\n\t}\n</style>\n<script>\n\tconst handleKey = (event) => {\n\t\t// watches for Enter and sends command when it see it\n\t\tif (event.code == 'Enter') {\n\t\t\tconst input = document.getElementById('input');\n\t\t\tmmpost([],{mm_cmd: input.value}, (results) => {\n\t\t\t\tconst outputArea = document.getElementById('output');\n\t\t\t\toutputArea.innerHTML = JSON.stringify(results, null, '  ');\n\t\t\t});\n\t\t}\n\t}\n</script>\n<p>\n\tBelow is a crude copy of what the <a href=\"./help/console.html\" target=\"_blank\">console view</a> does. See the <a href=\"./help/console.html\" target=\"_blank\">console help</a> for details on giving commands.\n</p>\n<p>\n\tTry giving the command <b>.money.formula set formula 100 kg</b> (note the leading dot) and see what happens to the money expression.\n</p>\n<div id=\"main\">\n\t<div>\n\t\tCommand:\n\t\t<input id=\"input\" type=\"text\"><br>\n\t</div>\n\tResult\n\t<textarea id=\"output\">\n\t</textarea>\n</div>\n<script>\n\tinput.addEventListener('keydown', handleKey);\n</script>"
								}
							}
						],
						"inputs": {
							"weight": "79 kg",
							"height": "6 ft + 1 in"
						}
					},
					{
						"name": "Function_Solver",
						"Notes": "<b>Function_Solver</b>\nSolves for one or more functions\nf(x) = 0",
						"DiagramX": 50,
						"DiagramY": 80,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Broyden",
								"Notes": "This is the classic Broyden 3 function test system, which has the equations:\n\n3*x-cos(y*z)-0.5 = 0\n\nx^2 -81*(y+0.1)^2 + sin(z) +1.06 = 0\n\nExp(-x*y) +20*z+ (10*pi -3)/3 = 0\n\nThe solution should be:\n\n0.500000\n0\n-0.523599\n\nIn this case the entire problem is defined right in the solver object, making use of $.1, $.2 and $.3 as the solver outputs.\n\nRecall that the $ symbols in a formula is a short cut for the object that owns the formula.",
								"DiagramX": -55,
								"DiagramY": 145,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Equation Solver",
								"f0": "3 * $.1 - {cos $.2 * $.3} - 0.5",
								"c0": "1",
								"f1": "$.1*$.1 - 81*($.2 + 0.1)^2 + {sin $.3} + 1.06",
								"c1": "1",
								"f2": "{exp $.1*$.2} + 20*$.3 + (10*{pi} - 3.) / 3.0",
								"c2": "1",
								"maxIter": 200,
								"maxJacobians": 5,
								"Enabled": "y"
							},
							{
								"name": "Single",
								"Notes": "An example of solving a single function",
								"DiagramX": 25,
								"DiagramY": 145,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "parabolaCopy",
										"Notes": "A copy of the \"parabola\" expression, with the x value replaced with \"solverX\".",
										"DiagramX": -220,
										"DiagramY": -240,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "(SolverX+5)^2 +7"
										},
										"showInput": "y"
									},
									{
										"name": "lineCopy",
										"Notes": "A copy of the \"line\" expression, with the x value replaced with \"solverX\".",
										"DiagramX": -220,
										"DiagramY": -195,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "2000 - 20*SolverX"
										},
										"showInput": "y"
									},
									{
										"name": "Plot",
										"Notes": "A plot of the line and parabola.  Note that the line crosses the parabola twice, yielding two places where the\n\nparabola - line\n\nvalue will be zero.\n\nStrictly speaking, the Brent solver is likely to fail if the slope of the function changes sign, but an appropriate choice of starting point and range can be used to overcome that.",
										"DiagramX": -325,
										"DiagramY": -110,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "x",
											"vmin": "",
											"vmax": "",
											"Y1": {
												"v": "parabola",
												"vmin": "0",
												"vmax": "3500",
												"lineType": 0
											},
											"Y2": {
												"v": "line",
												"vmin": "0",
												"vmax": "3500",
												"lineType": 0
											}
										}
									},
									{
										"name": "SolverX",
										"Notes": "The output of the solver is constrained to between -1 and 1 for a single value problem.  The starting value will be 0.\n\nIn this case, I multiply the solver output by 50 and add 50 so that the starting value is 50 and the solution must be between 0 and 100.  This will constrain the solution to be on the right side of the parabola as shown in the plot.\n\nTry adding a minus sign to the first 50, so the formula becomes:\n\n-50 + Solver.1*50\n\nNow the function value is initialized and largely constrained to the left side of the parabola and the solution on that side is the one found.",
										"DiagramX": -220,
										"DiagramY": -120,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "50 + Solver.1*50"
										},
										"showInput": "y"
									},
									{
										"name": "parabola",
										"Notes": "An expression which calculates the y value of a parabola, give an x value(s).",
										"DiagramX": -325,
										"DiagramY": -200,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "(x+5)^2 +7"
										},
										"showInput": "y"
									},
									{
										"name": "line",
										"Notes": "An expression which calculates a y value for the given x value(s).",
										"DiagramX": -325,
										"DiagramY": -155,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "2000 - 20*x"
										},
										"showInput": "y"
									},
									{
										"name": "x",
										"Notes": "A range of values used to plot the parabola and line.",
										"DiagramX": -325,
										"DiagramY": -240,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "-75:50"
										},
										"showInput": "y"
									},
									{
										"name": "Solver",
										"Notes": "The solver will alter its output variable (referenced as Solver.1 for the first, and in this case only, output) until the function defined as f(1) has a value of 0.\n\nThe number of outputs for a function must match the length of the array calculated by the function - in this case just 1.\n\nThe reset will set all function outputs to 0 and uncheck the Enabled box.  Check that box when you want the solver to attempt to find a solution.\n\nNote that if the solver should fail to converge, it will turn off its solve switch and will no longer attempt to resolve when its function inputs change.\n\nYou will have to return to the solver and turn on the switch when you have fixed the convergence problem.",
										"DiagramX": -220,
										"DiagramY": -150,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Equation Solver",
										"f0": "parabolaCopy - lineCopy",
										"c0": "1",
										"maxIter": 200,
										"maxJacobians": 5,
										"Enabled": "y"
									},
									{
										"name": "Overview",
										"Notes": "This model determines the intersection between two curves, specifically a parabola and a line.  Obviously this could easily be solved algebraically or even graphically, but that very simplicity makes it a useful example.\n\nThe left set of connected tools provides a visual representation of the problem, by graphing a range of x values versus the y values calculated by the parabola and line expressions.\n\nA glance at the plot shows that the line will cross the parabola in two places and indeed it is easy to determine their coordinates by zooming in and dragging the crossing points to a grid line.\n\nThe right set of connected blocks uses the solver tool to find a value of x where the y values calculated by the two expressions are equal and hence at the intersection.",
										"DiagramX": -325,
										"DiagramY": -270,
										"HideInfo": "n",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									}
								]
							},
							{
								"name": "Overview",
								"Notes": "<b>Overview</b>\n\nThe function solver tool modifies one or more output values until the function values calculated from those outputs are zero.  If there is a single scalar output, then the Brent method is used, with the output value limited to the range -1 to 1 (the function calculation can of course scale that to anything).\n\nIf it is a multi value problem, then the Broyden method is used and while in that case the output values can exceed the -1 to 1 range, it is still good practice  to scale the problem so all values are relatively normalized.",
								"DiagramX": -55,
								"DiagramY": 115,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							},
							{
								"name": "Multiple",
								"Notes": "An example of solving multiple functions simultaneously.",
								"DiagramX": 100,
								"DiagramY": 145,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Solver",
										"Notes": "This solver has two functions defined, with the first being the differences between the calculated and estimated recycle values.  The second is a scalar function of the difference between the calculated and estimates energy recycle values.\n\nAs there are three \"components\" in the first function, the solver is actually solving for 4 simultaneous equations.\n\nYou must tell the solver how many outputs to generate for each function, so for the first function this is designated as {nrows feed}.",
										"DiagramX": 150,
										"DiagramY": 255,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Equation Solver",
										"f0": "splits - recycle",
										"c0": "{nrows feed}",
										"f1": "(qsplit - qcycle)/100",
										"c1": "1",
										"maxIter": 200,
										"maxJacobians": 5,
										"Enabled": "y"
									},
									{
										"name": "recycle",
										"Notes": "The output of the solver variable 1 is an array and is used directly as the recycle.",
										"DiagramX": 60,
										"DiagramY": 205,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "solver.1"
										},
										"showInput": "y"
									},
									{
										"name": "sum",
										"Notes": "        The feed and recycle\n        materials are mixed.",
										"DiagramX": 150,
										"DiagramY": 75,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "feed + recycle"
										},
										"showInput": "y"
									},
									{
										"name": "splits",
										"Notes": "An arbitrary function with no physical significance is used to split the combined material into a calculated recycle material.\n\nThese values  should be equal to the estimated values in the recycle object when solved.",
										"DiagramX": 150,
										"DiagramY": 170,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "(sum*1:3*.3)^.9"
										},
										"showInput": "y"
									},
									{
										"name": "q",
										"Notes": "The amount of energy contained in the feed material.",
										"DiagramX": 60,
										"DiagramY": 155,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "100"
										},
										"showInput": "y"
									},
									{
										"name": "qcycle",
										"Notes": "The energy recycle, scaled\nfrom the solver variable 2.",
										"DiagramX": 60,
										"DiagramY": 255,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "Solver.2 * 10"
										},
										"showInput": "y"
									},
									{
										"name": "qsum",
										"Notes": "As with the material, the feed energy is added to the recycled energy.",
										"DiagramX": 150,
										"DiagramY": 120,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "q + qcycle"
										},
										"showInput": "y"
									},
									{
										"name": "qsplit",
										"Notes": "Another arbitrary split producing a calculated recycle energy.",
										"DiagramX": 150,
										"DiagramY": 205,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ".1*qsum"
										},
										"showInput": "y"
									},
									{
										"name": "Product",
										"Notes": "What isn't recycled is the product, which should be equal to the feed when solved.",
										"DiagramX": 245,
										"DiagramY": 75,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "sum - splits"
										},
										"showInput": "y"
									},
									{
										"name": "QProduct",
										"Notes": "The product energy flow, which should be the same as the feed energy flow when the problem is solved.",
										"DiagramX": 245,
										"DiagramY": 125,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "qsum - qsplit"
										},
										"showInput": "y"
									},
									{
										"name": "feed",
										"Notes": "An arbitrary \"feed\" material.",
										"DiagramX": 60,
										"DiagramY": 120,
										"HideInfo": "y",
										"DiagramNotes": "y",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "1:3"
										},
										"showInput": "y"
									},
									{
										"name": "Overview",
										"Notes": "<b>Overview</b>\n\nThis model represents a highly stylized recycle operation of the sort that might occur in a chemical plant.\n\nAn input material, in the \"feed\" array, is mixed with material recycled from farther along in the plant.  The mixed material is then split by some process (here just an arbitrary formula) which results in the recycle flow and a product flow.\n\nSince, in this nonsensical example, everything that goes in must end up in the product, it serves no real point other than exercising the solver, which combines an array function with a scalar function.",
										"DiagramX": 60,
										"DiagramY": 75,
										"HideInfo": "n",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									}
								]
							}
						]
					},
					{
						"name": "DataTable",
						"Notes": "<b>DataTable</b>\nData tables are ideal for storing the kind of information that is often stored in spreadsheet or database tables.",
						"DiagramX": 50,
						"DiagramY": 15,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"indexTool": "DataTables",
						"Objects": [
							{
								"name": "LargerExample",
								"Notes": "LargerExample\n\nA model showing additional manipulation of DataTable values",
								"DiagramX": 40,
								"DiagramY": 20,
								"HideInfo": "n",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Model",
								"diagramScale": 1,
								"Objects": [
									{
										"name": "Records",
										"Notes": "<b>Records</b>\n\nThis is a data table with columns recording the minimum and maximum temperature and rainfall amounts from my deck weather station over a few years, when we lived in Fernie BC.\n\nAs values might not have been available for some rows, I have arbitrarily assigned the value -12321 to mean not available and this is used in the default value formulas for the temperature columns, as well as a number of the expressions that manipulate this data.\n\nThe default value for the date is the current date, while the default value for the rainfall column simply replicates the value of the previous last row, as this often does not change.",
										"DiagramX": -275,
										"DiagramY": -180,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Data Table",
										"Columns": [
											{
												"name": "Date",
												"displayUnit": "date",
												"format": "%.0f",
												"nValues": [
													1179964800,
													1180051200,
													1180137600,
													1180224000,
													1180310400,
													1180396800,
													1180483200,
													1180569600,
													1180656000,
													1180742400,
													1180828800,
													1180915200,
													1181001600,
													1181088000,
													1181174400,
													1181260800,
													1181347200,
													1181433600,
													1181520000,
													1181606400,
													1181692800,
													1181779200,
													1181865600,
													1181952000,
													1182038400,
													1182124800,
													1182211200,
													1182297600,
													1182384000,
													1182470400,
													1182556800,
													1182643200,
													1182729600,
													1182816000,
													1182902400,
													1182988800,
													1183075200,
													1183161600,
													1183248000,
													1183334400,
													1183420800,
													1183507200,
													1183593600,
													1183680000,
													1183766400,
													1183852800,
													1183939200,
													1184025600,
													1184112000,
													1184198400,
													1184284800,
													1184371200,
													1184457600,
													1184544000,
													1184630400,
													1184716800,
													1184803200,
													1184889600,
													1184976000,
													1185062400,
													1185148800,
													1185235200,
													1185321600,
													1185408000,
													1185494400,
													1185580800,
													1185667200,
													1185753600,
													1185840000,
													1185926400,
													1186012800,
													1186099200,
													1186185600,
													1186272000,
													1186358400,
													1186444800,
													1186531200,
													1186617600,
													1186704000,
													1186790400,
													1186876800,
													1186963200,
													1187049600,
													1187136000,
													1187222400,
													1187308800,
													1187395200,
													1187481600,
													1187568000,
													1187654400,
													1187740800,
													1187827200,
													1187913600,
													1188000000,
													1188086400,
													1188172800,
													1188259200,
													1188345600,
													1188432000,
													1188518400,
													1188604800,
													1188691200,
													1188777600,
													1188864000,
													1188950400,
													1189036800,
													1189123200,
													1189209600,
													1189296000,
													1189382400,
													1189468800,
													1189555200,
													1189641600,
													1189728000,
													1189814400,
													1189900800,
													1189987200,
													1190073600,
													1190160000,
													1190246400,
													1190332800,
													1190419200,
													1190505600,
													1190592000,
													1190678400,
													1190764800,
													1190851200,
													1190937600,
													1191024000,
													1191110400,
													1191196800,
													1191283200,
													1191369600,
													1191456000,
													1191542400,
													1191628800,
													1191715200,
													1191801600,
													1191888000,
													1191974400,
													1192060800,
													1192147200,
													1192233600,
													1192320000,
													1192406400,
													1192492800,
													1192579200,
													1192665600,
													1192752000,
													1192838400,
													1192924800,
													1193011200,
													1193097600,
													1193184000,
													1193270400,
													1193356800,
													1193443200,
													1193529600,
													1193616000,
													1193702400,
													1193788800,
													1193875200,
													1193961600,
													1194048000,
													1194134400,
													1194220800,
													1194307200,
													1194393600,
													1194480000,
													1194566400,
													1194652800,
													1194739200,
													1194825600,
													1194912000,
													1194998400,
													1195084800,
													1195171200,
													1195257600,
													1195344000,
													1195430400,
													1195516800,
													1195603200,
													1195689600,
													1195776000,
													1195862400,
													1195948800,
													1196035200,
													1196121600,
													1196208000,
													1196294400,
													1196380800,
													1196467200,
													1196553600,
													1196640000,
													1196726400,
													1196812800,
													1196899200,
													1196985600,
													1197072000,
													1197158400,
													1197244800,
													1197331200,
													1197417600,
													1197504000,
													1197590400,
													1197676800,
													1197763200,
													1197849600,
													1197936000,
													1198022400,
													1198108800,
													1198195200,
													1198281600,
													1198368000,
													1198454400,
													1198540800,
													1198627200,
													1198713600,
													1198800000,
													1198886400,
													1198972800,
													1199059200,
													1199145600,
													1199232000,
													1199318400,
													1199404800,
													1199491200,
													1199577600,
													1199664000,
													1199750400,
													1199836800,
													1199923200,
													1200009600,
													1200096000,
													1200182400,
													1200268800,
													1200355200,
													1200441600,
													1200528000,
													1200614400,
													1200700800,
													1200787200,
													1200873600,
													1200960000,
													1201046400,
													1201132800,
													1201219200,
													1201305600,
													1201392000,
													1201478400,
													1201564800,
													1201651200,
													1201737600,
													1201824000,
													1201910400,
													1201996800,
													1202083200,
													1202169600,
													1202256000,
													1202342400,
													1202428800,
													1202515200,
													1202601600,
													1202688000,
													1202774400,
													1202860800,
													1202947200,
													1203033600,
													1203120000,
													1203206400,
													1203292800,
													1203379200,
													1203465600,
													1203552000,
													1203638400,
													1203724800,
													1203811200,
													1203897600,
													1203984000,
													1204070400,
													1204156800,
													1204243200,
													1204329600,
													1204416000,
													1204502400,
													1204588800,
													1204675200,
													1204761600,
													1204848000,
													1204934400,
													1205020800,
													1205107200,
													1205193600,
													1205280000,
													1205366400,
													1205452800,
													1205539200,
													1205625600,
													1205712000,
													1205798400,
													1205884800,
													1205971200,
													1206057600,
													1206144000,
													1206230400,
													1206316800,
													1206403200,
													1206489600,
													1206576000,
													1206662400,
													1206748800,
													1206835200,
													1206921600,
													1207008000,
													1207094400,
													1207180800,
													1207267200,
													1207353600,
													1207440000,
													1207526400,
													1207612800,
													1207699200,
													1207785600,
													1207872000,
													1207958400,
													1208044800,
													1208131200,
													1208217600,
													1208304000,
													1208390400,
													1208476800,
													1208563200,
													1208649600,
													1208736000,
													1208822400,
													1208908800,
													1208995200,
													1209081600,
													1209168000,
													1209254400,
													1209340800,
													1209427200,
													1209513600,
													1209600000,
													1209686400,
													1209772800,
													1209859200,
													1209945600,
													1210032000,
													1210118400,
													1210204800,
													1210291200,
													1210377600,
													1210464000,
													1210550400,
													1210636800,
													1210723200,
													1210809600,
													1210896000,
													1210982400,
													1211068800,
													1211155200,
													1211241600,
													1211328000,
													1211414400,
													1211500800,
													1211587200,
													1211673600,
													1211760000,
													1211846400,
													1211932800,
													1212019200,
													1212105600,
													1212192000,
													1212278400,
													1212364800,
													1212451200,
													1212537600,
													1212624000,
													1212710400,
													1212796800,
													1212883200,
													1212969600,
													1213056000,
													1213142400,
													1213228800,
													1213315200,
													1213401600,
													1213488000,
													1213574400,
													1213660800,
													1213747200,
													1213833600,
													1213920000,
													1214006400,
													1214092800,
													1214179200,
													1214265600,
													1214352000,
													1214438400,
													1214524800,
													1214611200,
													1214697600,
													1214784000,
													1214870400,
													1214956800,
													1215043200,
													1215129600,
													1215216000,
													1215302400,
													1215388800,
													1215475200,
													1215561600,
													1215648000,
													1215734400,
													1215820800,
													1215907200,
													1215993600,
													1216080000,
													1216166400,
													1216252800,
													1216339200,
													1216425600,
													1216512000,
													1216598400,
													1216684800,
													1216771200,
													1216857600,
													1216944000,
													1217030400,
													1217116800,
													1217203200,
													1217289600,
													1217376000,
													1217462400,
													1217548800,
													1217635200,
													1217721600,
													1217808000,
													1217894400,
													1217980800,
													1218067200,
													1218153600,
													1218240000,
													1218326400,
													1218412800,
													1218499200,
													1218585600,
													1218672000,
													1218758400,
													1218844800,
													1218931200,
													1219017600,
													1219104000,
													1219190400,
													1219276800,
													1219363200,
													1219449600,
													1219536000,
													1219622400,
													1219708800,
													1219795200,
													1219881600,
													1219968000,
													1220054400,
													1220140800,
													1220227200,
													1220313600,
													1220400000,
													1220486400,
													1220572800,
													1220659200,
													1220745600,
													1220832000,
													1220918400,
													1221004800,
													1221091200,
													1221177600,
													1221264000,
													1221350400,
													1221436800,
													1221523200,
													1221609600,
													1221696000,
													1221782400,
													1221868800,
													1221955200,
													1222041600,
													1222128000,
													1222214400,
													1222300800,
													1222387200,
													1222473600,
													1222560000,
													1222646400,
													1222732800,
													1222819200,
													1222905600,
													1222992000,
													1223078400,
													1223164800,
													1223251200,
													1223337600,
													1223424000,
													1223510400,
													1223596800,
													1223683200,
													1223769600,
													1223856000,
													1223942400,
													1224028800,
													1224115200,
													1224201600,
													1224288000,
													1224374400,
													1224460800,
													1224547200,
													1224633600,
													1224720000,
													1224806400,
													1224892800,
													1224979200,
													1225065600,
													1225152000,
													1225238400,
													1225324800,
													1225411200,
													1225497600,
													1225584000,
													1225670400,
													1225756800,
													1225843200,
													1225929600,
													1226016000,
													1226102400,
													1226188800,
													1226275200,
													1226361600,
													1226448000,
													1226534400,
													1226620800,
													1226707200,
													1226793600,
													1226880000,
													1226966400,
													1227052800,
													1227139200,
													1227225600,
													1227312000,
													1227398400,
													1227484800,
													1227571200,
													1227657600,
													1227744000,
													1227830400,
													1227916800,
													1228003200,
													1228089600,
													1228176000,
													1228262400,
													1228348800,
													1228435200,
													1228521600,
													1228608000,
													1228694400,
													1228780800,
													1228867200,
													1228953600,
													1229040000,
													1229126400,
													1229212800,
													1229299200,
													1229385600,
													1229472000,
													1229558400,
													1229644800,
													1229731200,
													1229817600,
													1229904000,
													1229990400,
													1230076800,
													1230163200,
													1230249600,
													1230336000,
													1230422400,
													1230508800,
													1230595200,
													1230681600,
													1230768000,
													1230854400,
													1230940800,
													1231027200,
													1231113600,
													1231200000,
													1231286400,
													1231372800,
													1231459200,
													1231545600,
													1231632000,
													1231718400,
													1231804800,
													1231891200,
													1231977600,
													1232064000,
													1232150400,
													1232236800,
													1232323200,
													1232409600,
													1232496000,
													1232582400,
													1232668800,
													1232755200,
													1232841600,
													1232928000,
													1233014400,
													1233100800,
													1233187200,
													1233273600,
													1233360000,
													1233446400,
													1233532800,
													1233619200,
													1233705600,
													1233792000,
													1233878400,
													1233964800,
													1234051200,
													1234137600,
													1234224000,
													1234310400,
													1234396800,
													1234483200,
													1234569600,
													1234656000,
													1234742400,
													1234828800,
													1234915200,
													1235001600,
													1235088000,
													1235174400,
													1235260800,
													1235347200,
													1235433600,
													1235520000,
													1235606400,
													1235692800,
													1235779200,
													1235865600,
													1235952000,
													1236038400,
													1236124800,
													1236211200,
													1236297600,
													1236384000,
													1236470400,
													1236556800,
													1236643200,
													1236729600,
													1236816000,
													1236902400,
													1236988800,
													1237075200,
													1237161600,
													1237248000,
													1237334400,
													1237420800,
													1237507200,
													1237593600,
													1237680000,
													1237766400,
													1237852800,
													1237939200,
													1238025600,
													1238112000,
													1238198400,
													1238284800,
													1238371200,
													1238457600,
													1238544000,
													1238630400,
													1238716800,
													1238803200,
													1238889600,
													1238976000,
													1239062400,
													1239148800,
													1239235200,
													1239321600,
													1239408000,
													1239494400,
													1239580800,
													1239667200,
													1239753600,
													1239840000,
													1239926400,
													1240012800,
													1240099200,
													1240185600,
													1240272000,
													1240358400,
													1240444800,
													1240531200,
													1240617600,
													1240704000,
													1240790400,
													1240876800,
													1240963200,
													1241049600,
													1241136000,
													1241222400,
													1241308800,
													1241395200,
													1241481600,
													1241568000,
													1241654400,
													1241740800,
													1241827200,
													1241913600,
													1242000000,
													1242086400,
													1242172800,
													1242259200,
													1242345600,
													1242432000,
													1242518400,
													1242604800,
													1242691200,
													1242777600,
													1242864000,
													1242950400,
													1243036800,
													1243123200,
													1243209600,
													1243296000,
													1243382400,
													1243468800,
													1243555200,
													1243641600,
													1243728000,
													1243814400,
													1243900800,
													1243987200,
													1244073600,
													1244160000,
													1244246400,
													1244332800,
													1244419200,
													1244505600,
													1244592000,
													1244678400,
													1244764800,
													1244851200,
													1244937600,
													1245024000,
													1245110400,
													1245196800,
													1245283200,
													1245369600,
													1245456000,
													1245542400,
													1245628800,
													1245715200,
													1245801600,
													1245888000,
													1245974400,
													1246060800,
													1246147200,
													1246233600,
													1246320000,
													1246406400,
													1246492800,
													1246579200,
													1246665600,
													1246752000,
													1246838400,
													1246924800,
													1247011200,
													1247097600,
													1247184000,
													1247270400,
													1247356800,
													1247443200,
													1247529600,
													1247616000,
													1247702400,
													1247788800,
													1247875200,
													1247961600,
													1248048000,
													1248134400,
													1248220800,
													1248307200,
													1248393600,
													1248480000,
													1248566400,
													1248652800,
													1248739200,
													1248825600,
													1248912000,
													1248998400,
													1249084800,
													1249171200,
													1249257600,
													1249344000,
													1249430400,
													1249516800,
													1249603200,
													1249689600,
													1249776000,
													1249862400,
													1249948800,
													1250035200,
													1250121600,
													1250208000,
													1250294400,
													1250380800,
													1250467200,
													1250553600,
													1250640000,
													1250726400,
													1250812800,
													1250899200,
													1250985600,
													1251072000,
													1251158400,
													1251244800,
													1251331200,
													1251417600,
													1251504000,
													1251590400,
													1251676800,
													1251763200,
													1251849600,
													1251936000,
													1252022400,
													1252108800,
													1252195200,
													1252281600,
													1252368000,
													1252454400,
													1252540800,
													1252627200,
													1252713600,
													1252800000,
													1252886400,
													1252972800,
													1253059200,
													1253145600,
													1253232000,
													1253318400,
													1253404800,
													1253491200,
													1253577600,
													1253664000,
													1253750400,
													1253836800,
													1253923200,
													1254009600,
													1254096000,
													1254182400,
													1254268800,
													1254355200,
													1254441600,
													1254528000,
													1254614400,
													1254700800,
													1254787200,
													1254873600,
													1254960000,
													1255046400,
													1255132800,
													1255219200,
													1255305600,
													1255392000,
													1255478400,
													1255564800,
													1255651200,
													1255737600,
													1255824000,
													1255910400,
													1255996800,
													1256083200,
													1256169600,
													1256256000,
													1256342400,
													1256428800,
													1256515200,
													1256601600,
													1256688000,
													1256774400,
													1256860800,
													1256947200,
													1257033600,
													1257120000,
													1257206400,
													1257292800,
													1257379200,
													1257465600,
													1257552000,
													1257638400,
													1257724800,
													1257811200,
													1257897600,
													1257984000,
													1258070400,
													1258156800,
													1258243200,
													1258329600,
													1258416000,
													1258502400,
													1258588800,
													1258675200,
													1258761600,
													1258848000,
													1258934400,
													1259020800,
													1259107200,
													1259193600,
													1259280000,
													1259366400,
													1259452800,
													1259539200,
													1259625600,
													1259712000,
													1259798400,
													1259884800,
													1259971200,
													1260057600,
													1260144000,
													1260230400,
													1260316800,
													1260403200,
													1260489600,
													1260576000,
													1260662400,
													1260748800,
													1260835200,
													1260921600,
													1261008000,
													1261094400,
													1261180800,
													1261267200,
													1261353600,
													1261440000,
													1261526400,
													1261612800,
													1261699200,
													1261785600,
													1261872000,
													1261958400,
													1262044800,
													1262131200,
													1262217600,
													1262304000,
													1262390400,
													1262476800,
													1262563200,
													1262649600,
													1262736000,
													1262822400,
													1262908800,
													1262995200,
													1263081600,
													1263168000,
													1263254400,
													1263340800,
													1263427200,
													1263513600,
													1263600000,
													1263686400,
													1263772800,
													1263859200,
													1263945600,
													1264032000,
													1264118400,
													1264204800,
													1264291200,
													1264377600,
													1264464000,
													1264550400,
													1264636800,
													1264723200,
													1264809600,
													1264896000,
													1264982400,
													1265068800,
													1265155200,
													1265241600,
													1265328000,
													1265414400,
													1265500800,
													1265587200,
													1265673600,
													1265760000,
													1265846400,
													1265932800,
													1266019200,
													1266105600,
													1266192000,
													1266278400,
													1266364800,
													1266451200,
													1266537600,
													1266624000,
													1266710400,
													1266796800,
													1266883200,
													1266969600,
													1267056000,
													1267142400,
													1267228800,
													1267315200,
													1267401600,
													1267488000,
													1267574400,
													1267660800,
													1267747200,
													1267833600,
													1267920000,
													1268006400,
													1268092800,
													1268179200,
													1268265600,
													1268352000,
													1268438400,
													1268524800,
													1268611200,
													1268697600,
													1268784000,
													1268870400,
													1268956800,
													1269043200,
													1269129600,
													1269216000,
													1269302400,
													1269388800,
													1269475200,
													1269561600,
													1269648000,
													1269734400,
													1269820800,
													1269907200,
													1269993600,
													1270080000,
													1270166400,
													1270252800,
													1270339200,
													1270425600,
													1270512000,
													1270598400,
													1270684800,
													1270771200,
													1270857600,
													1270944000,
													1271030400,
													1271116800,
													1271203200,
													1271289600,
													1271376000,
													1271462400,
													1271548800,
													1271635200,
													1271721600,
													1271808000,
													1271894400,
													1271980800,
													1272067200,
													1272153600,
													1272240000,
													1272326400,
													1272412800,
													1272499200,
													1272585600,
													1272672000,
													1272758400,
													1272844800,
													1272931200,
													1273017600,
													1273104000,
													1273190400,
													1273276800,
													1273363200,
													1273449600,
													1273536000,
													1273622400,
													1273708800,
													1273795200,
													1273881600,
													1273968000,
													1274054400,
													1274140800,
													1274227200,
													1274313600,
													1274400000,
													1274486400,
													1274572800,
													1274659200,
													1274745600,
													1274832000,
													1274918400,
													1275004800,
													1275091200,
													1275177600,
													1275264000,
													1275350400,
													1275436800,
													1275523200,
													1275609600,
													1275696000,
													1275782400,
													1275868800,
													1275955200,
													1276041600,
													1276128000,
													1276214400,
													1276300800,
													1276387200,
													1276473600,
													1276560000,
													1276646400,
													1276732800,
													1276819200,
													1276905600,
													1276992000,
													1277078400,
													1277164800,
													1277251200,
													1277337600,
													1277424000,
													1277510400,
													1277596800,
													1277683200,
													1277769600,
													1277856000,
													1277942400,
													1278028800,
													1278115200,
													1278201600,
													1278288000,
													1278374400,
													1278460800,
													1278547200,
													1278633600,
													1278720000,
													1278806400,
													1278892800,
													1278979200,
													1279065600,
													1279152000,
													1279238400,
													1279324800,
													1279411200,
													1279497600,
													1279584000,
													1279670400,
													1279756800,
													1279843200,
													1279929600,
													1280016000,
													1280102400,
													1280188800,
													1280275200,
													1280361600,
													1280448000,
													1280534400,
													1280620800,
													1280707200,
													1280793600,
													1280880000,
													1280966400,
													1281052800,
													1281139200,
													1281225600,
													1281312000,
													1281398400,
													1281484800,
													1281571200,
													1281657600,
													1281744000,
													1281830400,
													1281916800,
													1282003200,
													1282089600,
													1282176000,
													1282262400,
													1282348800,
													1282435200,
													1282521600,
													1282608000,
													1282694400,
													1282780800,
													1282867200,
													1282953600,
													1283040000,
													1283126400,
													1283212800,
													1283299200,
													1283385600,
													1283472000,
													1283558400,
													1283644800,
													1283731200,
													1283817600,
													1283904000,
													1283990400,
													1284076800,
													1284163200,
													1284249600,
													1284336000,
													1284422400,
													1284508800,
													1284595200,
													1284681600,
													1284768000,
													1284854400,
													1284940800,
													1285027200,
													1285113600,
													1285200000,
													1285286400,
													1285372800,
													1285459200,
													1285545600,
													1285632000,
													1285718400,
													1285804800,
													1285891200,
													1285977600,
													1286064000,
													1286150400,
													1286236800,
													1286323200,
													1286409600,
													1286496000,
													1286582400,
													1286668800,
													1286755200,
													1286841600,
													1286928000,
													1287014400,
													1287100800,
													1287187200,
													1287273600,
													1287360000,
													1287446400,
													1287532800,
													1287619200,
													1287705600,
													1287792000,
													1287878400,
													1287964800,
													1288051200,
													1288137600,
													1288224000,
													1288310400,
													1288396800,
													1288483200,
													1288569600,
													1288656000,
													1288742400,
													1288828800,
													1288915200,
													1289001600,
													1289088000,
													1289174400,
													1289260800,
													1289347200,
													1289433600,
													1289520000,
													1289606400,
													1289692800,
													1289779200,
													1289865600,
													1289952000,
													1290038400,
													1290124800,
													1290211200,
													1290297600,
													1290384000,
													1290470400,
													1290556800,
													1290643200,
													1290729600,
													1290816000,
													1290902400,
													1290988800,
													1291075200,
													1291161600,
													1291248000,
													1291334400,
													1291420800,
													1291507200,
													1291593600,
													1291680000,
													1291766400,
													1291852800,
													1291939200,
													1292025600,
													1292112000,
													1292198400,
													1292284800,
													1292371200,
													1292457600,
													1292544000,
													1292630400,
													1292716800,
													1292803200,
													1292889600,
													1292976000,
													1293062400,
													1293148800,
													1293235200,
													1293321600,
													1293408000,
													1293494400,
													1293580800,
													1293667200,
													1293753600,
													1293840000,
													1293926400,
													1294012800,
													1294099200,
													1294185600,
													1294272000,
													1294358400,
													1294444800,
													1294531200,
													1294617600,
													1294704000,
													1294790400,
													1294876800,
													1294963200,
													1295049600,
													1295136000,
													1295222400,
													1295308800,
													1295395200,
													1295481600,
													1295568000,
													1295654400,
													1295740800,
													1295827200,
													1295913600,
													1296000000,
													1296086400,
													1296172800,
													1296259200,
													1296345600,
													1296432000,
													1296518400,
													1296604800,
													1296691200,
													1296777600,
													1296864000,
													1296950400,
													1297036800,
													1297123200,
													1297209600,
													1297296000,
													1297382400,
													1297468800,
													1297555200,
													1297641600,
													1297728000,
													1297814400,
													1297900800,
													1297987200,
													1298073600,
													1298160000,
													1298246400,
													1298332800,
													1298419200,
													1298505600,
													1298592000,
													1298678400,
													1298764800,
													1298851200,
													1298937600,
													1299024000,
													1299110400,
													1299196800,
													1299283200,
													1299369600,
													1299456000,
													1299542400,
													1299628800,
													1299715200,
													1299801600,
													1299888000,
													1299974400,
													1300060800,
													1300147200,
													1300233600,
													1300320000,
													1300406400,
													1300492800,
													1300579200,
													1300665600,
													1300752000,
													1300838400,
													1300924800,
													1301011200,
													1301097600,
													1301184000,
													1301270400,
													1301356800,
													1301443200,
													1301529600,
													1301616000,
													1301702400,
													1301788800,
													1301875200,
													1301961600,
													1302048000,
													1302134400,
													1302220800,
													1302307200,
													1302393600,
													1302480000,
													1302566400,
													1302652800,
													1302739200,
													1302825600,
													1302912000,
													1302998400,
													1303084800,
													1303171200,
													1303257600,
													1303344000,
													1303430400,
													1303516800,
													1303603200,
													1303689600,
													1303776000,
													1303862400,
													1303948800,
													1304035200,
													1304121600,
													1304208000,
													1304294400,
													1304380800,
													1304467200,
													1304553600,
													1304640000,
													1304726400,
													1304812800,
													1304899200,
													1304985600,
													1305072000,
													1305158400,
													1305244800,
													1305331200,
													1305417600,
													1305504000,
													1305590400,
													1305676800,
													1305763200,
													1305849600,
													1305936000,
													1306022400,
													1306108800,
													1306195200,
													1306281600,
													1306368000,
													1306454400,
													1306540800,
													1306627200,
													1306713600,
													1306800000,
													1306886400,
													1306972800,
													1307059200,
													1307145600,
													1307232000,
													1307318400,
													1307404800,
													1307491200,
													1307577600,
													1307664000,
													1307750400,
													1307836800,
													1307923200,
													1308009600,
													1308096000,
													1308182400,
													1308268800,
													1308355200,
													1308441600,
													1308528000,
													1308614400,
													1308700800,
													1308787200,
													1308873600,
													1308960000,
													1309046400,
													1309132800,
													1309219200,
													1309305600,
													1309392000,
													1309478400,
													1309564800,
													1309651200,
													1309737600,
													1309824000,
													1309910400,
													1309996800,
													1310083200,
													1310169600,
													1310256000,
													1310342400,
													1310428800,
													1310515200,
													1310601600,
													1310688000,
													1310774400,
													1310860800,
													1310947200,
													1311033600,
													1311120000,
													1311206400,
													1311292800,
													1311379200,
													1311465600,
													1311552000,
													1311638400,
													1311724800,
													1311811200,
													1311897600,
													1311984000,
													1312070400,
													1312156800,
													1312243200,
													1312329600,
													1312416000,
													1312502400,
													1312588800,
													1312675200,
													1312761600,
													1312848000,
													1312934400,
													1313020800,
													1313107200,
													1313193600,
													1313280000,
													1313366400,
													1313452800,
													1313539200,
													1313625600,
													1313712000,
													1313798400,
													1313884800,
													1313971200,
													1314057600,
													1314144000,
													1314230400,
													1314316800,
													1314403200,
													1314489600,
													1314576000,
													1314662400,
													1314748800,
													1314835200,
													1314921600,
													1315008000,
													1315094400,
													1315180800,
													1315267200,
													1315353600,
													1315440000,
													1315526400,
													1315612800,
													1315699200,
													1315785600,
													1315872000,
													1315958400,
													1316044800,
													1316131200,
													1316217600,
													1316304000,
													1316390400,
													1316476800,
													1316563200,
													1316649600,
													1316736000,
													1316822400,
													1316908800,
													1316995200,
													1317081600,
													1317168000,
													1317254400,
													1317340800,
													1317427200,
													1317513600,
													1317600000,
													1317686400,
													1317772800,
													1317859200,
													1317945600,
													1318032000,
													1318118400,
													1318204800,
													1318291200,
													1318377600,
													1318464000,
													1318550400,
													1318636800,
													1318723200,
													1318809600,
													1318896000,
													1318982400,
													1319068800,
													1319155200,
													1319241600,
													1319328000,
													1319414400,
													1319500800,
													1319587200,
													1319673600,
													1319760000,
													1319846400,
													1319932800,
													1320019200,
													1320105600,
													1320192000,
													1320278400,
													1320364800,
													1320451200,
													1320537600,
													1320624000,
													1320710400,
													1320796800,
													1320883200,
													1320969600,
													1321056000,
													1321142400,
													1321228800,
													1321315200,
													1321401600,
													1321488000,
													1321574400,
													1321660800,
													1321747200,
													1321833600,
													1321920000,
													1322006400,
													1322092800,
													1322179200,
													1322265600,
													1322352000,
													1322438400,
													1322524800,
													1322611200,
													1322697600,
													1322784000,
													1322870400,
													1322956800,
													1323043200,
													1323129600,
													1323216000,
													1323302400,
													1323388800,
													1323475200,
													1323561600,
													1323648000,
													1323734400,
													1323820800,
													1323907200,
													1323993600,
													1324080000,
													1324166400,
													1324252800,
													1324339200,
													1324425600,
													1324512000,
													1324598400,
													1324684800,
													1324771200,
													1324857600,
													1324944000,
													1325030400,
													1325116800,
													1325203200,
													1325289600,
													1325376000,
													1325462400,
													1325548800,
													1325635200,
													1325721600,
													1325808000,
													1325894400,
													1325980800,
													1326067200,
													1326153600,
													1326240000,
													1326326400,
													1326412800,
													1326499200,
													1326585600,
													1326672000,
													1326758400,
													1326844800,
													1326931200,
													1327017600,
													1327104000,
													1327190400,
													1327276800,
													1327363200,
													1327449600,
													1327536000,
													1327622400,
													1327708800,
													1327795200,
													1327881600,
													1327968000,
													1328054400,
													1328140800,
													1328227200,
													1328313600,
													1328400000,
													1328486400,
													1328572800,
													1328659200,
													1328745600,
													1328832000,
													1328918400,
													1329004800,
													1329091200,
													1329177600,
													1329264000,
													1329350400,
													1329436800,
													1329523200,
													1329609600,
													1329696000,
													1329782400,
													1329868800,
													1329955200,
													1330041600,
													1330128000,
													1330214400,
													1330300800,
													1330387200,
													1330473600,
													1330560000,
													1330646400,
													1330732800,
													1330819200,
													1330905600,
													1330992000,
													1331078400,
													1331164800,
													1331251200,
													1331337600,
													1331424000,
													1331510400,
													1331596800,
													1331683200,
													1331769600,
													1331856000,
													1331942400,
													1332028800,
													1332115200,
													1332201600,
													1332288000,
													1332374400,
													1332460800,
													1332547200,
													1332633600,
													1332720000,
													1332806400,
													1332892800,
													1332979200,
													1333065600,
													1333152000,
													1333238400,
													1333324800,
													1333411200,
													1333497600,
													1333584000,
													1333670400,
													1333756800,
													1333843200,
													1333929600,
													1334016000,
													1334102400,
													1334188800,
													1334275200,
													1334361600,
													1334448000,
													1334534400,
													1334620800,
													1334707200,
													1334793600,
													1334880000,
													1334966400,
													1335052800,
													1335139200,
													1335225600,
													1335312000,
													1335398400,
													1335484800,
													1335571200,
													1335657600,
													1335744000,
													1335830400,
													1335916800,
													1336003200,
													1336089600,
													1336176000,
													1336262400,
													1336348800,
													1336435200,
													1336521600,
													1336608000,
													1336694400,
													1336780800,
													1336867200,
													1336953600,
													1337040000,
													1337126400,
													1337212800,
													1337299200,
													1337385600,
													1337472000,
													1337558400,
													1337644800,
													1337731200,
													1337817600,
													1337904000,
													1337990400,
													1338076800,
													1338163200,
													1338249600,
													1338336000,
													1338422400,
													1338508800,
													1338595200,
													1338681600,
													1338768000,
													1338854400,
													1338940800,
													1339027200,
													1339113600,
													1339200000,
													1339286400,
													1339372800,
													1339459200,
													1339545600,
													1339632000,
													1339718400,
													1339804800,
													1339891200,
													1339977600,
													1340064000,
													1340150400,
													1340236800,
													1340323200,
													1340409600,
													1340496000,
													1340582400,
													1340668800,
													1340755200,
													1340841600,
													1340928000,
													1341014400,
													1341100800,
													1341187200,
													1341273600,
													1341360000,
													1341446400,
													1341532800,
													1341619200,
													1341705600,
													1341792000,
													1341878400,
													1341964800,
													1342051200,
													1342137600,
													1342224000,
													1342310400,
													1342396800,
													1342483200,
													1342569600,
													1342656000,
													1342742400,
													1342828999,
													1342915200,
													1343001600,
													1343088000,
													1343174400,
													1343260800,
													1343347200,
													1343433600,
													1343520000,
													1343606400,
													1343692800,
													1343779200,
													1343865600,
													1343952000,
													1344038400,
													1344124800,
													1344211200,
													1344470400,
													1344556800,
													1344643200,
													1344729600,
													1344816000,
													1344902400,
													1344988800,
													1345075200,
													1345161600,
													1345248000
												],
												"unitDimensions": "0 0 1 0 0 0 0",
												"defaultValue": "{mktime {int {date {now}}}}"
											},
											{
												"name": "MinT",
												"displayUnit": "degC",
												"format": "%.1f",
												"nValues": [
													276.25,
													271.25,
													271.55,
													268.15,
													278.25,
													278.25,
													275.25,
													275.65,
													278.25,
													281.25,
													281.65,
													284.25,
													281.25,
													281.25,
													273.15,
													280.25,
													-12047.85,
													-12047.85,
													277.75,
													273.15,
													275.25,
													278.25,
													268.15,
													278.25,
													277.65,
													279.25,
													277.75,
													278.25,
													280.25,
													280.25,
													281.35,
													280.25,
													268.05,
													271.55,
													268.05,
													282.25,
													285.25,
													285.25,
													-12047.85,
													277.25,
													282.25,
													282.25,
													281.25,
													281.25,
													287.25,
													281.25,
													283.25,
													282.25,
													281.25,
													286.25,
													281.25,
													281.25,
													281.25,
													286.25,
													281.25,
													281.25,
													287.25,
													281.25,
													281.25,
													281.35,
													281.75,
													289.25,
													281.25,
													281.85,
													281.25,
													285.25,
													282.25,
													281.25,
													282.25,
													280.25,
													281.25,
													281.25,
													281.25,
													282.25,
													281.35,
													281.25,
													284.25,
													-12047.85,
													280.45,
													275.25,
													275.25,
													280.25,
													280.25,
													277.75,
													281.35,
													281.35,
													-12047.85,
													280.35,
													284.25,
													281.25,
													276.25,
													277.25,
													279.25,
													279.25,
													281.45,
													279.25,
													275.25,
													276.25,
													274.65,
													277.95,
													281.75,
													274.85,
													280.25,
													282.25,
													279.25,
													277.85,
													-12047.85,
													274.25,
													275.25,
													273.25,
													274.25,
													276.25,
													271.55,
													271.25,
													273.25,
													273.25,
													276.25,
													273.25,
													274.25,
													271.65,
													275.25,
													275.75,
													266.45,
													271.25,
													271.25,
													275.65,
													272.25,
													274.05,
													277.25,
													277.25,
													275.75,
													276.05,
													271.65,
													271.65,
													271.65,
													266.65,
													273.25,
													278.25,
													275.25,
													275.25,
													277.25,
													271.75,
													271.75,
													271.25,
													270.35,
													271.25,
													267.15,
													275.25,
													275.25,
													271.25,
													272.05,
													273.25,
													275.25,
													277.25,
													265.45,
													264.85,
													264.85,
													265.25,
													270.25,
													272.25,
													265.15,
													270.25,
													264.85,
													265.25,
													275.25,
													264.85,
													264.45,
													269.25,
													265.95,
													266.05,
													275.25,
													272.35,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													273.15,
													258.25,
													258.25,
													-12047.85,
													-12047.85,
													-12047.85,
													261.85,
													259.75,
													251.25,
													251.25,
													257.25,
													255.75,
													271.75,
													274.25,
													270.25,
													264.25,
													256.25,
													254.25,
													256.25,
													255.65,
													259.25,
													262.25,
													259.75,
													261.25,
													265.25,
													266.15,
													266.15,
													266.15,
													272.15,
													258.85,
													255.65,
													258.25,
													266.15,
													264.85,
													264.65,
													250.85,
													261.25,
													264.25,
													264.25,
													267.25,
													259.25,
													250.95,
													259.25,
													264.25,
													271.75,
													265.45,
													265.45,
													264.25,
													264.65,
													264.65,
													268.25,
													271.25,
													271.25,
													271.25,
													266.05,
													253.25,
													252.25,
													261.95,
													258.95,
													259.55,
													245.25,
													245.25,
													254.25,
													251.25,
													250.25,
													250.25,
													264.25,
													250.85,
													247.25,
													247.25,
													259.25,
													264.25,
													264.25,
													258.85,
													262.25,
													250.95,
													267.25,
													264.25,
													264.25,
													257.25,
													256.25,
													259.25,
													271.25,
													272.25,
													266.15,
													265.55,
													270.25,
													261.25,
													250.85,
													259.25,
													260.25,
													260.25,
													261.25,
													262.25,
													261.95,
													265.35,
													264.25,
													271.25,
													275.25,
													271.25,
													273.25,
													270.65,
													270.25,
													269.25,
													265.45,
													266.15,
													265.35,
													-12047.85,
													266.15,
													268.25,
													266.75,
													271.25,
													265.25,
													266.15,
													266.15,
													271.25,
													271.25,
													271.85,
													265.25,
													265.25,
													265.45,
													265.45,
													264.25,
													265.25,
													261.25,
													250.95,
													261.85,
													267.75,
													269.25,
													264.65,
													-12047.85,
													-12047.85,
													250.55,
													264.35,
													266.25,
													272.25,
													271.25,
													271.75,
													271.25,
													267.25,
													266.15,
													266.15,
													268.25,
													270.25,
													271.25,
													271.65,
													270.25,
													265.55,
													273.25,
													266.65,
													263.25,
													264.25,
													266.05,
													266.05,
													269.25,
													272.25,
													267.25,
													265.95,
													270.25,
													272.25,
													271.25,
													269.25,
													269.25,
													265.95,
													271.25,
													272.25,
													272.15,
													271.25,
													271.65,
													274.65,
													271.25,
													274.25,
													271.65,
													275.25,
													275.75,
													271.65,
													271.65,
													276.25,
													277.65,
													274.75,
													281.45,
													274.65,
													274.75,
													274.55,
													280.25,
													278.25,
													279.25,
													274.95,
													277.85,
													275.25,
													266.45,
													-12047.85,
													274.85,
													281.55,
													279.25,
													279.85,
													277.25,
													277.25,
													274.85,
													279.75,
													274.75,
													277.25,
													274.25,
													273.25,
													276.25,
													279.85,
													271.65,
													276.25,
													275.65,
													277.75,
													275.05,
													275.65,
													280.25,
													280.25,
													280.25,
													280.25,
													278.25,
													278.25,
													277.25,
													277.95,
													280.55,
													281.45,
													286.25,
													281.45,
													281.45,
													281.55,
													281.45,
													286.25,
													280.25,
													277.85,
													280.55,
													288.25,
													277.25,
													274.75,
													280.05,
													281.25,
													-12047.85,
													281.25,
													279.95,
													279.25,
													280.55,
													280.05,
													280.25,
													283.25,
													281.45,
													281.45,
													280.05,
													280.25,
													280.25,
													281.45,
													280.05,
													280.25,
													275.65,
													277.85,
													281.55,
													280.25,
													277.25,
													279.85,
													277.95,
													281.55,
													-12047.85,
													-12047.85,
													-12047.85,
													280.55,
													279.25,
													280.25,
													281.25,
													281.25,
													280.25,
													281.55,
													281.55,
													288.25,
													285.25,
													282.25,
													277.45,
													277.25,
													279.85,
													280.35,
													280.25,
													277.55,
													274.85,
													-12047.85,
													281.65,
													282.25,
													279.25,
													275.75,
													277.25,
													275.25,
													275.25,
													277.25,
													277.25,
													271.25,
													-12047.85,
													275.25,
													273.25,
													273.25,
													275.25,
													271.75,
													-12047.85,
													-12047.85,
													275.25,
													-12047.85,
													274.75,
													-12047.85,
													280.25,
													-12047.85,
													275.75,
													272.15,
													272.25,
													274.75,
													271.75,
													271.75,
													272.25,
													273.25,
													274.25,
													-12047.85,
													275.65,
													280.25,
													274.95,
													274.25,
													-12047.85,
													275.65,
													-12047.85,
													-12047.85,
													269.65,
													264.25,
													266.15,
													271.45,
													268.45,
													268.25,
													-12047.85,
													280.15,
													271.25,
													271.25,
													271.85,
													266.15,
													264.25,
													264.25,
													266.95,
													264.65,
													264.65,
													266.25,
													267.25,
													268.25,
													271.85,
													273.25,
													276.25,
													274.85,
													-12047.85,
													270.25,
													268.35,
													268.25,
													271.25,
													273.25,
													275.85,
													275.25,
													271.95,
													275.25,
													266.25,
													267.25,
													274.75,
													276.25,
													274.65,
													264.35,
													264.35,
													264.45,
													272.05,
													269.25,
													264.65,
													264.45,
													264.85,
													263.25,
													263.25,
													266.25,
													270.35,
													270.35,
													270.25,
													266.25,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													270.25,
													-12047.85,
													258.25,
													249.25,
													248.25,
													245.25,
													245.25,
													256.25,
													251.25,
													244.25,
													243.25,
													248.25,
													253.25,
													255.25,
													251.15,
													260.25,
													259.85,
													264.85,
													264.25,
													264.65,
													261.85,
													264.65,
													262.35,
													246.35,
													246.25,
													254.25,
													264.25,
													271.25,
													271.85,
													271.85,
													271.85,
													271.35,
													264.25,
													-12047.85,
													271.85,
													266.15,
													269.25,
													271.25,
													268.25,
													264.65,
													250.95,
													250.95,
													251.05,
													256.65,
													254.25,
													252.25,
													247.25,
													247.25,
													249.25,
													261.25,
													270.25,
													271.25,
													264.25,
													264.25,
													269.25,
													268.25,
													271.25,
													264.35,
													268.25,
													265.25,
													250.85,
													263.25,
													250.95,
													272.15,
													264.25,
													264.25,
													261.95,
													261.95,
													-12047.85,
													-12047.85,
													264.25,
													266.25,
													261.85,
													261.85,
													263.25,
													271.85,
													258.65,
													256.05,
													257.25,
													260.25,
													264.25,
													268.25,
													271.85,
													272.25,
													270.85,
													252.25,
													252.25,
													259.75,
													255.15,
													251.25,
													251.25,
													251.25,
													251.05,
													264.25,
													272.25,
													271.25,
													270.25,
													264.25,
													267.45,
													271.85,
													271.85,
													271.25,
													271.35,
													271.85,
													271.25,
													250.85,
													263.25,
													271.35,
													271.25,
													264.25,
													264.25,
													271.25,
													264.25,
													269.25,
													267.25,
													266.15,
													266.15,
													269.25,
													270.25,
													271.25,
													271.25,
													266.05,
													270.25,
													271.75,
													272.25,
													271.75,
													266.05,
													269.25,
													269.25,
													271.25,
													274.25,
													271.65,
													275.95,
													268.25,
													-12047.85,
													265.05,
													270.25,
													271.25,
													271.25,
													272.15,
													266.05,
													271.25,
													270.25,
													271.25,
													276.25,
													275.35,
													275.25,
													273.25,
													272.25,
													273.25,
													271.25,
													271.25,
													275.25,
													274.25,
													271.75,
													266.75,
													272.25,
													277.25,
													277.45,
													277.75,
													275.25,
													271.65,
													271.65,
													277.25,
													277.75,
													277.75,
													276.25,
													277.95,
													277.25,
													266.55,
													274.95,
													280.25,
													280.15,
													273.25,
													276.25,
													277.75,
													281.25,
													274.75,
													274.25,
													277.25,
													274.55,
													271.25,
													273.25,
													277.25,
													281.25,
													281.25,
													280.25,
													281.55,
													280.25,
													281.25,
													280.25,
													282.25,
													280.25,
													279.25,
													274.75,
													275.75,
													277.85,
													282.25,
													275.25,
													278.25,
													274.75,
													274.75,
													274.75,
													277.95,
													280.25,
													-12047.85,
													284.25,
													289.25,
													280.25,
													277.25,
													277.95,
													-12047.85,
													277.65,
													281.25,
													281.55,
													281.85,
													280.25,
													280.25,
													281.25,
													282.25,
													285.25,
													281.25,
													281.25,
													281.25,
													281.55,
													281.55,
													281.55,
													281.55,
													284.25,
													281.35,
													281.25,
													279.25,
													281.25,
													281.55,
													281.55,
													281.55,
													286.25,
													280.25,
													281.55,
													281.55,
													280.25,
													281.55,
													284.25,
													-12047.85,
													281.55,
													281.65,
													280.25,
													-12047.85,
													-12047.85,
													280.25,
													-12047.85,
													280.25,
													280.25,
													281.55,
													281.55,
													-12047.85,
													278.25,
													276.25,
													277.25,
													-12047.85,
													275.75,
													277.25,
													280.25,
													281.25,
													281.55,
													280.25,
													280.55,
													281.65,
													274.85,
													281.25,
													280.25,
													-12047.85,
													275.75,
													277.25,
													274.85,
													274.75,
													276.25,
													274.85,
													277.25,
													274.75,
													280.25,
													-12047.85,
													274.85,
													276.25,
													270.25,
													271.25,
													274.25,
													277.25,
													277.95,
													278.25,
													271.75,
													271.75,
													274.25,
													275.25,
													-12047.85,
													274.85,
													271.85,
													276.25,
													275.25,
													269.25,
													269.25,
													266.15,
													265.25,
													259.75,
													258.85,
													257.25,
													258.35,
													264.35,
													270.25,
													271.25,
													271.85,
													-12047.85,
													-12047.85,
													-12047.85,
													275.25,
													275.25,
													275.25,
													275.25,
													267.25,
													264.35,
													272.25,
													264.25,
													270.25,
													272.25,
													271.25,
													270.25,
													266.05,
													-12047.85,
													266.15,
													264.35,
													268.25,
													272.25,
													272.25,
													272.25,
													272.25,
													270.25,
													264.25,
													264.25,
													264.35,
													269.25,
													270.25,
													274.25,
													274.25,
													272.25,
													270.25,
													266.15,
													269.25,
													264.25,
													271.85,
													271.85,
													271.25,
													271.25,
													266.15,
													268.25,
													271.85,
													266.25,
													250.85,
													255.25,
													255.25,
													259.85,
													258.25,
													252.25,
													246.25,
													246.25,
													253.25,
													249.35,
													261.75,
													254.25,
													249.25,
													250.25,
													249.85,
													264.35,
													271.85,
													271.85,
													264.25,
													268.25,
													267.25,
													260.25,
													252.25,
													253.25,
													248.25,
													248.25,
													250.25,
													253.25,
													249.35,
													249.35,
													259.85,
													262.15,
													270.25,
													270.25,
													264.25,
													251.05,
													246.25,
													246.25,
													251.25,
													262.35,
													-12047.85,
													270.25,
													272.25,
													273.25,
													271.85,
													270.35,
													268.25,
													268.25,
													264.25,
													264.35,
													264.25,
													264.25,
													265.25,
													265.25,
													264.35,
													260.55,
													259.25,
													259.55,
													258.85,
													264.35,
													264.35,
													264.35,
													268.25,
													271.75,
													271.25,
													266.25,
													264.35,
													270.25,
													270.45,
													264.35,
													264.35,
													270.25,
													271.25,
													271.95,
													270.25,
													271.85,
													271.85,
													270.25,
													270.25,
													264.65,
													264.25,
													250.95,
													251.05,
													262.25,
													264.25,
													268.25,
													271.35,
													270.25,
													268.25,
													268.25,
													268.25,
													264.25,
													264.25,
													267.25,
													267.25,
													264.65,
													267.25,
													264.25,
													269.25,
													264.25,
													271.25,
													273.25,
													269.95,
													264.25,
													264.35,
													269.25,
													267.25,
													264.25,
													264.65,
													264.35,
													266.35,
													264.25,
													270.25,
													264.25,
													270.25,
													274.25,
													270.25,
													271.25,
													271.25,
													271.85,
													270.25,
													271.25,
													272.25,
													268.25,
													264.65,
													269.25,
													271.85,
													272.25,
													266.15,
													264.65,
													269.25,
													272.15,
													271.25,
													266.25,
													-12047.85,
													-12047.85,
													270.45,
													272.25,
													272.25,
													273.25,
													-12047.85,
													274.25,
													274.95,
													274.75,
													271.25,
													266.05,
													266.05,
													-12047.85,
													271.75,
													270.25,
													271.25,
													271.25,
													274.85,
													271.75,
													272.25,
													271.25,
													271.85,
													271.25,
													271.75,
													265.25,
													271.75,
													271.25,
													272.25,
													274.25,
													271.75,
													277.25,
													266.65,
													280.25,
													-12047.85,
													-12047.85,
													271.75,
													270.25,
													271.25,
													271.25,
													271.75,
													275.75,
													279.25,
													-12047.85,
													274.75,
													-12047.85,
													-12047.85,
													277.25,
													274.95,
													279.25,
													-12047.85,
													276.25,
													274.75,
													278.25,
													277.25,
													274.35,
													-12047.85,
													275.75,
													275.25,
													275.75,
													280.25,
													275.75,
													277.75,
													279.25,
													-12047.85,
													274.65,
													-12047.85,
													281.65,
													280.25,
													277.65,
													280.25,
													280.25,
													-12047.85,
													-12047.85,
													-12047.85,
													281.25,
													281.55,
													277.25,
													280.25,
													274.85,
													-12047.85,
													277.25,
													274.55,
													278.25,
													-12047.85,
													-12047.85,
													281.65,
													284.25,
													281.65,
													274.75,
													277.25,
													-12047.85,
													280.25,
													280.25,
													280.55,
													281.65,
													277.25,
													-12047.85,
													-12047.85,
													275.05,
													281.25,
													283.25,
													283.25,
													285.25,
													285.25,
													281.65,
													283.25,
													281.65,
													281.65,
													282.25,
													281.65,
													280.25,
													283.25,
													284.25,
													281.65,
													283.35,
													281.75,
													280.25,
													282.25,
													281.25,
													280.25,
													-12047.85,
													279.25,
													-12047.85,
													-12047.85,
													280.25,
													281.65,
													281.25,
													278.25,
													-12047.85,
													276.25,
													276.25,
													276.25,
													274.95,
													-12047.85,
													274.65,
													-12047.85,
													277.25,
													275.25,
													276.25,
													271.85,
													-12047.85,
													-12047.85,
													279.25,
													274.85,
													276.25,
													277.25,
													280.25,
													277.65,
													280.25,
													275.85,
													277.95,
													277.25,
													276.25,
													277.25,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													271.85,
													272.15,
													273.25,
													264.25,
													264.35,
													267.25,
													269.25,
													271.25,
													270.35,
													270.25,
													272.25,
													272.05,
													272.05,
													273.25,
													272.15,
													271.25,
													271.25,
													272.25,
													270.25,
													277.25,
													-12047.85,
													-12047.85,
													268.25,
													269.25,
													277.65,
													-12047.85,
													274.25,
													-12047.85,
													267.25,
													264.25,
													268.25,
													271.25,
													272.25,
													271.25,
													271.25,
													264.65,
													-12047.85,
													-12047.85,
													258.25,
													252.25,
													253.25,
													252.25,
													-12047.85,
													-12047.85,
													-12047.85,
													265.35,
													264.35,
													264.35,
													266.25,
													267.85,
													269.25,
													261.95,
													263.25,
													258.25,
													251.25,
													252.25,
													258.25,
													269.25,
													270.25,
													264.35,
													264.35,
													-12047.85,
													271.95,
													270.25,
													266.25,
													261.25,
													255.25,
													249.35,
													257.25,
													257.25,
													257.25,
													249.45,
													259.25,
													257.25,
													257.25,
													258.25,
													264.35,
													264.35,
													257.25,
													246.25,
													247.25,
													253.25,
													258.25,
													260.25,
													261.25,
													264.45,
													272.25,
													270.25,
													259.55,
													254.25,
													246.25,
													246.25,
													255.25,
													264.45,
													274.25,
													271.95,
													272.25,
													272.25,
													259.25,
													258.95,
													268.25,
													266.25,
													266.25,
													-12047.85,
													264.25,
													271.25,
													271.25,
													272.25,
													271.25,
													-12047.85,
													247.25,
													245.25,
													245.25,
													250.25,
													257.25,
													264.55,
													267.25,
													264.35,
													260.25,
													255.25,
													254.25,
													264.75,
													271.95,
													272.25,
													264.35,
													270.25,
													271.25,
													266.25,
													261.25,
													253.25,
													255.25,
													260.25,
													266.25,
													259.25,
													253.25,
													242.25,
													243.35,
													256.25,
													261.35,
													254.25,
													254.25,
													258.25,
													270.25,
													267.85,
													261.75,
													259.55,
													258.85,
													270.25,
													270.35,
													271.95,
													264.35,
													269.25,
													271.95,
													272.35,
													271.95,
													270.25,
													268.25,
													268.25,
													270.25,
													264.35,
													264.35,
													270.25,
													269.25,
													270.35,
													270.25,
													264.35,
													270.25,
													271.25,
													271.85,
													271.95,
													-12047.85,
													272.25,
													264.55,
													267.25,
													270.25,
													270.25,
													270.25,
													264.35,
													266.25,
													268.25,
													271.95,
													270.25,
													264.35,
													271.25,
													271.95,
													272.25,
													271.25,
													266.25,
													264.35,
													264.35,
													271.25,
													270.25,
													264.25,
													269.25,
													271.25,
													274.25,
													271.85,
													271.85,
													271.95,
													264.25,
													264.25,
													270.35,
													275.25,
													272.25,
													274.45,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													273.15,
													275.15,
													280.15,
													279.15,
													274.15,
													271.15,
													274.15,
													278.15,
													-12047.85,
													-12047.85,
													-12047.85,
													279.15,
													279.15,
													280.15,
													274.15,
													275.15,
													273.15,
													273.15,
													274.15,
													276.15,
													276.15,
													278.15,
													277.15,
													276.15,
													279.15,
													281.15,
													281.15,
													280.15,
													281.15,
													280.15,
													279.15,
													278.15,
													281.15,
													280.15,
													280.15,
													280.15,
													281.15,
													282.15,
													282.15,
													281.15,
													-12047.85,
													-12047.85,
													284.15,
													278.15,
													275.15,
													278.15,
													281.15,
													281.15,
													-12047.85,
													283.15,
													277.15,
													279.15,
													281.15,
													278.15,
													280.15,
													283.15,
													285.15,
													281.15,
													277.15,
													279.15,
													281.15,
													286.15,
													283.15,
													282.15,
													278.15,
													278.15,
													284.15,
													286.15,
													284.15,
													281.15,
													282.15,
													279.15,
													278.15,
													278.15,
													283.15,
													284.15,
													279.15,
													280.15,
													279.15,
													282.15,
													286.15,
													279.15,
													279.15,
													281.15,
													281.15,
													282.15,
													282.15,
													283.15,
													281.15,
													280.15,
													280.15,
													280.15,
													280.15,
													281.15,
													280.15,
													278.15,
													278.15,
													278.15,
													276.15,
													276.15,
													276.15,
													278.15,
													285.15,
													282.15,
													282.15,
													281.15,
													281.15,
													281.15,
													281.15,
													281.15,
													283.15,
													279.15,
													279.15,
													273.15,
													273.15,
													274.15,
													276.15,
													277.15,
													277.15,
													277.15,
													277.15,
													277.15,
													277.15,
													282.15,
													281.15,
													278.15,
													278.15,
													281.15,
													279.15,
													282.15,
													272.15,
													272.15,
													278.15,
													279.15,
													284.15,
													278.15,
													278.15,
													283.15,
													280.15,
													272.15,
													272.15,
													273.15,
													280.15,
													277.15,
													277.15,
													275.15,
													277.15,
													279.15,
													278.15,
													276.15,
													276.15,
													276.15,
													277.15,
													273.15,
													271.15,
													271.15,
													-12047.85,
													-12047.85,
													270.15,
													270.15,
													270.15,
													275.15,
													275.15,
													279.15,
													269.15,
													269.15,
													267.15,
													269.15,
													268.15,
													270.15,
													275.15,
													274.15,
													268.15,
													268.15,
													268.15,
													269.15,
													269.15,
													265.15,
													265.15,
													271.15,
													270.15,
													270.15,
													275.15,
													273.15,
													272.15,
													272.15,
													262.15,
													259.15,
													259.15,
													264.15,
													253.15,
													254.15,
													256.15,
													267.15,
													275.15,
													273.15,
													273.15,
													266.15,
													269.15,
													274.15,
													274.15,
													272.15,
													266.15,
													266.15,
													263.15,
													263.15,
													260.15,
													260.15,
													264.15,
													262.15,
													260.15,
													260.15,
													260.15,
													262.15,
													260.15,
													263.15,
													266.15,
													268.15,
													271.15,
													277.15,
													269.15,
													272.15,
													266.15,
													264.15,
													265.15,
													266.15,
													272.15,
													273.15,
													271.15,
													272.15,
													275.15,
													272.15,
													272.15,
													264.15,
													263.15,
													266.15,
													277.15,
													277.15,
													272.15,
													270.15,
													270.15,
													273.15,
													273.15,
													261.15,
													260.15,
													260.15,
													263.15,
													263.15,
													255.15,
													251.15,
													246.15,
													247.15,
													255.15,
													258.15,
													265.15,
													268.15,
													265.15,
													267.15,
													272.15,
													266.15,
													267.15,
													269.15,
													273.15,
													274.15,
													272.15,
													271.15,
													268.15,
													-12047.85,
													-12047.85,
													260.15,
													260.15,
													256.15,
													256.15,
													267.15,
													268.15,
													268.15,
													270.15,
													266.15,
													258.15,
													258.15,
													263.15,
													269.15,
													271.15,
													270.15,
													270.15,
													273.15,
													264.15,
													263.15,
													264.15,
													265.15,
													258.15,
													257.15,
													258.15,
													262.15,
													262.15,
													264.15,
													274.15,
													276.15,
													269.15,
													265.15,
													267.15,
													270.15,
													274.15,
													274.15,
													272.15,
													272.15,
													270.15,
													271.15,
													273.15,
													271.15,
													269.15,
													269.15,
													269.15,
													-12047.85,
													271.15,
													270.15,
													271.15,
													269.15,
													270.15,
													273.15,
													273.15,
													273.15,
													274.15,
													274.15,
													274.15,
													273.15,
													268.15,
													269.15,
													271.15,
													267.15,
													269.15,
													267.15,
													268.15,
													272.15,
													275.15,
													276.15,
													278.15,
													272.15,
													272.15,
													273.15,
													274.15,
													274.15,
													272.15,
													273.15,
													272.15,
													273.15,
													273.15,
													273.15,
													278.15,
													-12047.85,
													-12047.85,
													271.15,
													272.15,
													272.15,
													-12047.85,
													275.15,
													271.15,
													274.15,
													276.15,
													272.15,
													272.15,
													274.15,
													279.15,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													279.15,
													278.15,
													283.15,
													279.15,
													276.15,
													278.15,
													284.15,
													281.15,
													281.15,
													282.15,
													279.15,
													281.15,
													286.15,
													286.15,
													281.15,
													281.15,
													279.15,
													276.15,
													280.15,
													283.15,
													286.15,
													282.15,
													284.15,
													281.15,
													277.15,
													278.15,
													282.15,
													285.15,
													285.15,
													285.15,
													283.15,
													285.15,
													288.15,
													288.15,
													288.15,
													286.15,
													287.15,
													286.15,
													286.15,
													288.15,
													287.15,
													282.15,
													285.15,
													285.15,
													279.15,
													284.15,
													283.15,
													283.15,
													281.15,
													282.15,
													291.15,
													281.15,
													282.15,
													279.15,
													279.15,
													282.15,
													285.15,
													283.15,
													280.15,
													281.15,
													284.15,
													281.15,
													282.15,
													284.15,
													277.15,
													279.15,
													280.15
												],
												"unitDimensions": "0 0 0 0 1 0 0",
												"defaultValue": "EmptyT"
											},
											{
												"name": "MaxT",
												"displayUnit": "degC",
												"format": "%.1f",
												"nValues": [
													294.15,
													278.15,
													292.15,
													297.15,
													288.15,
													286.15,
													295.15,
													300.15,
													303.15,
													305.05,
													305.05,
													306.05,
													303.15,
													298.75,
													287.05,
													287.15,
													-12047.85,
													-12047.85,
													293.15,
													287.15,
													289.15,
													290.15,
													290.15,
													294.15,
													295.15,
													283.15,
													289.15,
													298.15,
													303.15,
													303.15,
													302.15,
													298.15,
													298.15,
													284.15,
													298.15,
													303.15,
													306.15,
													301.15,
													-12047.85,
													302.15,
													303.15,
													304.15,
													307.15,
													309.15,
													311.05,
													306.15,
													304.15,
													301.15,
													304.15,
													307.15,
													308.15,
													310.15,
													310.15,
													309.15,
													307.15,
													306.15,
													305.15,
													299.05,
													302.05,
													297.15,
													305.15,
													309.15,
													305.15,
													306.15,
													308.05,
													307.95,
													309.15,
													309.15,
													306.15,
													305.15,
													305.15,
													306.15,
													307.05,
													301.15,
													303.15,
													304.15,
													302.15,
													302.15,
													301.05,
													298.15,
													301.05,
													303.15,
													302.15,
													305.15,
													307.15,
													302.15,
													306.15,
													303.15,
													295.15,
													290.15,
													298.15,
													300.15,
													300.15,
													302.15,
													302.15,
													291.05,
													292.15,
													298.05,
													304.15,
													297.15,
													299.95,
													300.15,
													302.15,
													304.15,
													303.15,
													303.15,
													300.15,
													297.15,
													295.15,
													297.05,
													300.15,
													293.15,
													288.15,
													297.15,
													300.15,
													303.15,
													301.15,
													294.15,
													287.15,
													285.15,
													280.15,
													288.15,
													287.15,
													283.15,
													286.15,
													289.05,
													289.05,
													294.15,
													289.15,
													284.15,
													282.15,
													280.15,
													279.15,
													279.15,
													280.15,
													281.15,
													284.05,
													282.15,
													284.15,
													293.15,
													288.15,
													285.15,
													288.15,
													288.15,
													289.15,
													290.15,
													284.15,
													286.05,
													280.15,
													279.15,
													280.05,
													279.15,
													284.15,
													291.15,
													294.15,
													283.15,
													281.15,
													282.15,
													286.15,
													285.15,
													284.15,
													283.15,
													282.15,
													280.15,
													283.15,
													284.15,
													280.15,
													281.15,
													283.15,
													284.15,
													283.15,
													279.15,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													275.15,
													270.15,
													268.15,
													-12047.85,
													-12047.85,
													-12047.85,
													271.15,
													271.15,
													270.15,
													262.15,
													261.15,
													274.15,
													278.15,
													279.15,
													277.15,
													274.15,
													270.15,
													265.15,
													264.15,
													267.15,
													270.15,
													272.15,
													271.15,
													268.15,
													273.15,
													274.15,
													274.15,
													274.15,
													275.15,
													274.15,
													269.15,
													270.15,
													273.15,
													273.15,
													271.15,
													271.15,
													265.55,
													269.15,
													271.15,
													271.15,
													271.15,
													266.15,
													271.15,
													274.15,
													276.05,
													276.15,
													273.15,
													270.25,
													270.15,
													271.15,
													273.15,
													276.15,
													275.15,
													276.15,
													277.15,
													270.15,
													265.15,
													268.15,
													269.15,
													271.15,
													264.15,
													259.15,
													267.15,
													265.15,
													264.15,
													271.15,
													274.15,
													274.15,
													254.15,
													261.15,
													269.25,
													272.15,
													273.15,
													272.15,
													272.15,
													270.15,
													272.15,
													273.15,
													273.15,
													275.15,
													262.15,
													274.15,
													275.15,
													277.15,
													276.15,
													275.15,
													276.15,
													276.15,
													274.15,
													275.15,
													276.15,
													277.15,
													277.15,
													278.15,
													278.15,
													277.15,
													279.15,
													278.15,
													280.15,
													281.15,
													283.15,
													279.15,
													281.05,
													284.15,
													279.15,
													280.15,
													282.15,
													280.15,
													281.15,
													282.15,
													282.15,
													278.15,
													280.15,
													284.15,
													278.15,
													277.15,
													280.15,
													277.15,
													277.15,
													280.15,
													281.15,
													282.15,
													282.05,
													277.15,
													278.15,
													281.15,
													280.15,
													279.15,
													278.15,
													275.15,
													-12047.85,
													-12047.85,
													279.15,
													282.05,
													281.15,
													284.15,
													282.15,
													279.15,
													283.05,
													283.05,
													284.15,
													284.15,
													288.15,
													292.15,
													297.15,
													279.15,
													279.15,
													284.15,
													287.15,
													282.15,
													271.15,
													277.15,
													276.15,
													282.15,
													277.15,
													280.15,
													283.15,
													289.15,
													290.15,
													293.15,
													279.15,
													286.15,
													288.15,
													291.15,
													290.15,
													295.15,
													291.15,
													294.15,
													290.15,
													283.15,
													284.15,
													286.15,
													279.15,
													289.15,
													283.15,
													291.15,
													299.05,
													302.15,
													302.15,
													300.15,
													299.05,
													295.15,
													286.15,
													286.15,
													286.15,
													286.15,
													289.15,
													287.15,
													287.15,
													297.15,
													297.15,
													-12047.85,
													300.15,
													290.15,
													293.15,
													294.15,
													292.15,
													293.15,
													286.15,
													-12047.85,
													289.15,
													283.15,
													281.15,
													285.15,
													296.15,
													294.05,
													295.15,
													298.15,
													301.15,
													302.15,
													297.15,
													297.15,
													298.15,
													304.15,
													292.15,
													297.15,
													297.05,
													298.95,
													297.15,
													301.15,
													306.15,
													309.05,
													308.15,
													304.15,
													299.05,
													305.15,
													299.05,
													298.15,
													297.15,
													300.35,
													302.15,
													304.05,
													300.15,
													295.15,
													301.15,
													304.15,
													303.05,
													301.05,
													303.15,
													301.15,
													302.15,
													301.15,
													305.15,
													308.15,
													302.15,
													299.05,
													302.15,
													305.15,
													303.15,
													302.15,
													297.15,
													301.15,
													286.15,
													299.05,
													292.15,
													299.05,
													291.15,
													301.15,
													303.15,
													306.15,
													-12047.85,
													-12047.85,
													-12047.85,
													305.15,
													297.15,
													301.15,
													304.15,
													304.15,
													307.15,
													307.15,
													309.15,
													309.05,
													300.15,
													288.15,
													288.15,
													295.15,
													298.15,
													303.15,
													293.15,
													290.05,
													284.15,
													-12047.85,
													293.15,
													296.15,
													287.15,
													291.15,
													295.15,
													295.15,
													296.05,
													287.15,
													289.15,
													294.15,
													295.15,
													297.15,
													295.15,
													296.15,
													297.15,
													295.15,
													298.15,
													298.95,
													298.15,
													300.15,
													300.15,
													301.15,
													299.05,
													287.15,
													283.15,
													286.15,
													290.15,
													288.15,
													290.15,
													291.15,
													295.15,
													294.15,
													297.15,
													296.15,
													295.15,
													292.15,
													284.15,
													286.15,
													287.15,
													284.15,
													-12047.85,
													-12047.85,
													282.15,
													283.15,
													284.15,
													284.15,
													285.15,
													284.15,
													281.15,
													286.15,
													289.15,
													287.05,
													279.15,
													283.15,
													284.15,
													287.15,
													286.15,
													-12047.85,
													281.15,
													282.15,
													284.15,
													290.15,
													289.15,
													283.15,
													286.15,
													283.15,
													280.15,
													276.15,
													275.15,
													276.15,
													277.15,
													278.15,
													281.15,
													280.15,
													277.15,
													280.15,
													279.15,
													277.15,
													282.15,
													284.15,
													285.15,
													285.15,
													279.15,
													276.15,
													278.15,
													277.15,
													277.15,
													276.15,
													277.15,
													278.15,
													272.15,
													275.15,
													279.15,
													281.15,
													283.15,
													272.15,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													282.75,
													-12047.85,
													273.15,
													259.15,
													255.15,
													255.15,
													258.15,
													261.15,
													257.15,
													256.15,
													249.15,
													255.15,
													266.15,
													264.15,
													265.15,
													267.15,
													267.15,
													274.15,
													274.15,
													270.15,
													271.15,
													272.15,
													267.15,
													263.15,
													255.15,
													267.15,
													273.15,
													275.15,
													276.15,
													276.15,
													276.15,
													275.15,
													278.15,
													277.15,
													280.15,
													278.15,
													276.15,
													276.15,
													274.15,
													271.15,
													269.15,
													268.15,
													268.15,
													270.15,
													261.15,
													263.15,
													263.15,
													263.15,
													266.15,
													274.15,
													276.15,
													278.15,
													274.15,
													274.15,
													277.15,
													280.15,
													283.15,
													282.15,
													277.15,
													277.15,
													277.15,
													277.15,
													273.15,
													273.05,
													273.15,
													272.15,
													272.15,
													273.15,
													277.15,
													-12047.85,
													278.15,
													277.15,
													279.15,
													280.15,
													279.15,
													277.15,
													275.15,
													264.15,
													268.15,
													273.15,
													277.15,
													277.15,
													277.15,
													277.15,
													279.15,
													273.15,
													274.15,
													270.15,
													266.15,
													261.15,
													264.15,
													272.15,
													276.15,
													283.15,
													275.15,
													275.15,
													275.15,
													276.15,
													280.15,
													279.15,
													284.15,
													286.15,
													282.15,
													285.15,
													279.15,
													277.15,
													281.15,
													284.15,
													280.15,
													277.15,
													278.15,
													279.15,
													278.15,
													279.15,
													282.15,
													285.15,
													288.15,
													290.15,
													293.15,
													293.15,
													290.15,
													291.15,
													291.15,
													283.15,
													282.15,
													283.15,
													282.05,
													289.15,
													290.15,
													289.15,
													290.15,
													295.15,
													299.05,
													287.05,
													-12047.85,
													283.15,
													282.15,
													286.15,
													277.15,
													279.15,
													280.15,
													287.15,
													291.15,
													295.15,
													286.05,
													289.15,
													283.15,
													286.15,
													277.15,
													289.15,
													291.15,
													294.15,
													290.15,
													281.15,
													284.15,
													284.15,
													291.15,
													296.15,
													298.15,
													302.15,
													288.15,
													284.15,
													291.15,
													295.15,
													299.05,
													301.15,
													293.15,
													294.15,
													295.15,
													299.05,
													303.15,
													303.15,
													301.15,
													291.15,
													298.15,
													302.15,
													304.15,
													293.15,
													287.05,
													291.15,
													287.15,
													286.15,
													298.15,
													301.15,
													304.15,
													303.15,
													303.15,
													301.15,
													298.95,
													296.15,
													298.15,
													291.15,
													295.15,
													300.15,
													281.15,
													292.15,
													298.15,
													293.15,
													295.05,
													299.05,
													299.05,
													302.15,
													302.15,
													300.15,
													303.15,
													-12047.85,
													306.15,
													302.05,
													290.15,
													291.15,
													293.15,
													297.15,
													300.15,
													304.15,
													302.15,
													291.15,
													297.15,
													301.15,
													304.15,
													306.15,
													306.15,
													304.15,
													303.25,
													306.15,
													307.15,
													306.15,
													301.15,
													305.25,
													298.15,
													301.15,
													295.15,
													295.15,
													303.15,
													301.15,
													306.15,
													304.15,
													303.15,
													292.15,
													294.15,
													299.05,
													298.95,
													302.15,
													301.15,
													-12047.85,
													301.15,
													291.15,
													285.15,
													288.15,
													294.15,
													294.15,
													298.15,
													302.15,
													302.15,
													304.05,
													304.15,
													302.15,
													302.15,
													301.15,
													302.05,
													301.15,
													302.15,
													303.15,
													303.15,
													304.05,
													303.15,
													304.05,
													305.15,
													297.15,
													298.15,
													298.95,
													289.15,
													283.15,
													290.15,
													292.15,
													298.15,
													298.15,
													300.15,
													302.15,
													302.15,
													302.15,
													303.15,
													291.15,
													299.05,
													298.05,
													289.15,
													291.15,
													298.15,
													300.15,
													301.15,
													301.15,
													299.25,
													294.15,
													293.15,
													290.15,
													289.15,
													284.15,
													278.15,
													280.15,
													280.15,
													284.15,
													284.15,
													280.15,
													281.15,
													275.15,
													272.15,
													272.15,
													276.15,
													276.15,
													274.15,
													282.15,
													279.15,
													-12047.85,
													-12047.85,
													-12047.85,
													283.15,
													280.15,
													286.05,
													280.15,
													285.15,
													280.15,
													275.15,
													278.15,
													276.15,
													274.15,
													281.15,
													280.15,
													281.15,
													-12047.85,
													281.15,
													277.15,
													284.15,
													282.15,
													275.15,
													274.15,
													279.15,
													278.15,
													275.15,
													275.15,
													274.15,
													273.15,
													275.15,
													281.15,
													282.15,
													277.15,
													274.15,
													276.15,
													274.15,
													275.15,
													276.15,
													278.15,
													277.15,
													280.15,
													276.15,
													275.15,
													277.15,
													278.15,
													272.15,
													268.15,
													264.15,
													266.15,
													270.15,
													262.15,
													260.15,
													256.15,
													262.15,
													265.15,
													268.15,
													267.15,
													256.15,
													256.15,
													266.15,
													274.15,
													276.15,
													276.15,
													276.15,
													273.15,
													274.15,
													273.15,
													263.15,
													259.55,
													262.15,
													259.15,
													260.15,
													263.15,
													265.15,
													269.15,
													263.15,
													275.15,
													277.15,
													274.15,
													272.15,
													268.15,
													261.15,
													257.15,
													263.15,
													270.15,
													275.15,
													275.15,
													278.15,
													278.25,
													276.15,
													277.15,
													276.15,
													274.15,
													276.15,
													273.15,
													276.15,
													271.15,
													275.15,
													274.15,
													271.15,
													271.15,
													273.15,
													271.15,
													273.15,
													276.15,
													275.15,
													272.15,
													275.15,
													276.15,
													277.15,
													277.15,
													275.15,
													275.15,
													276.15,
													275.15,
													275.15,
													277.15,
													277.15,
													276.15,
													281.15,
													280.15,
													279.15,
													277.15,
													279.15,
													279.15,
													279.15,
													279.15,
													277.15,
													279.15,
													281.15,
													275.15,
													280.15,
													282.05,
													278.15,
													285.15,
													284.15,
													282.15,
													286.15,
													286.15,
													286.15,
													284.15,
													286.15,
													284.15,
													277.15,
													281.15,
													277.15,
													277.15,
													283.15,
													283.05,
													286.15,
													286.15,
													280.15,
													280.15,
													284.15,
													285.15,
													281.15,
													284.15,
													286.05,
													288.15,
													285.15,
													285.15,
													286.15,
													283.15,
													278.15,
													278.15,
													279.15,
													284.15,
													280.15,
													276.15,
													281.15,
													286.15,
													286.15,
													278.15,
													276.15,
													276.15,
													284.15,
													279.15,
													278.15,
													281.15,
													-12047.85,
													-12047.85,
													298.15,
													297.15,
													294.15,
													298.15,
													298.15,
													302.15,
													293.05,
													291.15,
													281.15,
													290.15,
													290.15,
													281.15,
													277.15,
													279.15,
													288.05,
													286.15,
													288.15,
													278.15,
													281.15,
													279.15,
													283.15,
													286.15,
													281.15,
													288.55,
													292.05,
													291.15,
													296.15,
													298.15,
													298.15,
													299.05,
													300.05,
													303.15,
													302.15,
													297.15,
													280.15,
													284.15,
													292.15,
													292.15,
													293.15,
													291.15,
													290.15,
													284.15,
													287.15,
													282.15,
													282.15,
													289.15,
													287.15,
													284.15,
													288.15,
													285.15,
													292.15,
													294.15,
													293.15,
													295.15,
													284.15,
													288.15,
													292.15,
													300.15,
													303.15,
													297.15,
													298.15,
													283.15,
													283.15,
													287.15,
													296.05,
													300.15,
													294.15,
													295.15,
													300.15,
													302.05,
													-12047.85,
													-12047.85,
													-12047.85,
													304.05,
													304.15,
													297.15,
													297.15,
													285.15,
													291.05,
													287.15,
													295.15,
													294.95,
													302.25,
													305.15,
													309.05,
													304.15,
													303.05,
													294.15,
													288.15,
													298.15,
													303.05,
													304.15,
													304.15,
													305.05,
													298.95,
													-12047.85,
													-12047.85,
													303.05,
													299.05,
													303.05,
													306.15,
													307.15,
													302.15,
													305.15,
													302.15,
													304.15,
													300.15,
													298.95,
													295.15,
													297.15,
													299.05,
													303.15,
													301.05,
													300.15,
													292.85,
													299.05,
													298.85,
													298.95,
													298.15,
													290.15,
													299.05,
													-12047.85,
													-12047.85,
													304.15,
													306.15,
													304.15,
													301.15,
													297.15,
													293.15,
													295.05,
													300.15,
													305.05,
													305.05,
													290.15,
													293.15,
													281.15,
													294.15,
													286.15,
													289.15,
													295.15,
													297.15,
													298.95,
													282.15,
													286.15,
													288.15,
													287.15,
													288.15,
													289.05,
													287.15,
													287.15,
													294.15,
													294.15,
													294.15,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													287.15,
													289.15,
													292.15,
													286.15,
													284.05,
													284.15,
													286.95,
													288.15,
													288.15,
													289.15,
													284.15,
													279.15,
													279.15,
													279.15,
													277.15,
													279.15,
													277.15,
													278.15,
													279.15,
													280.15,
													282.15,
													283.15,
													283.15,
													281.15,
													283.15,
													283.15,
													281.15,
													-12047.85,
													278.15,
													274.15,
													276.15,
													278.15,
													276.15,
													280.15,
													281.05,
													273.15,
													-12047.85,
													267.15,
													263.15,
													262.15,
													261.15,
													259.15,
													-12047.85,
													-12047.85,
													266.15,
													270.15,
													273.15,
													273.15,
													270.15,
													270.15,
													275.15,
													274.15,
													272.15,
													268.15,
													266.15,
													263.15,
													270.15,
													275.15,
													275.15,
													275.15,
													274.15,
													276.15,
													276.15,
													275.15,
													274.15,
													270.15,
													267.15,
													265.15,
													263.15,
													263.25,
													268.15,
													266.15,
													270.15,
													266.15,
													266.15,
													274.15,
													273.15,
													276.15,
													267.15,
													263.15,
													257.15,
													262.15,
													263.15,
													264.15,
													269.15,
													274.15,
													276.05,
													275.15,
													272.15,
													265.15,
													263.15,
													257.15,
													271.15,
													276.15,
													277.15,
													279.15,
													278.15,
													279.15,
													275.15,
													270.15,
													273.15,
													274.15,
													275.15,
													278.15,
													276.15,
													278.15,
													276.15,
													280.25,
													279.05,
													272.15,
													263.15,
													261.15,
													261.15,
													265.15,
													271.15,
													277.15,
													278.15,
													273.15,
													269.15,
													270.15,
													270.15,
													278.15,
													277.15,
													279.15,
													278.15,
													280.15,
													276.15,
													275.15,
													272.15,
													268.15,
													273.15,
													274.15,
													273.15,
													269.15,
													262.15,
													257.15,
													262.15,
													266.15,
													272.15,
													273.15,
													262.15,
													274.15,
													276.15,
													278.05,
													281.15,
													273.15,
													276.15,
													275.15,
													276.15,
													277.15,
													275.15,
													281.15,
													281.15,
													277.15,
													277.15,
													277.15,
													279.85,
													282.15,
													280.15,
													282.15,
													275.15,
													280.15,
													282.15,
													282.15,
													282.15,
													281.15,
													278.05,
													283.05,
													276.15,
													281.15,
													279.15,
													281.05,
													274.15,
													282.15,
													279.15,
													279.05,
													278.15,
													280.05,
													284.15,
													285.15,
													-12047.85,
													277.15,
													283.15,
													285.05,
													277.15,
													278.15,
													277.15,
													275.15,
													280.15,
													280.15,
													281.15,
													286.15,
													284.15,
													287.15,
													290.15,
													285.15,
													284.15,
													280.15,
													278.15,
													282.15,
													286.05,
													290.15,
													290.15,
													284.15,
													291.15,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													290.15,
													290.15,
													291.15,
													288.15,
													283.15,
													281.15,
													292.15,
													288.15,
													-12047.85,
													-12047.85,
													-12047.85,
													293.15,
													285.15,
													287.15,
													281.15,
													279.15,
													279.15,
													288.15,
													290.15,
													293.15,
													292.15,
													289.15,
													289.15,
													295.15,
													299.15,
													292.15,
													290.15,
													284.15,
													291.15,
													292.15,
													290.15,
													293.15,
													285.15,
													-12047.85,
													284.15,
													282.15,
													286.15,
													290.15,
													288.15,
													293.15,
													-12047.85,
													-12047.85,
													291.15,
													286.15,
													289.15,
													293.15,
													298.15,
													300.15,
													-12047.85,
													290.15,
													293.15,
													298.15,
													295.15,
													298.15,
													301.15,
													303.15,
													304.15,
													290.15,
													295.15,
													297.15,
													299.15,
													299.15,
													295.15,
													294.15,
													290.15,
													298.15,
													302.15,
													305.15,
													299.15,
													289.15,
													288.15,
													285.15,
													293.15,
													300.15,
													296.15,
													291.15,
													292.15,
													297.15,
													298.15,
													301.15,
													302.15,
													301.15,
													301.15,
													300.15,
													301.15,
													303.15,
													299.15,
													300.15,
													299.15,
													302.15,
													300.15,
													298.15,
													299.15,
													301.15,
													300.15,
													292.15,
													295.15,
													298.15,
													296.15,
													297.15,
													299.15,
													303.15,
													303.15,
													296.15,
													302.15,
													302.15,
													302.15,
													303.15,
													303.15,
													302.15,
													299.15,
													286.15,
													287.15,
													289.15,
													292.15,
													297.15,
													299.15,
													300.15,
													300.15,
													300.15,
													300.15,
													301.15,
													302.15,
													300.15,
													290.15,
													296.15,
													288.15,
													291.15,
													287.15,
													287.15,
													288.15,
													290.15,
													294.15,
													295.15,
													300.15,
													302.15,
													296.15,
													289.15,
													287.15,
													289.15,
													290.15,
													298.15,
													288.15,
													289.15,
													289.15,
													284.15,
													282.15,
													281.15,
													281.15,
													283.15,
													285.15,
													280.15,
													280.15,
													281.15,
													282.15,
													280.15,
													-12047.85,
													-12047.85,
													283.15,
													283.15,
													285.15,
													282.15,
													283.15,
													283.15,
													284.15,
													278.15,
													278.15,
													278.15,
													280.15,
													279.15,
													279.15,
													279.15,
													279.15,
													278.15,
													279.15,
													278.15,
													275.15,
													273.15,
													273.15,
													275.15,
													278.15,
													277.15,
													280.15,
													278.15,
													274.15,
													275.15,
													274.15,
													270.15,
													270.15,
													273.15,
													264.15,
													261.15,
													268.15,
													275.15,
													278.15,
													278.15,
													275.15,
													274.15,
													276.15,
													279.15,
													277.15,
													277.15,
													275.15,
													273.15,
													275.15,
													271.15,
													269.15,
													268.15,
													271.15,
													267.15,
													269.15,
													267.15,
													269.15,
													270.15,
													266.15,
													267.15,
													270.15,
													272.15,
													277.15,
													279.15,
													279.15,
													274.15,
													275.15,
													270.15,
													270.15,
													274.15,
													276.15,
													276.15,
													274.15,
													277.15,
													279.15,
													277.15,
													275.15,
													272.15,
													269.15,
													277.15,
													279.15,
													283.15,
													278.15,
													272.15,
													274.15,
													277.15,
													279.15,
													274.15,
													266.15,
													266.15,
													270.15,
													273.15,
													265.15,
													257.15,
													252.15,
													255.15,
													259.15,
													266.15,
													274.15,
													272.15,
													273.15,
													275.15,
													275.15,
													275.15,
													271.15,
													275.15,
													276.15,
													277.15,
													276.15,
													274.15,
													276.15,
													-12047.85,
													-12047.85,
													270.15,
													272.15,
													272.15,
													269.15,
													271.15,
													274.15,
													273.15,
													275.15,
													277.15,
													273.15,
													273.15,
													272.15,
													273.15,
													274.15,
													275.15,
													274.15,
													278.15,
													277.15,
													276.15,
													271.15,
													274.15,
													267.15,
													270.15,
													271.15,
													271.15,
													274.15,
													275.15,
													278.15,
													280.15,
													277.15,
													272.15,
													274.15,
													280.15,
													284.15,
													283.15,
													276.15,
													277.15,
													277.15,
													275.15,
													279.15,
													278.15,
													274.15,
													276.15,
													277.15,
													-12047.85,
													276.15,
													276.15,
													276.15,
													278.15,
													284.15,
													279.15,
													281.15,
													280.15,
													277.15,
													277.15,
													276.15,
													280.15,
													280.15,
													285.15,
													278.15,
													278.15,
													281.15,
													268.15,
													283.15,
													286.15,
													290.15,
													292.15,
													281.15,
													285.15,
													283.15,
													281.15,
													280.15,
													282.15,
													283.15,
													282.15,
													285.15,
													287.15,
													295.15,
													297.15,
													287.15,
													-12047.85,
													-12047.85,
													282.15,
													287.15,
													288.15,
													-12047.85,
													280.15,
													283.15,
													281.15,
													281.15,
													280.15,
													287.15,
													291.15,
													295.15,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													-12047.85,
													289.15,
													294.15,
													296.15,
													288.15,
													289.15,
													293.15,
													292.15,
													288.15,
													283.15,
													291.15,
													292.15,
													298.15,
													293.15,
													292.15,
													295.15,
													296.15,
													284.15,
													288.15,
													298.15,
													294.15,
													296.15,
													293.15,
													297.15,
													287.15,
													294.15,
													299.15,
													300.15,
													304.15,
													306.15,
													305.15,
													302.15,
													305.15,
													305.15,
													303.15,
													291.15,
													291.15,
													299.15,
													298.15,
													300.15,
													304.15,
													301.15,
													297.15,
													302.15,
													291.15,
													295.15,
													300.15,
													301.15,
													303.15,
													301.15,
													302.15,
													301.15,
													301.15,
													300.15,
													295.15,
													295.15,
													301.15,
													304.15,
													300.15,
													302.15,
													303.15,
													301.15,
													301.15,
													304.15,
													302.15,
													292.15,
													298.15,
													301.15
												],
												"unitDimensions": "0 0 0 0 1 0 0",
												"defaultValue": "EmptyT"
											},
											{
												"name": "Rain_Fall",
												"displayUnit": "cm",
												"format": "%.1f",
												"nValues": [
													0.061,
													0.067,
													0.067,
													0.06799999999999998,
													0.092,
													0.097,
													0.097,
													0.097,
													0.097,
													0.097,
													0.097,
													0.097,
													0.106,
													0.116,
													0.12,
													0.121,
													-123.21,
													-123.21,
													0.147,
													0.149,
													0.15,
													0.16,
													0.168,
													0.168,
													0.186,
													0.193,
													0.197,
													0.197,
													0.197,
													0.197,
													0.197,
													0.197,
													0.198,
													0.202,
													0.202,
													0.202,
													0.202,
													0.204,
													-123.21,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.205,
													0.21,
													0.213,
													0.213,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.222,
													0.223,
													0.223,
													0.223,
													0.223,
													0.223,
													0.223,
													0.223,
													0.223,
													0.223,
													0.225,
													0.234,
													0.234,
													0.234,
													0.234,
													0.234,
													0.234,
													0.239,
													0.24,
													0.24,
													0.24,
													0.24,
													0.241,
													0.241,
													0.241,
													0.241,
													0.241,
													0.241,
													0.241,
													0.241,
													0.241,
													0.241,
													0.241,
													0.241,
													0.242,
													0.242,
													0.242,
													0.242,
													0.245,
													0.245,
													0.248,
													0.248,
													0.257,
													0.267,
													0.268,
													0.268,
													0.268,
													0.268,
													0.268,
													0.268,
													0.273,
													0.277,
													0.298,
													0.326,
													0.379,
													0.3820000000000001,
													0.386,
													0.378,
													0.378,
													0.393,
													0.396,
													0.396,
													0.4,
													0.4,
													0.4,
													0.4,
													0.4,
													0.4,
													0.4,
													0.4,
													0.407,
													0.4279999999999998,
													0.4279999999999998,
													0.4349999999999999,
													0.444,
													0.444,
													0.449,
													0.449,
													0.449,
													0.449,
													0.449,
													0.449,
													0.449,
													0.449,
													0.449,
													0.449,
													0.454,
													0.458,
													0.458,
													0.458,
													0.463,
													0.463,
													0.466,
													0.474,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													0,
													0.012,
													0.014,
													0.015,
													0.015,
													0.015,
													0.015,
													0.015,
													0.015,
													0.015,
													0.015,
													0.02,
													0.029,
													0.029,
													0.029,
													0.034,
													0.04099999999999999,
													0.04099999999999999,
													0.04099999999999999,
													0.04099999999999999,
													0.04099999999999999,
													0.04099999999999999,
													0.04099999999999999,
													0.04099999999999999,
													0.052,
													0.05400000000000003,
													0.05400000000000003,
													0.063,
													0.08900000000000002,
													0.09,
													0.099,
													0.099,
													0.099,
													0.099,
													0.099,
													0.099,
													0.099,
													0.119,
													0.12,
													0.121,
													0.124,
													0.125,
													0.125,
													0.125,
													0.125,
													0.125,
													0.125,
													-123.21,
													0.125,
													0.129,
													0.133,
													0.135,
													0.135,
													0.151,
													0.164,
													0.167,
													0.172,
													0.182,
													0.184,
													0.184,
													0.186,
													0.196,
													0.196,
													0.196,
													0.196,
													0.196,
													0.196,
													0.196,
													0.196,
													0.208,
													0.213,
													0.218,
													0.218,
													0.218,
													0.218,
													0.218,
													0.218,
													0.218,
													0.221,
													0.239,
													0.239,
													0.241,
													0.242,
													0.244,
													0.246,
													0.246,
													0.246,
													0.246,
													0.251,
													0.251,
													0.251,
													0.251,
													0.251,
													0.251,
													0.252,
													0.252,
													0.253,
													0.253,
													0.253,
													0.253,
													0.253,
													0.254,
													0.254,
													0.254,
													0.254,
													0.254,
													0.254,
													0.262,
													0.276,
													0.276,
													0.277,
													0.277,
													0.281,
													0.281,
													0.281,
													0.281,
													-123.21,
													-123.21,
													-123.21,
													0.297,
													0.297,
													0.297,
													0.297,
													0.297,
													0.297,
													0.297,
													0.297,
													0.297,
													0.299,
													0.337,
													0.345,
													0.345,
													0.345,
													0.345,
													0.355,
													0.369,
													0.381,
													-123.21,
													0.386,
													0.386,
													0.386,
													0.388,
													0.388,
													0.388,
													0.388,
													0.388,
													0.389,
													0.389,
													0.389,
													0.389,
													0.389,
													0.389,
													0.391,
													0.391,
													0.391,
													0.391,
													0.391,
													0.391,
													0.391,
													0.391,
													0.391,
													0.401,
													0.411,
													0.411,
													0.411,
													0.42,
													0.42,
													0.42,
													0.42,
													0.42,
													0.42,
													0.42,
													0.42,
													0.424,
													0.4389999999999999,
													0.441,
													0.455,
													0.46,
													-123.21,
													-123.21,
													0.46,
													0.46,
													0.46,
													0.47,
													0.47,
													0.47,
													0.47,
													0.47,
													0.47,
													0.47,
													0.48,
													0.48,
													0.48,
													0.48,
													0.48,
													0.48,
													0.48,
													0.48,
													0.48,
													0.48,
													0.48,
													0.481,
													0.485,
													0.4970000000000002,
													0.4970000000000002,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													0.004,
													0.004,
													0.004,
													0.004,
													0.004,
													0.004,
													0.004,
													0.004,
													0.006999999999999998,
													0.011,
													0.024,
													0.038,
													0.05599999999999998,
													0.05599999999999998,
													0.05599999999999998,
													0.058,
													0.08,
													0.08500000000000003,
													0.08699999999999998,
													0.098,
													0.098,
													0.098,
													0.098,
													0.098,
													0.105,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.112,
													0.117,
													0.117,
													0.117,
													0.119,
													0.119,
													0.119,
													0.119,
													0.119,
													0.119,
													0.119,
													0.122,
													0.123,
													0.124,
													0.127,
													0.132,
													0.132,
													0.149,
													0.172,
													0.172,
													0.172,
													0.172,
													0.172,
													0.172,
													0.172,
													0.172,
													0.172,
													0.172,
													0.172,
													-123.21,
													0.172,
													0.172,
													0.184,
													0.185,
													0.185,
													0.186,
													0.186,
													0.186,
													0.186,
													0.204,
													0.206,
													0.206,
													0.206,
													0.206,
													0.206,
													0.206,
													0.206,
													0.206,
													0.206,
													0.209,
													0.209,
													0.209,
													0.219,
													0.228,
													0.228,
													0.228,
													0.24,
													0.24,
													0.24,
													0.24,
													0.24,
													0.244,
													0.244,
													0.244,
													0.244,
													0.244,
													0.244,
													-123.21,
													0.25,
													0.26,
													0.269,
													0.272,
													0.272,
													0.275,
													0.275,
													0.275,
													0.275,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.277,
													0.282,
													0.29,
													0.29,
													0.29,
													0.29,
													0.29,
													0.29,
													0.29,
													0.29,
													0.29,
													0.29,
													0.292,
													0.292,
													0.295,
													0.295,
													0.295,
													0.295,
													0.295,
													0.295,
													0.295,
													0.295,
													0.295,
													0.295,
													0.295,
													0.295,
													0.295,
													0.305,
													0.305,
													0.305,
													0.305,
													0.307,
													-123.21,
													0.3110000000000001,
													0.3110000000000001,
													0.3110000000000001,
													0.3110000000000001,
													0.3110000000000001,
													0.3110000000000001,
													0.316,
													0.32,
													0.32,
													-123.21,
													-123.21,
													0.338,
													0.338,
													0.347,
													0.347,
													0.352,
													0.352,
													0.352,
													0.365,
													0.3729999999999999,
													0.374,
													0.374,
													0.394,
													0.404,
													0,
													0,
													0,
													0,
													0,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													0,
													0,
													0,
													0,
													0,
													0,
													0,
													-123.21,
													-123.21,
													0,
													0,
													0,
													0.001,
													0.001,
													0.001,
													0.002,
													0.002,
													0.006,
													0.006,
													0.006,
													0.013,
													0.025,
													0.03,
													0.03,
													0.031,
													0.038,
													0.045,
													0.05,
													0.051,
													0.051,
													0.051,
													0.051,
													0.052,
													0.052,
													0.052,
													0.052,
													0.052,
													0.052,
													0.052,
													0.052,
													0.052,
													0.05300000000000003,
													0.058,
													0.07200000000000004,
													0.073,
													0.073,
													0.073,
													0.073,
													0.073,
													0.073,
													0.07400000000000004,
													0.075,
													0.09,
													0.102,
													0.11,
													0.122,
													0.144,
													0.146,
													0.147,
													0.148,
													0.152,
													0.152,
													0.152,
													0.169,
													0.171,
													0.172,
													0.172,
													0.172,
													0.172,
													0.172,
													0.178,
													0.185,
													0.185,
													0.185,
													0.186,
													0.188,
													0.188,
													0.189,
													0.19,
													-123.21,
													-123.21,
													-123.21,
													0.191,
													0.191,
													0.191,
													0.191,
													0.197,
													0.197,
													0.209,
													0.213,
													0.213,
													0.213,
													0.213,
													0.213,
													0.216,
													0.219,
													0.233,
													0.233,
													0.233,
													0.233,
													0.233,
													0.233,
													0.235,
													0.235,
													-123.21,
													-123.21,
													0.247,
													0.247,
													0.247,
													0.247,
													0.247,
													0.247,
													0.247,
													0.247,
													0.248,
													0.25,
													0.251,
													0.255,
													0.255,
													0.255,
													0.257,
													0.26,
													0.267,
													0.271,
													0.271,
													0.271,
													0.271,
													0.278,
													0.278,
													0.278,
													-123.21,
													-123.21,
													0.278,
													0.278,
													0.278,
													0.278,
													0.278,
													0.28,
													0.28,
													0.28,
													0.315,
													0.315,
													0.32,
													0.324,
													0.331,
													0.331,
													0.344,
													0.354,
													0.354,
													0.4420000000000002,
													0.4420000000000002,
													0.448,
													0.449,
													0.45,
													0.4560000000000001,
													0.462,
													0.463,
													0.464,
													0,
													0,
													0,
													0.016,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													0.14,
													0.14,
													0.14,
													0.14,
													0.14,
													0.14,
													0.14,
													0.14,
													0.14,
													0.14,
													0.14,
													0.14,
													0.146,
													0.178,
													0.184,
													0.185,
													0.185,
													0.191,
													0.196,
													0.199,
													0.2,
													0.224,
													0.225,
													0.225,
													0.225,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													0.001,
													0.001,
													0.015,
													0.017,
													0.017,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													0.0014,
													0.0014,
													0.0014,
													0.0014,
													0.0166,
													0.0258,
													0.0258,
													0.0258,
													-123.21,
													-123.21,
													-123.21,
													0.0274,
													0.0326,
													0.034,
													0.07780000000000002,
													0.09019999999999999,
													0.09419999999999999,
													0.09419999999999999,
													0.09419999999999999,
													0.09419999999999999,
													0.0968,
													0.0984,
													0.0984,
													0.0984,
													0.0984,
													0.0984,
													0.1002,
													0.1012,
													0.1012,
													0.1014,
													0.1018,
													0.102,
													0.1098,
													0.1116,
													0.1136,
													0.1224,
													0.1228,
													0.1272,
													0.1324,
													0.1332,
													-123.21,
													-123.21,
													0.138,
													0.1416,
													0.1416,
													0.1416,
													0.1416,
													0.1416,
													-123.21,
													0.1478,
													0.1478,
													0.1478,
													0.1478,
													0.1478,
													0.1478,
													0.1478,
													0.1504,
													0.1508,
													0.1508,
													0.1508,
													0.1544,
													0.1582,
													0.16,
													0.167,
													0.167,
													0.1686,
													0.1688,
													0.1688,
													0.1832,
													0.1926,
													0.2032,
													0.2178,
													0.2178,
													0.2178,
													0.2378,
													0.242,
													0.2424,
													0.2424,
													0.2424,
													0.2424,
													0.2424,
													0.2424,
													0.2424,
													0.2424,
													0.2424,
													0.2462,
													0.2462,
													0.2462,
													0.2462,
													0.2462,
													0.2462,
													0.2464,
													0.2464,
													0.2464,
													0.2464,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2498,
													0.2644,
													0.2646,
													0.2656,
													0.2656,
													0.2656,
													0.2656,
													0.2656,
													0.2656,
													0.2656,
													0.2656,
													0.2656,
													0.2656,
													0.2656,
													0.2656,
													0.2656,
													0.2668,
													0.2668,
													0.2692000000000001,
													0.2696,
													0.2754,
													0.2754,
													0.2754,
													0.2754,
													0.2754,
													0.2754,
													0.2754,
													0.3088,
													0.3138,
													0.3139999999999999,
													0.3139999999999999,
													0.3139999999999999,
													0.3188,
													0.3206000000000001,
													0.3222,
													0.3234,
													0.3404,
													0.347,
													0.3562,
													0.3562,
													0.358,
													0.3848,
													0.4486,
													0.4514,
													0.4514,
													0.4514,
													-123.21,
													-123.21,
													0.4514,
													0.4514,
													0.4518,
													0.4586,
													0.4642000000000001,
													0.4798,
													0.4798,
													0.4798,
													0.4798,
													0.4798,
													0.4798,
													0.489,
													0.489,
													0.5078,
													0.5096000000000002,
													0.5096000000000002,
													0.5096000000000002,
													0.5096000000000002,
													0.5096000000000002,
													0.5096000000000002,
													0.5096000000000002,
													0.5096000000000002,
													0.5098,
													0.5098,
													0.5098,
													0.5122000000000002,
													0.5125999999999997,
													0.5125999999999997,
													0.5125999999999997,
													0.5125999999999997,
													0.5125999999999997,
													0.5125999999999997,
													0.5125999999999997,
													0.5125999999999997,
													0.5125999999999997,
													0.5226000000000001,
													0.6003999999999998,
													0.6476000000000002,
													0.6476000000000002,
													0.6476000000000002,
													0.6476000000000002,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.657,
													0.6659999999999998,
													0.6702000000000002,
													0.6702000000000002,
													0.6702000000000002,
													0.6702000000000002,
													0.6702000000000002,
													0.6702000000000002,
													0.6702000000000002,
													0.6704000000000003,
													0.672,
													0.672,
													0.6850000000000003,
													0.7034,
													0.7034,
													0.7058,
													0,
													0,
													0.0005,
													0.0092,
													0.009600000000000001,
													0.009600000000000001,
													0.009600000000000001,
													0.009600000000000001,
													0.0124,
													0.018,
													0.0184,
													0.0184,
													0.0184,
													0.0184,
													0.0184,
													0.0184,
													0.0184,
													0.0184,
													0.0184,
													0.0184,
													0.0184,
													0.0186,
													0.0186,
													0.0186,
													0.0186,
													0.0186,
													0.0186,
													0.0186,
													0.0186,
													0.0318,
													0.0408,
													0.0414,
													0.043,
													0.043,
													-123.21,
													-123.21,
													0.043,
													0.043,
													0.043,
													0.043,
													0.043,
													0.043,
													0.043,
													0.0432,
													0.0442,
													0.0442,
													0.0442,
													0.0442,
													0.0442,
													0.0442,
													0.0442,
													0.0442,
													0.0578,
													0.0614,
													0.0614,
													0.0614,
													0.0616,
													0.0616,
													0.0616,
													0.0616,
													0.0616,
													0.0616,
													0.0616,
													0.07459999999999997,
													0.077,
													0.094,
													0.094,
													0.094,
													0.1002,
													0.1022,
													0.1064,
													0.1148,
													0.1204,
													0.1304,
													0.1308,
													0.1636,
													0.1684,
													0.1684,
													0.17,
													0.1724,
													-123.21,
													0.1732,
													0.1742,
													0.1756,
													0.1838,
													0.1968,
													0.2182,
													0.2236,
													0.2368,
													0.2774,
													0.2854,
													0.3012,
													0.303,
													0.3168,
													0.3186,
													0.3270000000000001,
													0.3334,
													0.3344,
													0.335,
													0.3352000000000002,
													0.3352000000000002,
													0.3352000000000002,
													0.3372,
													0.3392000000000002,
													0.3392000000000002,
													0.3398,
													0.3406,
													0.359,
													0.3594,
													0.3604,
													0.3732,
													0.3842,
													0.3842,
													0.3842,
													0.3944,
													0.401,
													-123.21,
													-123.21,
													0.4362,
													0.4362,
													0.444,
													-123.21,
													0.4762,
													0.4766,
													0.4952,
													0.5025999999999998,
													0.505,
													0.505,
													0.505,
													0.505,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													-123.21,
													0.6315999999999998,
													0.6315999999999998,
													0.6337999999999998,
													0.6424,
													0.6424,
													0.6426000000000002,
													0.6596000000000002,
													0.6776000000000002,
													0.6842,
													0.6851999999999997,
													0.6851999999999997,
													0.6851999999999997,
													0.6879999999999998,
													0.6981999999999997,
													0.701,
													0.7026000000000001,
													0.7996000000000002,
													0.7996000000000002,
													0.8002,
													0.8002,
													0.8023999999999998,
													0.8054000000000003,
													0.8214,
													0.8268000000000004,
													0.8268000000000004,
													0.8268000000000004,
													0.8268000000000004,
													0.8273999999999997,
													0.8273999999999997,
													0.8273999999999997,
													0.8273999999999997,
													0.8273999999999997,
													0.8273999999999997,
													0.8480000000000004,
													0.8538,
													0.865,
													0.865,
													0.8682000000000004,
													0.8684000000000003,
													0.8690000000000003,
													0.8752000000000004,
													0.8752000000000004,
													0.8804000000000004,
													0.8804000000000004,
													0.8804000000000004,
													0.8804000000000004,
													0.8804000000000004,
													0.8804000000000004,
													0.8804000000000004,
													0.8804000000000004,
													0.8806,
													0.8806,
													0.8806,
													0.8664000000000003,
													0.8664000000000003,
													0.8664000000000003,
													0.8664000000000003,
													0.8664000000000003,
													0.8664000000000003,
													0.8664000000000003,
													0.8664000000000003,
													0.8664000000000003,
													0.8664000000000003,
													0.8668000000000002,
													0.8668000000000002,
													0.8668000000000002,
													0.8668000000000002
												],
												"unitDimensions": "1 0 0 0 0 0 0",
												"defaultValue": "Records[ records.nrows, \"Rain_Fall\"] "
											}
										],
										"Filter": {
											"Formula": "'date >= 20100101 date"
										}
									},
									{
										"name": "EmptyT",
										"Notes": "<b>EmptyT</b>\n\nAn arbitrary value that would never occur naturally in the data set and is used to designate no data is available for that cell.\n\nThe result of this expression is used in temperature fields, so it is defined with a unit.",
										"DiagramX": -275,
										"DiagramY": -150,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "-12321 degC"
										},
										"showInput": "y"
									},
									{
										"name": "BothTYM",
										"Notes": "<b>BothTYM</b>\n\nConverts the time into a date value and divides by 100 and takes the integer to get just the year and month numbers.",
										"DiagramX": -275,
										"DiagramY": -120,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{int {date bothT.date} / 100}"
										},
										"showInput": "y"
									},
									{
										"name": "MonthTotals",
										"Notes": "<b>MonthTotals</b>\n\n{groupsum MonthRecords \"Date\"}\n\nUsing the groupsum function on the MonthRecords table value and grouping on the \"Date\" column, which now just contains month numbers, allows us to calculate the sum of the recorded minimum and maximum temperatures for each month of record keeping.\n\nThe count column tells us how many values were summed, which we will use in the MonthAverages expression to calculate, well, the month averages.\n\nThe actual values displayed in this expression aren't very useful to human eyes as they are actually the sum of the temperatures in degrees Kelvin and then the sum is displayed in degrees C.  Nonetheless Math Minion is keeping track of the units and all will work out in the MonthAverages expression.",
										"DiagramX": -165,
										"DiagramY": -145,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{groupsum MonthRecords \"Date\"}"
										},
										"tableUnits": {}
									},
									{
										"name": "BothTMonth",
										"Notes": "<b>BothTMonth</b>\n\nUses the divide, int, multiply trick to strip off the months and then subtracts that from the original to end up with just the month number.",
										"DiagramX": -275,
										"DiagramY": -90,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "BothTYM -\n{int BothTYM / 100} * 100\n"
										},
										"showInput": "y"
									},
									{
										"name": "SortedMonths",
										"Notes": "<b>SortedMonths</b>\n\nOur records did not start in January, so the sort function will be used to sort the month by month number.",
										"DiagramX": -165,
										"DiagramY": -115,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{sort monthtotals}"
										},
										"showInput": "y"
									},
									{
										"name": "MinT",
										"Notes": "<b>MinT</b>\n\nThis expression uses the select function to select just the minimum temperatures that are not \"empty\" along with their associated dates.  The formula is:\n\n{select Records[ 0,\n\t{concat \"Date\", \"MinT\"} ],\n\t{ne Records.MinT, EmptyT}\n}\n\nThe first argument to the select function is:\n\nRecords[ 0, {concat \"Date\", \"MinT\"} ]\n\nwhich simply uses the index operator [ ] to get all the rows of the Date and MinT columns.\n\nThe second argument:\n\n{ne Records.MinT, EmptyT}\n\nuses the not equal function to create a column array that has 1 (true) values in all the rows where the minimum temperature is not \"empty\".",
										"DiagramX": -275,
										"DiagramY": -60,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select Records[\n\t0,\n\t{concat \"Date\", \"MinT\"}\n\t], \n\t{ne Records.MinT, EmptyT}\n}"
										},
										"tableUnits": {}
									},
									{
										"name": "MaxT",
										"Notes": "<b>MaxT</b>\n\nSame as the MinT expression, except for maximum temperatures.",
										"DiagramX": -165,
										"DiagramY": -240,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select Records[\n\t0,\n\t{concat \"Date\", \"MaxT\"}\n\t],\n\t{ne Records.MaxT, EmptyT}\n}"
										}
									},
									{
										"name": "RainFall",
										"Notes": "Similar to the MinT expression except for rain fall and the use of a string selector to select the valid rows.",
										"DiagramX": -165,
										"DiagramY": -210,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "n",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select\n\tRecords[\n\t\t0, \n\t\t{concat \"Date\", \"Rain_Fall\"}\n\t],\n\t\"Rain_Fall >= 0 cm\"\n}"
										},
										"tableUnits": {}
									},
									{
										"name": "BothT",
										"Notes": "<b>BothT</b>\n\nAgain similar to the MinT expression, but in this case we are only selecting rows where both the minimum and maximum temperatures are known and we are creating a table with both of those values, plus the date.",
										"DiagramX": -165,
										"DiagramY": -175,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{select Records,[\n\t\t0, {cc \"Date\", \"MinT\",\"MaxT\"}\n\t],\n\t{and\n\t\t{ne Records.MinT, EmptyT},\n\t\t{ne Records.MaxT, EmptyT}\n\t}\n}"
										}
									},
									{
										"name": "TempPlot",
										"Notes": "Plots both the MinT vs Date and MaxT vs Date values on the same graph.\n\nThe minimum and maximums are set for the MinT curve and since nothing is set for the MaxT one, the same values are used.",
										"DiagramX": -275,
										"DiagramY": -275,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "MinT.Date",
											"vmin": "20070501 date",
											"vmax": "{max records.date}",
											"unit": "date",
											"Y1": {
												"v": "MinT.MinT 'MinT",
												"vmin": "-40 degC",
												"vmax": "40 degC",
												"lineType": 0
											}
										},
										"X2": {
											"v": "MaxT.Date",
											"vmin": "",
											"vmax": "",
											"unit": "date",
											"Y1": {
												"v": "MaxT.MaxT 'MaxT",
												"vmin": "",
												"vmax": "",
												"lineType": 0
											}
										}
									},
									{
										"name": "PrecipPlot",
										"Notes": "Plots rain fall versus Date\n",
										"DiagramX": -275,
										"DiagramY": -215,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "RainFall.Date 'Date",
											"vmin": "20070501 date",
											"vmax": "{max records.date}",
											"unit": "date",
											"Y1": {
												"v": "RainFall.Rain_Fall 'Rain Fall",
												"vmin": "",
												"vmax": "",
												"unit": "cm",
												"lineType": 0
											}
										}
									},
									{
										"name": "DeltaTPlot",
										"Notes": "Plots the daily difference between the maximum and minimum temperatures versus date.\n\nNote the selection of deltaC as the temperature unit.  A difference of 2 deltaC is essentially 2 K, which would be displayed in degC as -271.15.",
										"DiagramX": -275,
										"DiagramY": -245,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"isOutput": "y",
										"Type": "Graph",
										"X1": {
											"v": "BothT.Date 'Date",
											"vmin": "20060701 date",
											"vmax": "20140629 date",
											"unit": "date",
											"Y1": {
												"v": "BothT.maxt - BothT.minT 'DeltaT",
												"vmin": "",
												"vmax": "",
												"unit": "deltaC",
												"lineType": 0
											}
										}
									},
									{
										"name": "MonthRecords",
										"Notes": "<b>MonthRecords</b>\n\nThe formula first creates a new table value from BothT, where the Date values are replaced with the month numbers from BothTMonth.\n\nThis is done so we can sum the totals by month using the groupsum function in the MonthTotals expression.\n\nIn addition, a column with all 1 values is appended to allow us to count the number of entries in each group.",
										"DiagramX": -165,
										"DiagramY": -270,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{append\n\t{table BothT,\n\t\tBothTMonth,\n\t\tbotht[ 0, 2:{ncols botht}]\n\t},\n\t{table \"count\", 1:{nrows botht} * 0 + 1}\n}"
										},
										"showInput": "y"
									},
									{
										"name": "MonthAverages",
										"Notes": "<b>MonthAverages</b>\n\n{table {cc \"Months\", \"MinT\", \"MaxT\"},\n\t {cc \"January\", \"February\", \"March\", \"April\",\n\t\t\"May\",  \"June\", \"July\", \"August\",\n\t\t\"September\", \"October\",\n\t\t\"November\", \"December\"\n\t},\n\tSortedMonths[0,2:3] / SortedMonths[0,4]\n}\n\nThe second and third columns of the SortedMonths table value are extracted and divided by the fourth column.\n\nThe result is the average minimum and maximum temperature of each month of the year during the record keeping period.\n\nThese are then used in a table function, along with a list of month names to make things a little prettier.",
										"DiagramX": -165,
										"DiagramY": -80,
										"HideInfo": "y",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": "{table {cc \"Months\", \"MinT\", \"MaxT\"},\n\t {cc \"January\", \"February\", \"March\", \"April\",\n\t\t\"May\",  \"June\", \"July\", \"August\",\n\t\t\"September\", \"October\",\n\t\t\"November\", \"December\"\n\t},\n\tSortedMonths[0,2:3] / SortedMonths[0,4]\n}"
										}
									},
									{
										"name": "Overview",
										"Notes": "<b>Old Weather Records</b>\n\nThis model is an older example demonstrating some uses of a data base of weather station records from our time in Fernie, B.C.",
										"DiagramX": -275,
										"DiagramY": -305,
										"HideInfo": "n",
										"DiagramNotes": "n",
										"HtmlNotes": "y",
										"Type": "Expression",
										"Formula": {
											"Formula": ""
										}
									}
								]
							},
							{
								"name": "Acme",
								"Notes": "Selecting just the 'Acme' client from the Hours table.",
								"DiagramX": 40,
								"DiagramY": -60,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{select Hours, \"Client=Acme\"}"
								},
								"showInput": "y",
								"tableFormats": [
									null,
									"10.0f",
									null,
									null,
									"8.1f",
									"10.2f"
								]
							},
							{
								"name": "Clients",
								"Notes": "A list of client names and charge rates",
								"DiagramX": -50,
								"DiagramY": -75,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Data Table",
								"Columns": [
									{
										"name": "Name",
										"displayUnit": "string",
										"sValues": [
											"HAL",
											"Fred",
											"Acme",
											"Pear"
										],
										"defaultValue": ""
									},
									{
										"name": "Rate",
										"displayUnit": "dollar/h",
										"format": "10.2f",
										"nValues": [
											0.0333333333,
											0.0277777778,
											0.0486111111,
											0.0388888889
										],
										"unitDimensions": "0 0 -1 0 0 0 0",
										"defaultValue": "0 1/s"
									}
								],
								"Filter": {
									"Formula": ""
								}
							},
							{
								"name": "ProjectTotal",
								"Notes": "Calculating the project totals for client Acme.",
								"DiagramX": 40,
								"DiagramY": -20,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{groupsum\n\tAcme[\n\t\t0,\n\t\t{cc\n\t\t\t\"Project\",\n\t\t\t\"Hours\",\n\t\t\t\"Charge\"\n\t\t}],\n\t\"Project\"\n}"
								},
								"showInput": "y"
							},
							{
								"name": "Hours",
								"Notes": "The Hours data table tool is a simple fictitious time sheet with a month of values.  See the data table help for a description of how it works",
								"DiagramX": -50,
								"DiagramY": -30,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Data Table",
								"Columns": [
									{
										"name": "Date",
										"displayUnit": "date",
										"format": "10.0f",
										"nValues": [
											1342396800,
											1342396800,
											1342483200,
											1342569600,
											1342569600,
											1342656000,
											1342656000,
											1342742400,
											1342742400,
											1342828800,
											1342828800,
											1342915200,
											1343001600,
											1343174400,
											1343174400,
											1343260800,
											1343347200,
											1343433600,
											1343433600,
											1343520000,
											1343606400,
											1343692800,
											1343779200,
											1343779200,
											1343865600,
											1343865600,
											1343952000,
											1344038400,
											1344038400,
											1344124800,
											1344124800,
											1344297600,
											1344384000,
											1344470400,
											1344556800,
											1344556800,
											1344643200,
											1344729600,
											1344729600,
											1344816000,
											1344902400,
											1344902400,
											1344988800,
											1344988800
										],
										"unitDimensions": "0 0 1 0 0 0 0",
										"defaultValue": "{mktime {int {date {now}}}}"
									},
									{
										"name": "Client",
										"displayUnit": "string",
										"sValues": [
											"HAL",
											"Fred",
											"Acme",
											"Acme",
											"Acme",
											"HAL",
											"Acme",
											"HAL",
											"Fred",
											"Fred",
											"Acme",
											"Acme",
											"Acme",
											"Fred",
											"HAL",
											"HAL",
											"HAL",
											"HAL",
											"Acme",
											"Acme",
											"Pear",
											"Pear",
											"Pear",
											"HAL",
											"Pear",
											"Fred",
											"Pear",
											"Pear",
											"Acme",
											"Pear",
											"HAL",
											"HAL",
											"HAL",
											"HAL",
											"Fred",
											"HAL",
											"HAL",
											"HAL",
											"Fred",
											"Fred",
											"Pear",
											"Fred",
											"HAL",
											"Acme"
										],
										"defaultValue": "clients.name",
										"isMenu": true
									},
									{
										"name": "Project",
										"displayUnit": "string",
										"sValues": [
											"DeepThought",
											"Accounting",
											"Coyote",
											"Coyote",
											"Coyote",
											"DeepThought",
											"RR",
											"DeepThought",
											"Accounting",
											"Accounting",
											"RR",
											"RR",
											"RR",
											"Accounting",
											"DeepThought",
											"DeepThought",
											"DeepThought",
											"DeepThought",
											"RR",
											"Coyote",
											"iWant",
											"iWant",
											"iWant",
											"DeepThought",
											"iWant",
											"Accounting",
											"iWant",
											"iWish",
											"RR",
											"iWish",
											"Clarke",
											"Clarke",
											"Clarke",
											"Clarke",
											"Accounting",
											"Clarke",
											"Clarke",
											"Clarke",
											"Report",
											"Report",
											"iWish",
											"Report",
											"Clarke",
											"Coyote"
										],
										"defaultValue": ""
									},
									{
										"name": "Hours",
										"displayUnit": "h",
										"format": "8.1f",
										"nValues": [
											7200,
											10800,
											18000,
											21600,
											7200,
											10800,
											7200,
											10800,
											7200,
											14400,
											21600,
											28800,
											32400,
											18000,
											10800,
											25200,
											28800,
											7200,
											14400,
											14400,
											21600,
											32400,
											25200,
											7200,
											25200,
											7200,
											25200,
											21600,
											7200,
											18000,
											7200,
											28800,
											32400,
											25200,
											7200,
											18000,
											28800,
											18000,
											10800,
											28800,
											18000,
											7200,
											25200,
											7200
										],
										"unitDimensions": "0 0 1 0 0 0 0",
										"defaultValue": "0 h"
									},
									{
										"name": "Charge",
										"displayUnit": "dollar",
										"format": "10.2f",
										"nValues": [
											239.99999975999998,
											300.00000024,
											874.9999998,
											1049.99999976,
											349.99999992,
											359.99999963999994,
											349.99999992,
											359.99999963999994,
											200.00000016,
											400.00000032,
											1049.99999976,
											1399.99999968,
											1574.99999964,
											500.00000040000003,
											359.99999963999994,
											839.9999991599999,
											959.9999990399999,
											239.99999975999998,
											699.99999984,
											699.99999984,
											840.0000002400001,
											1260.00000036,
											980.00000028,
											239.99999975999998,
											980.00000028,
											200.00000016,
											980.00000028,
											840.0000002400001,
											349.99999992,
											700.0000002,
											239.99999975999998,
											959.9999990399999,
											1079.9999989199998,
											839.9999991599999,
											200.00000016,
											599.9999994,
											959.9999990399999,
											599.9999994,
											300.00000024,
											800.00000064,
											700.0000002,
											200.00000016,
											839.9999991599999,
											349.99999992
										],
										"unitDimensions": "0 0 0 0 0 0 0",
										"defaultValue": "$.hours * clients.rate[\n\t{indexof\n\t\t$.client,\n\t\tclients.name\n\t}[0,1]\n]",
										"isCalculated": true
									}
								],
								"Filter": {
									"Formula": ""
								}
							},
							{
								"name": "ClientProjectSum",
								"Notes": "Totals for client/project combinations",
								"DiagramX": 40,
								"DiagramY": -100,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "{groupsum\n\t{append\n\t\tHours,\n\t\t{table \"Client:Project\",\n\t\t\tHours.client + \":\" + Hours.project\n\t\t}\n\t}[\n\t\t0,\n\t\t{cc\n\t\t\t\"Client:Project\",\n\t\t\t\"Hours\",\n\t\t\t\"Charge\"\n\t\t}\n\t],\n\t\"Client:Project\"\n}"
								},
								"showInput": "y"
							},
							{
								"name": "Overview",
								"Notes": "",
								"DiagramX": -50,
								"DiagramY": -100,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "HTML Form",
								"Formula": {
									"Formula": "'\n<html>\n\t<head>\n\t\t<style>\n\t\t\t#header {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-template-columns: 1fr 65px;\n\t\t\t\tgrid-gap: 10px;\n\t\t\t\tborder-bottom: 1px solid black;\n\t\t\t\tmargin-bottom: 10px;\n\t\t\t}\n\t\t\t#header img {\n\t\t\t\talign-self: center;\n\t\t\t}\n\t\t\t#page {\n\t\t\t\tmargin-top: 10px;\n\t\t\t\tborder: solid 1px;\n\t\t\t\tpadding: 5px;\n\t\t\t\tbackground-color: #f2f2f2;\n\t\t\t}\n\t\t\t.link {\n\t\t\t\tcolor: blue;\n\t\t\t\tcursor: pointer;\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"page\">\n\t\t<div id=\"header\">\n\t\t\t<h3>Data Tables</h3>\n\t\t</div>\n\t\t<p>\n\t\t\tData tables, unlike other Math Minion tools, contain static data as compared to the dynamic formulas that other tools use.\n\t\t</p>\n\t\t<p>\n\t\t\tWhile formulas can be used to input values, the formulas are immediately evaluated and discarded, with only the result being retained.\n\t\t</p>\n\t\t<p>\n\t\t\tThis makes data tables ideal for storing the kind of information that is often stored in spreadsheet or database tables.\n\t\t</p>\n\t\t<p>\n\t\t\tThe analogy is stronger with the latter as spreadsheets mix their data and calculations in the same cells, whereas databases and Math Minion store static data in their tables and use external, and hence visible, operations to slice and dice this data into other table value representations, without altering the source data.\n\t\t</p>\n\t\t<p class=\"reminder indent\">\n\t\t\t<b>Note:</b> the\n\t\t\t<span class=\"link\"\n\t\t\t\tonClick=\"mmpost([],{mm_viewurl:'help/datatable.html'})\">DataTable help</span>\n\t\t\thas a comprehensive discussion of data table features and its examples use screenshots of the  <span class=\"link\" onClick=\"mmpost([], {mm_push: 'Hours'});\">Hours</span> data table in this model.\n\t\t</p\n\t\t<p> \n\t\t\tIn this model, there are two data tables. The main one, <span class=\"link\" onClick=\"mmpost([], {mm_push: 'Hours'});\">Hours</span>, stores fictitious billing information and has the following columns:\n\t\t</p>\n\t\t<ul>\n\t\t\t<li><b>Date</b> - numeric with <b>date</b> unit</li>\n\t\t\t<li><b>Client</b> - string with client name</li>\n\t\t\t<li><b>Project</b> - string with project name</li>\n\t\t\t<li><b>Hours</b> - numeric with <b>h</b> unit</li>\n\t\t\t<li><b>Charge</b> - calculated numeric with <b>dollar</b> unit</li>\n\t\t</ul>\n\t\t<p>\n\t\t\tThe <b>Date</b> and <b>Hours</b> fields store time values, with appropriate units (date and hours), while the <b>Client</b> and <b>Project</b> fields store strings. However the <b>Client</b> column is designated as a menu, which means a formula supplies the available choices for the field. In this case the formula is <b>clients.name</b> which returns the array of names in the <b>name</b> column of the <b>Clients</b> data table.\n\t\t</p>\n\t\t<p>\n\t\t\tWhen I said that data tables only hold static data, that wasn't quite true for as a convenience, it is possible to include calculated columns as well. That is what the <b>Charge</b> column is. It's formula is a bit more complex and is described in the\n\t\t\t<span class=\"link\"\n\t\t\t\tonClick=\"mmpost([], {mm_viewurl: 'help/datatable.html#coleditor'})\">\n\t\t\t\tcolumn editor</span> section of the DataTable help, but essentially it multiplies the <b>Hours</b> value of each row in the <b>Hours</b> table by the value in the <b>Rate</b> column of the <b>Clients</b> table which has the same client name in its <b>Name</b> column.\n\t\t</p>\n\t\t<p>\n\t\t\tThe expressions in this model just show some possible manipulations of the data, while the <b>LargerExample</b> adds more examples based on old weather data from our time in Fernie, B.C.\n\t\t</p>\n\t</body>\n</html>"
								}
							}
						]
					},
					{
						"name": "Button",
						"Notes": "<b>Button</b>\nThe button tool lets you place a button with some common actions onto a model information view or an html page.",
						"DiagramX": 145,
						"DiagramY": 45,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Invoices",
								"Notes": "",
								"DiagramX": 45,
								"DiagramY": 105,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "Data Table",
								"Columns": [
									{
										"name": "Date",
										"displayUnit": "date",
										"format": "10.0f",
										"nValues": [
											1657016715.419
										],
										"unitDimensions": "0 0 1 0 0 0 0",
										"defaultValue": "{now} + {timezone}"
									},
									{
										"name": "Customer",
										"displayUnit": "string",
										"sValues": [
											"Bill"
										],
										"defaultValue": "customer"
									},
									{
										"name": "Charge",
										"displayUnit": "dollar",
										"format": "10.2f",
										"nValues": [
											100
										],
										"unitDimensions": "0 0 0 0 0 0 0",
										"defaultValue": "charge"
									}
								],
								"Filter": {
									"Formula": ""
								}
							},
							{
								"name": "Customer",
								"Notes": "",
								"DiagramX": 45,
								"DiagramY": 30,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"Type": "Expression",
								"Formula": {
									"Formula": "'John"
								},
								"showInput": "y"
							},
							{
								"name": "Charge",
								"Notes": "",
								"DiagramX": 45,
								"DiagramY": 55,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"Type": "Expression",
								"Formula": {
									"Formula": "200 dollar"
								},
								"showInput": "y",
								"displayUnit": "dollar",
								"format": "10.2f"
							},
							{
								"name": "AddButton",
								"Notes": "",
								"DiagramX": 45,
								"DiagramY": 80,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "n",
								"isOutput": "y",
								"Type": "Button",
								"action": "addrow",
								"targetFormula": {
									"Formula": "'invoices"
								},
								"labelFormula": {
									"Formula": "'Add Charge"
								}
							},
							{
								"name": "Overview",
								"Notes": "<b>Button</b>\n\nThe button tool lets you place a button with some common actions onto a model information view or an html page.\n\nThe available actions are:\n\n  <b>Add a new record to a data table</b>. The data table will use its inital value formulas to fill in the fields.\n\n  <b>Push a tool view</b>. The information view for the designated tool will replace the current one. Tapping the back button at the top of the new view will return to the original one.\n\n  <b>Refresh a tool</b>. The designated tool will be forced to recalculate itself. This is rarely needed, but can be useful for things like time and random numbers.\n\n  <b>Load a session</b>. The designated session will replace the current one.\n\n  <b>Load a Session Url</b>. An attempt will be made to load a session from an Internet address supplied as the target. This is likely to fail due to security reasons unless the file is on the same server as the one that provided the MM code.\n\n  <b>Console Command</b>. The target string will be used as a command such as used in the Console view. This is probably best ignored unless you are sure you know what you are doing.\n\nThe information view for a <b>Button</b> tool has a menu for selecting the action as well as formula fields for the label to display on the button and the target of the action. Note that the target must be a string and either the name of a tool or a session, depending on the action.\n\nIn this model, the <b>AddButton</b> is set to add a row to the <b>Invoices</b> data table. It will use the <b>Customer</b> and <b>Charge</b> expressions as the field values for the new row.\n\nAll the tools in this model are set to display in some form, so if you view the model's information view, a simple form allowing the addition of new records to the data table will appear below this overview.",
								"DiagramX": 45,
								"DiagramY": 0,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							}
						]
					},
					{
						"name": "Menu",
						"Notes": "<b>Menu</b>\nThe menu tool lets you place a a simple drop down menu onto a model information view or an html page.",
						"DiagramX": 145,
						"DiagramY": 80,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Invoices",
								"Notes": "A simple table with date, customer name and charge columns.\n\nThe initial value formula for customer is customer.label, thus the name of the selected customer in the menu.\n\nThe initial value for the charge column is taken from the charge expression.\n\nWhen the button is pressed a row will be added with those current values.",
								"DiagramX": 125,
								"DiagramY": 115,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Data Table",
								"Columns": [
									{
										"name": "Date",
										"displayUnit": "date",
										"format": "10.0f",
										"nValues": [
											1657016715.419,
											1657017122.822
										],
										"unitDimensions": "0 0 1 0 0 0 0",
										"defaultValue": "{now} + {timezone}"
									},
									{
										"name": "Customer",
										"displayUnit": "string",
										"sValues": [
											"Bill",
											"John"
										],
										"defaultValue": "customer.label"
									},
									{
										"name": "Charge",
										"displayUnit": "dollar",
										"format": "10.2f",
										"nValues": [
											100,
											200
										],
										"unitDimensions": "0 0 0 0 0 0 0",
										"defaultValue": "charge"
									}
								],
								"Filter": {
									"Formula": ""
								}
							},
							{
								"name": "Charge",
								"Notes": "The calculated charge is the value of the menu selection times the number of hours.",
								"DiagramX": 125,
								"DiagramY": 25,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "customer * hours"
								},
								"showInput": "y",
								"displayUnit": "dollar",
								"format": "10.2f"
							},
							{
								"name": "AddButton",
								"Notes": "Pressing this button will add a row to the Invoices data table.",
								"DiagramX": 125,
								"DiagramY": 70,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Button",
								"action": "addrow",
								"targetFormula": {
									"Formula": "'invoices"
								},
								"labelFormula": {
									"Formula": "'Add Charge"
								}
							},
							{
								"name": "Customer",
								"Notes": "The <b>Customer</b> menu uses\n<b>CustomerTable</b> as its source of options.\n\nThe first column customer names  are what will appear in the menu.\n\nThe charge rate from second column that corresponds to the selected name will be the menu's selected value.",
								"DiagramX": 45,
								"DiagramY": 70,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Menu",
								"optionsFormula": {
									"Formula": "customertable"
								},
								"selected": 4
							},
							{
								"name": "Hours",
								"Notes": "Input the number of hours to charge for.",
								"DiagramX": 125,
								"DiagramY": -15,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "2 h"
								},
								"showInput": "y",
								"displayUnit": "h",
								"format": "9.1f"
							},
							{
								"name": "Overview",
								"Notes": "<b>Menu</b>\n\nThe menu tool lets you place a a simple drop down menu onto a model information view or an html page.\n\nIt has a single formula that should return the options that can be selected. If this value has a two columns, then the first column will be the labels of the options in the menu, while the second will be values associated with the labels.",
								"DiagramX": 45,
								"DiagramY": -15,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							},
							{
								"name": "CustomerTable",
								"Notes": "A simple table with two columns with the first column containing customer names and second column having charge rates.",
								"DiagramX": 45,
								"DiagramY": 15,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Data Table",
								"Columns": [
									{
										"name": "Customer",
										"displayUnit": "string",
										"sValues": [
											"Bill",
											"John",
											"Tom",
											"Dick",
											"Harry"
										],
										"defaultValue": "'Bill"
									},
									{
										"name": "ChargeRate",
										"displayUnit": "dollar/h",
										"format": "10.2f",
										"nValues": [
											0.022222222222222223,
											0.025,
											0.020833333333333332,
											0.02638888888888889,
											0.027777777777777776
										],
										"unitDimensions": "0 0 -1 0 0 0 0",
										"defaultValue": "80 dollar/h"
									}
								],
								"Filter": {
									"Formula": ""
								}
							}
						]
					},
					{
						"name": "Overview",
						"Notes": "<b>Tools</b>\n\nMath Minion has a range of tools ranging from simple expressions to solvers, optimizer and display tools like graphs and html pages.",
						"DiagramX": 50,
						"DiagramY": -75,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": ""
						}
					},
					{
						"name": "Imported_Model",
						"Notes": "<b>Imported_Model</b>\nIf the same model is used repeatedly in a number of places, it can be advantageous to import the model structure from another session, rather than making multiple copies.\n\nThen if a change is made to the source session, it will be reflected in all the imported instances.\n\nThis probably won't come up much, but is described in the <span onClick=\"event.stopPropagation()\"><a href=\"../help/importedmodel.html\" target=\"_blank\">Imported Model help</a></span>.",
						"DiagramX": 145,
						"DiagramY": 115,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": ""
						}
					},
					{
						"name": "Graph",
						"Notes": "<b>Graph</b>\nThe Graph tool provides basic plotting capability, including the ability to plot multiple curves for both two and three dimensions as well as 3D surface plots.",
						"DiagramX": 145,
						"DiagramY": -15,
						"HideInfo": "n",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "angles",
								"Notes": "Angles for 2d and 3d plots",
								"DiagramX": 65,
								"DiagramY": 270,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "(0:72) * 10 degree"
								},
								"showInput": "y"
							},
							{
								"name": "table",
								"Notes": "As with 2 dimensional plots, you can extract the x, y and now z value arrays.\n\nYou can also get tables from the graph tool.  Here a table representing the second X set is displayed.\n\n(For brevity, not displayed in the model view. Tap this note to view.)",
								"DiagramX": 155,
								"DiagramY": 270,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "plot3d.table2"
								},
								"showInput": "y",
								"tableFormats": [
									null,
									null,
									null,
									"10.1f"
								]
							},
							{
								"name": "xy",
								"Notes": "      Angles for Surface3D\n",
								"DiagramX": 155,
								"DiagramY": 315,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "(-18:18) * 10 degree"
								},
								"showInput": "y"
							},
							{
								"name": "Surface3D",
								"Notes": "<b>Surface Plots</b>\n\nWhen the number of elements in a Z value is equal to the number of X value elements times the number of Y value elements, a 3D mesh is plotted.\n\nIn this case Z is calculated from:\n\n{cos $.x1} * {sin {tr $.y1}} 'z\n\nwhere the $. refers to the graph itself. Transposing the y value produces a row array and when the sin of that is multiplied by the column cos x array, a matrix is produced.\n\nA second x section draws a circle above the surface.",
								"DiagramX": 155,
								"DiagramY": 350,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Graph",
								"X1": {
									"v": "xy 'x",
									"vmin": "",
									"vmax": "",
									"unit": "degree",
									"Y1": {
										"v": "xy + 90 degree 'y",
										"vmin": "",
										"vmax": "",
										"unit": "degree",
										"lineType": 0
									},
									"Z1": {
										"v": "{cos $.x1} * {sin {tr $.y1}} 'z",
										"vmin": "",
										"vmax": "",
										"lineType": 0
									}
								},
								"X2": {
									"v": "{cos xy}",
									"vmin": "",
									"vmax": "",
									"Y1": {
										"v": "{sin xy}",
										"vmin": "",
										"vmax": "",
										"lineType": 0
									},
									"Z1": {
										"v": "{array {nrows xy}, 1.1} 'Const Z",
										"vmin": "",
										"vmax": "",
										"lineType": 0
									}
								}
							},
							{
								"name": "Legend2D",
								"Notes": "The legend parameter returns a table of axis titles and colours.",
								"DiagramX": 65,
								"DiagramY": 335,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "plot2d.legend"
								},
								"showInput": "y"
							},
							{
								"name": "Plot3D",
								"Notes": "<b>3D Plots</b>\n\nWhen a Z values is added to an X axis, a three dimensional plot is created.\n\nA 3D graph can have multiple X axes, as this one does, but each X axis can only have a single set of Y and Z values. If there are multiple x axes, tapping at the bottom of the graph will switch between them.\n\nYou can drag along any of the three axes (in the actual tool) to pan the graph and the axes values will change correspondingly.\n\nDragging horizontally along the top of the graph will rotate it.\n\nAs with 2D graphs, you can use pinch or scroll actions can be used to zoom the graph in and out and a long tap will reset the graph to its original position and scale.",
								"DiagramX": 155,
								"DiagramY": 240,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Graph",
								"X1": {
									"v": "{sin angles}'sin",
									"vmin": "",
									"vmax": "",
									"Y1": {
										"v": "{cos angles}'cos",
										"vmin": "",
										"vmax": "",
										"lineType": 0
									},
									"Z1": {
										"v": "0:({nrows $.x1}-1) * 1 m 'Height",
										"vmin": "0 m",
										"vmax": "100 m",
										"lineType": 0
									}
								},
								"X2": {
									"v": "$.x1'sin",
									"vmin": "",
									"vmax": "",
									"Y1": {
										"v": "$.y1'cos",
										"vmin": "",
										"vmax": "",
										"lineType": 0
									},
									"Z1": {
										"v": "$.z1 + 20 m ' Height + 20",
										"vmin": "",
										"vmax": "",
										"lineType": 0
									}
								}
							},
							{
								"name": "Plot2D",
								"Notes": "<b>Plot2D - a 2 dimension X-Y graph.</b>\n\nIn this case there is a single X axis, which has two Y curves representing the sin and cosine of the X values. Currently the sin curve is selected and its axis values are shown in the same blue colour as the curve. The unselected green cosine curve is somewhat dimmed.\n\nTapping on the Y axis (in the actual tool) will switch to the next available Y curve, namely the cosine curve. In this case the axis coordinates are the same for both curves, but they can be different.\n\nYou can also have multiple X axes and each X axis can have multiple Y curves. Tapping on the X axis will switch between them.\n\nYou can drag the graph around and the axis values will change correspondingly.\n\nYou can zoom in and out on the graph using a pinch gesture on a trackpad or screen as appropriate.\n\nIf you are using a mouse, then the centre scroll ball/wheel/gesture will zoom in and out. Two finger scrolling on a trackpad may work too, depending on your system and settings. \n\nIf you hover over the x or y axis while scrolling, just that axis will be zoomed.\n\nTapping on the graph other than on the axes will display the tap coordinates at the upper right, while a long tap will reset the graph to its original position and scale.\n\nA long tap over the x or y axis, will just rescale that axis and no repositioning will be done.",
								"DiagramX": 65,
								"DiagramY": 305,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"isOutput": "y",
								"Type": "Graph",
								"X1": {
									"v": "angles",
									"vmin": "",
									"vmax": "",
									"unit": "degree",
									"Y1": {
										"v": "3 ft * {sin angles} 'sin",
										"vmin": "-1 m",
										"vmax": "1 m",
										"lineType": 0
									},
									"Y2": {
										"v": "3 ft * {cos angles} 'cos",
										"vmin": "",
										"vmax": "",
										"lineType": 0
									}
								}
							},
							{
								"name": "PlotValues",
								"Notes": "The x and y values can be extracted as the parameters x, y1, y2 etc.\n(For brevity, not displayed in the model view. Tap this note to view.)",
								"DiagramX": 65,
								"DiagramY": 380,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "plot2d.y2"
								},
								"showInput": "y"
							},
							{
								"name": "Overview",
								"Notes": "<b>Graphs</b>\n\nThe Graph tool provides basic plotting capability, including the ability to plot multiple curves for both two and three dimensions as well as 3D surface plots.\n\nThe Graph help has a comprehensive discussion of graph features which won't be repeated here, but its examples use screenshots of the graphs in this model.\n\nIf viewing this in the model view, note that you will have to go to the graph's view, (tap on it) in order to manipulate it. In the model view the graphs are static.",
								"DiagramX": 65,
								"DiagramY": 240,
								"HideInfo": "n",
								"DiagramNotes": "n",
								"HtmlNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": ""
								}
							}
						]
					}
				]
			},
			{
				"name": "Mileage",
				"Notes": "<b>Mileage</b> is a demonstration model with lots of notes.\n\nIt calculates and plots a table of mile per gallon versus litre per 100 km and km per litre.",
				"DiagramX": 80,
				"DiagramY": 90,
				"HideInfo": "y",
				"DiagramNotes": "y",
				"HtmlNotes": "y",
				"Type": "Model",
				"diagramScale": 1,
				"Objects": [
					{
						"name": "lp100km",
						"Notes": "The array of litre per 100 km values is simply the inverse of <b>mpg</b> with the appropriate unit chosen.\n\nThis is done on the line immediately above the table on the expression's view.  The format is also set to just show two decimal points.\n\nYou can scroll arrays and matrices quickly by dragging on it row or column headers.",
						"DiagramX": 205,
						"DiagramY": 45,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "1/mpg"
						},
						"showInput": "y",
						"displayUnit": "lp100km",
						"format": "10.2f"
					},
					{
						"name": "Plot",
						"Notes": "Plot of <b>lp100km</b> and <b>lpg</b> versus <b>mpg</b>",
						"DiagramX": 205,
						"DiagramY": 115,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Graph",
						"X1": {
							"v": "mpg",
							"vmin": "0 mile/gal",
							"vmax": "50 mile/gal",
							"unit": "mile/gal",
							"Y1": {
								"v": "lp100km",
								"vmin": "0 lp100km",
								"vmax": "50 lp100km",
								"unit": "lp100km",
								"lineType": 0
							},
							"Y2": {
								"v": "kmpg",
								"vmin": "0 km/l",
								"vmax": "50 km/l",
								"unit": "km/l",
								"lineType": 0
							}
						},
						"Selected": "0_0"
					},
					{
						"name": "start",
						"Notes": "The <b>start</b> expression is the low end of the range of values we want calculated and its formula is just a constant followed by a unit.\n\nIf you are reading this in the model view, tap on this note to see the expression's view and then tap on <b>< Mileage</b> at the top left of the view to return here.\n\nBecause the <b>Display Input</b> box is turned on in its information display, an input field will appear below letting you modify the formula right from the model view.\n\nIt also has its <b>Display</b> box turned on, meaning it will also show the results of calculating the formula below, although in this case it will just be the entered constant.\n\nFinally, if you were to tap the <b>Notes</b> button at the top of the expression's view, you would see an editor for these notes and buttons which determine if the notes should be shown in the model view and on the diagram.\n\nNormally you wouldn't have a long explanation like this before an input field, but perhaps something like what precedes. the <b>end</b> expression.",
						"DiagramX": 105,
						"DiagramY": 40,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "5 mile/gal"
						},
						"showInput": "y",
						"displayUnit": "mile/gal",
						"format": "10.1f"
					},
					{
						"name": "end",
						"Notes": "Enter the upper end of the range in mile/gal",
						"DiagramX": 105,
						"DiagramY": 70,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "50 mile/gal"
						},
						"showInput": "y",
						"displayUnit": "mile/gal",
						"format": "10.1f"
					},
					{
						"name": "n",
						"Notes": "The expression <b>n</b> calculates the number of points given 0.1 mile/gal intervals.\n\nThe formula references the <b>start</b> and <b>end</b> expressions, so there are connection lines on the diagram running from the corners of their icons to the middle of a vertical edge of <b>n's</b> icon.\n\nSimilarly <b>n</b> is referenced in the <b>mpg</b> expression, so there is a line running from the corner of <b>n</b> to the middle of an edge of <b>mpg's</b> icon.\n\nThese connections make it easy to see how information flows through the calculation.",
						"DiagramX": 105,
						"DiagramY": 105,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "(end - start) / .1 mile/gal"
						},
						"showInput": "y"
					},
					{
						"name": "mpg",
						"Notes": "Expression <b>mpg</b> is a long array of <b>n</b> mileage values in 0.1 increments from the <b>start</b> to <b>end</b> values.\n\nA range operator (the colon) generates an array of integers from 0 to <b>n</b>, which are then multiplied by 0.1 mile/gal and added to the <b>start</b> value.\n\nThe results are long, so are not displayed in the model view, but tap on the name or this note to view the expression view.",
						"DiagramX": 205,
						"DiagramY": 10,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "0:n * .1 mile/gal + start"
						},
						"showInput": "y",
						"displayUnit": "mile/gal",
						"format": "10.1f"
					},
					{
						"name": "Table",
						"Notes": "Table of mpg, litre/100 km and litre/gal.\nTaken from plot.",
						"DiagramX": 205,
						"DiagramY": 155,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"HtmlNotes": "y",
						"isOutput": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "plot.table"
						},
						"showInput": "y",
						"tableFormats": [
							null,
							"10.1f",
							"10.2f",
							"10.2f"
						]
					},
					{
						"name": "Overview",
						"Notes": "This model calculates and plots a table of mile per gallon versus litre per 100 km and km per litre.\n\nThe only tools used are expressions and a graph and they are all shown in some manner or another in the model view.\n\nTap on their name boxes or notes or their diagram icons to view their information views.\n\nIn the model view, their notes will be in gray boxes like this one.",
						"DiagramX": 105,
						"DiagramY": 10,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "'Just notes"
						}
					},
					{
						"name": "kmpg",
						"Notes": "The array of kilometre per litre is just the <b>mpg</b> values with a different unit.",
						"DiagramX": 205,
						"DiagramY": 80,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"HtmlNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "mpg"
						},
						"showInput": "y",
						"displayUnit": "km/l",
						"format": "10.2f"
					}
				]
			}
		]
	}
}