{
"Program" : "Rtm",
"Version" : 3,
"CaseName" : "Getting Started",
"DefaultUnitSet" : "SI",
"UserUnits" : [
"squash = 1e8 N/acre",
"lp100km = 0.01 l/km"
],
"RootModel" : {
"DiagramY" : -12321,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -40,
"DiagramX" : 65,
"Type" : "Expression",
"Notes" : "Welcome to the Math Minion \"Getting Started\" session.\n\nMath Minion sessions display their objects, such as this expression, as rectangles on a diagram like this.\n\nMove around the diagram by dragging on the background (Not on an icon.  Also note that on iOS a long press without moving will add a new expression at that point).\n\nZoom the diagram in and out using a pinch gesture (iOS or trackpad) or a mouse scroll wheel or two finger trackpad scroll. (MacOS).\n\nTapping just below an icon that has a note will present the note in an information view.  Use the back button at the upper left of that view to return.\n\nTry these now and then click on the icons to the right, starting with the one  labeled “Models”.",
"Formula" : {
"Formula" : "\"Just Notes\""
},
"name" : "Welcome"
},
{
"diagramY" : 2.20461106300354,
"DiagramY" : -40,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 5,
"DiagramX" : 40,
"displayUnit" : "mph",
"Type" : "Expression",
"Notes" : "You are now in a model contained within the root model.    It has its own diagram and tools and these tools can have the same names as other tools in other models. In this case all the tools are just expressions.\n\nTo return to the parent model, click on the back button\n\n< Getting Started\n\nat the left of the toolbar above this diagram.\n\nTapping on a tool icon will result in a view containing information about the tool being presented.\n\nOn a Mac or iPad this will be in the panel on the right, while on an iPhone or iPod touch, it will replace the diagram.\n\nUse the back button at the upper left of the information view to return.\n",
"Formula" : {
"Formula" : "100 m / 3 s 'comment:\njust a dummy expression for note.  Everything after the ' is just a comment\n"
},
"name" : "Just_A_Note"
},
{
"DiagramNotes" : "y",
"DiagramY" : 5,
"DiagramX" : 120,
"Type" : "Expression",
"Notes" : "Math Minion tools, such as these expressions, are displayed on their parent model's diagram as rectangular icons.\n\nThese are automatically connected from one of their corners corners to the middle of a vertical side of every tool that uses their value.\n\nThe input for this expression is just\n\n2 m + 200 in\n\nwhich adds 200 inches to 2 metres.\n\nThe calculated result will appear at the bottom of the information view.\n\nOnce calculated a representation of the result will appear in the icon for an expression.",
"Formula" : {
"Formula" : "2 m + 200 in"
},
"name" : "Expression"
},
{
"DiagramNotes" : "y",
"DiagramY" : 5,
"DiagramX" : 200,
"Type" : "Expression",
"Notes" : "This expression calculates the square of the \"Expression\" expression.\n\nTap on the icon to have the result calculated.  Note that if “Expression” hasn’t already been calculated, it automatically will be.\n\nNote that a line connects this icon to the \"Expression\" icon.  Icons are automatically connected from the middle of a vertical side to a corner of the icons of any inputs they use.\n\nUse the back button:\n\n< Getting Started\n\nat the left of the tool bar to return to the root model and click on each of the rest of the icons on the right to learn more.",
"Formula" : {
"Formula" : "expression ^ 2"
},
"name" : "square"
}
],
"DiagramX" : 145,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 2.776000022888184,
"diagramX" : -30,
"name" : "Models",
"HideInfo" : "n"
},
{
"DiagramY" : 40,
"Objects" : [
{
"diagramY" : -196.9270782470703,
"DiagramY" : 70,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 250,
"X1" : {
"Y2" : {
"v" : "3 ft * {cos angles} 'cos",
"lineType" : 0
},
"Y1" : {
"vmin" : "-1 m",
"vmax" : "1 m",
"lineType" : 0,
"v" : "3 ft * {sin angles} 'sin"
},
"v" : "angles",
"unit" : "degree"
},
"DiagramX" : 65,
"Type" : "Graph",
"Notes" : "A 2 dimension X-Y graph.\n\nIf Z values are not added, a Graph tool will plot one or more lines of y values against a common x array.\n\nThere can be multiple x arrays, with corresponding y lines.\n\nWhen you tap on the plot2d icon, both the definition view and the graph are pushed onto the display.\n\nTap the back button at the top left of the plot view to see the graph definition.",
"name" : "plot2d"
},
{
"DiagramNotes" : "y",
"DiagramY" : 415,
"DiagramX" : 150,
"Type" : "Expression",
"Notes" : "The x and y values can be extracted as the parameters x, y1, y2 etc.  The <o> button on the toolbar is useful for finding what parameters you can reference from an object.",
"Formula" : {
"Formula" : "plot2d.y2"
},
"name" : "HalfRun"
},
{
"DiagramNotes" : "y",
"DiagramY" : 205,
"DiagramX" : 65,
"Type" : "Expression",
"Notes" : "",
"Formula" : {
"Formula" : "(0:72) * 10 degree"
},
"name" : "angles"
},
{
"DiagramNotes" : "y",
"DiagramY" : 250,
"X1" : {
"v" : "{sin angles}'sin",
"Z1" : {
"vmin" : "0 m",
"vmax" : "100 m",
"lineType" : 0,
"v" : "0:({nrows $.x1}-1) * 1 m 'Height"
},
"Y1" : {
"v" : "{cos angles}'cos",
"lineType" : 0
}
},
"DiagramX" : 150,
"Type" : "Graph",
"Notes" : "When a Z value is added to a graph, a 3 dimensional plot is produced.\n\nIf the X, Y and Z arrays all have the same number of values, as in this case, a 3D line will be plotted.\n\nOnce a Z value has been added, only the “Add X” button will be enabled and adding an X value will automatically add a Y and Z value for it.\n\nEach X value can only have one Y and Z.\n\nIf there is more than one X, you will not be able to delete a Z value, but you can still delete an entire X set.",
"X2" : {
"v" : "$.x1'sin",
"Z1" : {
"v" : "$.z1 + 20 m",
"lineType" : 0
},
"Y1" : {
"v" : "$.y1'cos",
"lineType" : 0
}
},
"name" : "graph3D"
},
{
"DiagramNotes" : "y",
"DiagramY" : 405,
"DiagramX" : 230,
"Type" : "Expression",
"Notes" : "As with 2 dimensional plots, you can extract the x, y and now z value arrays.\n\nYou can also get tables from the graph tool.  Here a table representing the second X set is displayed.\n",
"Formula" : {
"Formula" : "graph3d.table2"
},
"name" : "table"
},
{
"DiagramNotes" : "y",
"DiagramY" : 205,
"DiagramX" : 150,
"Type" : "Expression",
"Notes" : "      Angles for Surface3D\n",
"Formula" : {
"Formula" : "(-18:18) * 10 degree"
},
"name" : "xy"
},
{
"DiagramNotes" : "y",
"DiagramY" : 205,
"X1" : {
"Z1" : {
"v" : "{cos $.x1} * {sin {tr $.y1}} 'z",
"lineType" : 0
},
"Y1" : {
"v" : "xy + 90 degree 'y",
"lineType" : 0,
"unit" : "degree"
},
"v" : "xy 'x",
"unit" : "degree"
},
"DiagramX" : 235,
"Type" : "Graph",
"Notes" : "When the number of elements in a Z value is equal to the number of X value elements times the number of Y value elements, a 3D mesh is plotted.\n\nIn this case Z is calculated from:\n\n{cos $.x1} * {sin {tr $.y1}} 'z\n\nwhere the “$.” refers to the graph itself.  Transposing the y value produces a row array and when the sin of that is multiplied by the column cos x array, a matrix is produced.\n\nA second x section draws a circle above the surface.",
"X2" : {
"v" : "{cos xy}",
"Z1" : {
"v" : "{array {nrows xy}, 1.1} 'Const Z",
"lineType" : 0
},
"Y1" : {
"v" : "{sin xy}",
"lineType" : 0
}
},
"name" : "Surface3D"
},
{
"DiagramNotes" : "y",
"DiagramY" : 350,
"inputs" : {},
"DiagramX" : 235,
"Type" : "HTML Form",
"Notes" : "This HTML page shows how a graph can be inserted into a it and styled using CSS.",
"f0" : "surface3d.svg",
"Formula" : {
"Formula" : "'<html>\n\t<head>\n\t\t<script type=\"text/javascript\" src=\"jquery.js\"></script>\n\t\t<style>\n\t\t\t#svg_surface3d {\n\t\t\t\tbackground-color: #efe;\n\t\t\t\theight: 300px;\n\t\t\t\twidth: 300px;\n\t\t\t}\n\t\t\t.svg_line_1 {\n\t\t\t\tstroke: orange;\n\t\t\t\topacity: 0.3;\n\t\t\t}\n\t\t\t.svg_gridx {\n\t\t\t\tstroke: blue;\n\t\t\t}\n\t\t\t.svg_gridy,\n\t\t\t.svg_gridy .svg_label,\n\t\t\t.svg_gridy .svg_title,\n\t\t\t.svg_gridy .svg_unit {\n\t\t\t\tstroke: red;\n\t\t\t}\n\t\t\t.svg_gridz,\n\t\t\t.svg_gridz .svg_label,\n\t\t\t.svg_gridz .svg_title,\n\t\t\t.svg_gridz .svg_unit {\n\t\t\t\tstroke: green;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<p>Below the Surface3d graph is inserted into this HTML page tool by including <b>surface3d.svg</b> in a &lt;mm&gt; tag.</p>\n\t\t<p>  Check the source formula to see how styles are used to change the grids and labels to different, albeit rather gaudy, colors.</p>\n\t\t<a onclick=\"window.location='mm_surface3d'\">\n\t\t<mm>surface3d.svg</mm>\n\t\t</a>\n\t</body>\n</html>"
},
"name" : "Surface3dHTML"
}
],
"DiagramX" : 45,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 2.477419376373291,
"diagramX" : -55,
"name" : "Graph",
"HideInfo" : "n"
},
{
"diagramY" : -135.3345794677734,
"DiagramY" : 40,
"Objects" : [
{
"maxIter" : 200,
"f0" : "3 * $.1 - {cos $.2 * $.3} - 0.5",
"maxJacobians" : 5,
"f1" : "$.1*$.1 - 81*($.2 + 0.1)^2 + {sin $.3} + 1.06",
"DiagramNotes" : "y",
"DiagramX" : 25,
"c0" : "1",
"f2" : "{exp $.1*$.2} + 20*$.3 + (10*{pi} - 3.) / 3.0",
"DiagramY" : 145,
"Type" : "Equation Solver",
"c1" : "1",
"Notes" : "This is the classic Broyden 3 function test system, which has the equations:\n\n3*x-cos(y*z)-0.5 = 0\nx^2 -81*(y+0.1)^2 + sin(z) +1.06 = 0\nExp(-x*y) +20*z+ (10*pi -3)/3 = 0\n\nThe solution should be:\n\n0.500000\n0\n-0.523599\n\nIn this case the entire problem is defined right in the solver object, making use of $.1, $.2 and $.3 as the solver outputs.\n\nRecall that the $ symbols in a formula is a short cut for the object that owns the formula.",
"Enabled" : "y",
"name" : "Broyden",
"c2" : "1"
},
{
"DiagramNotes" : "y",
"DiagramY" : 145,
"Objects" : [
{
"CellInputs" : {
"2_1" : "2",
"3_1" : "3",
"1_1" : "1"
},
"DiagramNotes" : "y",
"DiagramY" : 115,
"DiagramX" : 60,
"Type" : "Matrix",
"Notes" : "An arbitrary \"feed\" material.\n",
"columnCount" : "1",
"name" : "feed",
"rowCount" : "3"
},
{
"f0" : "splits - recycle",
"maxJacobians" : 5,
"f1" : "(qsplit - qcycle)/100",
"DiagramX" : 140,
"c0" : "{nrows feed}",
"DiagramY" : 120,
"Enabled" : "y",
"Type" : "Equation Solver",
"Notes" : "This solver has two functions defined, with the first being the differences between the calculated and estimated recycle values.  The second is a scalar function of the difference between the calculated and estimates energy recycle values.\n\nAs there are three \"components\" in the first function, the solver is actually solving for 4 simultaneous equations.\n\nYou must tell the solver how many outputs to generate for each function, so for the first function this is designated as {nrows feed}.",
"c1" : "1",
"name" : "Solver",
"maxIter" : 200
},
{
"Formula" : {
"Formula" : "solver.1"
},
"Type" : "Expression",
"DiagramY" : 75,
"name" : "recycle",
"Notes" : "The output of the solver variable 1 is an array and is used directly as the recycle.",
"DiagramX" : 60
},
{
"DiagramNotes" : "y",
"DiagramY" : 75,
"DiagramX" : 140,
"Type" : "Expression",
"Notes" : "        The feed and recycle\n        materials are mixed.",
"Formula" : {
"Formula" : "feed + recycle"
},
"name" : "sum"
},
{
"Formula" : {
"Formula" : "(sum*1:3*.3)^.9"
},
"Type" : "Expression",
"DiagramY" : 75,
"name" : "splits",
"Notes" : "An arbitrary function with no physical significance is used to split the combined material into a calculated recycle material.\n\nThese values  must be equal to the estimated values in the recycle object when solved.",
"DiagramX" : 225
},
{
"DiagramNotes" : "y",
"DiagramY" : 200,
"DiagramX" : 60,
"Type" : "Expression",
"Notes" : "The amount of energy contained in the feed material.",
"Formula" : {
"Formula" : "100"
},
"name" : "q"
},
{
"DiagramNotes" : "y",
"DiagramY" : 160,
"DiagramX" : 140,
"Type" : "Expression",
"Notes" : "The energy recycle, scaled\nfrom the solver variable 2.",
"Formula" : {
"Formula" : "Solver.2 * 10"
},
"name" : "qcycle"
},
{
"DiagramNotes" : "y",
"DiagramY" : 200,
"DiagramX" : 140,
"Type" : "Expression",
"Notes" : "As with the material, the feed energy is added to the recycled energy.",
"Formula" : {
"Formula" : "q + qcycle"
},
"name" : "qsum"
},
{
"DiagramNotes" : "y",
"DiagramY" : 155,
"DiagramX" : 225,
"Type" : "Expression",
"Notes" : "Another arbitrary split producing a calculated recycle energy.",
"Formula" : {
"Formula" : ".1*qsum"
},
"name" : "qsplit"
},
{
"DiagramNotes" : "y",
"DiagramY" : 105,
"DiagramX" : 225,
"Type" : "Expression",
"Notes" : "What isn't recycled is the product, which should be equal to the feed when solved.",
"Formula" : {
"Formula" : "sum - splits"
},
"name" : "Product"
},
{
"DiagramNotes" : "y",
"DiagramY" : 200,
"DiagramX" : 225,
"Type" : "Expression",
"Notes" : "            The product energy flow,\n            which should be the\n            same as the feed energy\n            flow when the problem is\n            solved.",
"Formula" : {
"Formula" : "qsum - qsplit"
},
"name" : "QProduct"
}
],
"DiagramX" : 100,
"Type" : "Model",
"Notes" : "This model represents a highly stylized recycle operation of the sort that might occur in a chemical plant.\n\nAn input material, in the \"feed\" array, is mixed with material recycled from farther along in the plant.  The mixed material is then split by some process (here just an arbitrary formula) which results in the recycle flow and a product flow.\n\nSince, in this nonsensical example, everything that goes in must end up in the product, it serves no real point other than exercising the solver, which combines an array function with a scalar function.",
"diagramScale" : 2.637254953384399,
"diagramX" : -50,
"name" : "Recycle",
"diagramY" : -67.41635894775391
},
{
"DiagramNotes" : "y",
"DiagramY" : 145,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -105,
"DiagramX" : -325,
"Type" : "Expression",
"Notes" : "A copy of the \"parabola\" expression, with the x value replaced with \"solverX\".",
"Formula" : {
"Formula" : "(SolverX+5)^2 +7"
},
"name" : "parabolaCopy"
},
{
"DiagramNotes" : "y",
"DiagramY" : -60,
"DiagramX" : -325,
"Type" : "Expression",
"Notes" : "A copy of the \"line\" expression, with the x value replaced with \"solverX\".",
"Formula" : {
"Formula" : "2000 - 20*SolverX"
},
"name" : "lineCopy"
},
{
"DiagramNotes" : "y",
"DiagramY" : -240,
"X1" : {
"v" : "x",
"Y2" : {
"vmin" : "0",
"vmax" : "3500",
"lineType" : 0,
"v" : "line"
},
"Y1" : {
"vmin" : "0",
"vmax" : "3500",
"lineType" : 0,
"v" : "parabola"
}
},
"DiagramX" : -220,
"Type" : "Graph",
"Notes" : "A plot of the line and parabola.  Note that the line crosses the parabola twice, yielding two places where the\n\nparabola - line\n\nvalue will be zero.\n\nStrictly speaking, the Brent solver is likely to fail if the slope of the function changes sign, but an appropriate choice of starting point and range can be used to overcome that.",
"name" : "Plot"
},
{
"Formula" : {
"Formula" : "50 + Solver.1*50"
},
"Type" : "Expression",
"DiagramY" : -70,
"name" : "SolverX",
"Notes" : "? = The solution.\n\nThe output of the solver is constrained to between -1 and 1 for a single value problem.  The starting value will be 0.\n\nIn this case, I multiply the solver output by 50 and add 50 so that the starting value is 50 and the solution must be between 0 and 100.  This will constrain the solution to be on the right side of the parabola as shown in the plot.\n\nTry adding a minus sign to the first 50, so the formula becomes:\n\n-50 + Solver.1*50\n\nNow the function value is initialized and largely constrained to the left side of the parabola and the solution on that side is the one found.",
"DiagramX" : -225
},
{
"DiagramNotes" : "y",
"DiagramY" : -200,
"DiagramX" : -325,
"Type" : "Expression",
"Notes" : "An expression which calculates the y value of a parabola, give an x value(s).",
"Formula" : {
"Formula" : "(x+5)^2 +7"
},
"name" : "parabola"
},
{
"DiagramNotes" : "y",
"DiagramY" : -155,
"DiagramX" : -325,
"Type" : "Expression",
"Notes" : "An expression which calculates a y value for the given x value(s).",
"Formula" : {
"Formula" : "2000 - 20*x"
},
"name" : "line"
},
{
"DiagramNotes" : "y",
"DiagramY" : -240,
"DiagramX" : -325,
"Type" : "Expression",
"Notes" : "A range of values used to plot the parabola and line.",
"Formula" : {
"Formula" : "-75:50"
},
"name" : "x"
},
{
"Enabled" : "y",
"DiagramY" : -105,
"c0" : "1",
"DiagramX" : -225,
"Type" : "Equation Solver",
"Notes" : "The solver will alter its output variable (referenced as Solver.1 for the first, and in this case only, output) until the function defined as f(1) has a value of 0.\n\nNote that you have to click on the function row to have the function formula and the number of outputs field for that function filled in.\n\nThe number of outputs for a function must match the length of the array calculated by the function - in this case just 1.\n\nThe reset button at the bottom will set all function outputs to 0 and uncheck the Enabled box.  Check that box when you want the solver to attempt to find a solution.\n\nNote that if the solver should fail to converge, it will turn off its solve switch and will no longer attempt to resolve when its function inputs change.\n\nYou will have to return to the solver and turn on the switch when you have fixed the convergence problem.",
"f0" : "parabolaCopy - lineCopy",
"maxIter" : 200,
"name" : "Solver",
"maxJacobians" : 5
}
],
"DiagramX" : -55,
"Type" : "Model",
"Notes" : "This model determines the intersection between two curves, specifically a parabola and a line.  Obviously this could easily be solved algebraically or even graphically, but that very simplicity makes it a useful example.\n\nThe top set of connected tools provides a visual representation of the problem, by graphing a range of x values versus the y values calculated by the parabola and line expressions.\n\nA glance at the plot shows that the line will cross the parabola in two places and indeed it is easy to determine their coordinates by zooming in and dragging the crossing points to a grid line.\n\nThe lower set of connected blocks uses the solver tool to find a value of x where the y values calculated by the two expressions are equal and hence at the intersection.",
"diagramScale" : 2.742857217788696,
"diagramX" : 335,
"name" : "Single",
"diagramY" : 247.2916717529297
},
{
"DiagramNotes" : "y",
"DiagramY" : 145,
"DiagramX" : -135,
"Type" : "Expression",
"Notes" : "The equation solver tool modifies one or more output values until the function values calculated from those outputs are zero.  If there is a single scalar output, then the Brent method is used, with the output value limited to the range -1 to 1 (the function calculation can of course scale that to anything).\n\nIf it is a multi value problem, then the Broyden method is used and while in that case the output values can exceed the -1 to 1 range, it is still good practice  to scale the problem so all values are relatively normalized.\n\nThis model contains three different solver examples.",
"Formula" : {
"Formula" : "\"just a note holder\""
},
"name" : "Solver"
}
],
"DiagramX" : 120,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 2.069230794906616,
"diagramX" : 145,
"name" : "Solver",
"HideInfo" : "n"
},
{
"diagramY" : 57.34870147705078,
"DiagramY" : 90,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -50,
"diagramY" : -37.50720596313477,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 45,
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "A simple addition of a range  from 1 to 6 to the transpose of another range from 1 to 6 produces a matrix of all possible outcomes of rolling two dice.",
"Formula" : {
"Formula" : "1:6+{transpose 1:6}"
},
"name" : "rolls"
},
{
"Formula" : {
"Formula" : "{sum {eq rolls, count.x}}"
},
"Type" : "Expression",
"DiagramY" : 45,
"name" : "sumn",
"Notes" : "Using the \"eq\" function to compare \"rolls\" with a scalar, in this case the iterator's loop variable, will return a matrix with a 1 in positions that match and 0 in the other positions.\n\nBy summing this matrix, we get a count of the number of matches.",
"DiagramX" : 130
},
{
"recFormulas" : [
{
"Formula" : "$.x 'Roll"
},
{
"Formula" : "sumn"
}
],
"DiagramY" : 90,
"whileFormula" : {
"Formula" : "{le $.x, 12}"
},
"DiagramX" : 130,
"nextXFormula" : {
"Formula" : "$.x + 1"
},
"AutoRun" : "y",
"Type" : "Iterator",
"initXFormula" : {
"Formula" : "2"
},
"Notes" : "Initializes \"x\" to 2 and then loops while it is less than or equal to 12, incrementing \"x\" on each loop.\n\nThe values for \"x\" and \"sumn\" are recorded for each loop.",
"name" : "count"
},
{
"DiagramNotes" : "y",
"DiagramY" : 125,
"DiagramX" : 130,
"Type" : "Expression",
"Notes" : "The probability of any outcome is the number of ways that outcome can be achieved, divided by all the possible roll combinations.",
"Formula" : {
"Formula" : "count.r2 / (6*6)"
},
"name" : "Probability"
},
{
"DiagramNotes" : "y",
"DiagramY" : 90,
"X1" : {
"v" : "count.roll'Roll",
"Y2" : {
"vmin" : "0",
"vmax" : "0.2",
"lineType" : 0,
"v" : "Probability"
},
"Y1" : {
"v" : "count.sumn'Count",
"lineType" : 1
}
},
"DiagramX" : 215,
"Type" : "Graph",
"Notes" : "The results are displayed in\nthis rather dull graph.",
"name" : "plot"
},
{
"DiagramNotes" : "y",
"DiagramY" : 135,
"DiagramX" : 215,
"Type" : "Expression",
"Notes" : "and also displayed in this table.",
"Formula" : {
"Formula" : "plot.table\n"
},
"name" : "table"
}
],
"DiagramX" : 205,
"Type" : "Model",
"Notes" : "A table of all possible outcomes of rolling two dice is calculated in the expression \"rolls\".\n\nThe \"sumn\" expression calculates the total number of outcomes equaling a given value.  That value is the current \"x\" value of the iterator \"counts\".\n\nThe iterator \"count\" initializes it's \"x\" parameter to 2 and loops until it is equal to 12, incrementing \"x\" on each loop.\n\nThe value of \"x\" and \"sumn\" are recorded for each loop.\n\nThe recorded number of occurrences is divided by 36 in \"Probability\" and the results presented in table form in \"nTable\".",
"diagramScale" : 2.669230699539185,
"diagramX" : -35,
"name" : "Dice",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : -50,
"diagramY" : -8.333333015441895,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 135,
"Type" : "Expression",
"Notes" : "Number of values.",
"Formula" : {
"Formula" : "6"
},
"name" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 55,
"recFormulas" : [
{
"Formula" : "$.i"
},
{
"Formula" : "$.x"
},
{
"Formula" : "$.x^2"
}
],
"whileFormula" : {
"Formula" : "{le $.i, n}"
},
"DiagramX" : 135,
"nextXFormula" : {
"Formula" : "$.x + 1\"m\""
},
"AutoRun" : "y",
"Type" : "Iterator",
"Notes" : "The iterator initializes its \"x\" variable to an array ranging from 1 m to 6 m.\n\nOn each loop, this array is incremented by 1 m and the result is recorded, along with the \"i\" variable and the square of the \"x\" variable.  In this case it would be more sensible to just square the recorded value array outside of the iterator, but this is just for illustration.\n\nThe \"while\" expression just uses the count variable \"i\", to loop over the first \"n\" values.",
"initXFormula" : {
"Formula" : "1:n*1\"m\""
},
"name" : "iter"
},
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"DiagramX" : 220,
"Type" : "Expression",
"Notes" : "The recorded \"i\" values",
"Formula" : {
"Formula" : "iter.r1"
},
"name" : "r1"
},
{
"DiagramNotes" : "y",
"DiagramY" : 55,
"DiagramX" : 220,
"Type" : "Expression",
"Notes" : "The recorded x values.  Each value is an array, so the result is a matrix.",
"Formula" : {
"Formula" : "iter.r2"
},
"name" : "r2"
},
{
"DiagramNotes" : "y",
"DiagramY" : 95,
"DiagramX" : 220,
"Type" : "Expression",
"Notes" : "The recorded x squared values.",
"Formula" : {
"Formula" : "iter.r3"
},
"name" : "r3"
},
{
"DiagramNotes" : "y",
"DiagramY" : 130,
"DiagramX" : 220,
"Type" : "Expression",
"Notes" : "This calculates the equivalent of the \"x\" squared matrix, as represented by \"r3\", but does it much more efficiently and simply in a single expression.\n\nMost problems that would require a loop in a programming language, can be solved with simple expressions in Math Minion.",
"Formula" : {
"Formula" : "(1:6*1\"m\"+\n{transpose 0:5*1\"m\"})^2"
},
"name" : "No_Loop"
}
],
"DiagramX" : 290,
"Type" : "Model",
"Notes" : "An iterator is used to create a matrix of lengths and a matrix of its values squared.  This can be easily accomplished in a single expression, without an iterator, as shown in \"No_Loop\". However the iterator illustrates the use of a non-scalar loop variable.",
"diagramScale" : 3,
"diagramX" : -125,
"name" : "XArray",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : -50,
"DiagramX" : 125,
"Type" : "Expression",
"Notes" : "Math Minion's array and matrix tools, including the range operator and it's solvers, make conventional loops largely unnecessary.  However they can still be occasionally useful, particularly for case study type problems.\n\nThe iterator tool provides this capability.  It has a loop variable (parameter X) and a loop counter (parameter i) and also allows values to be recorded for each iteration.\n\nThere are two simple examples presented here.  The Dice model calculates the likelihood of a given outcome of rolling two dice.  This is done in a brute force manner to illustrate iterator use.\n\nThe XArray model doesn't really do anything, other than illustrate that the loop variable does not have to be a scalar.",
"Formula" : {
"Formula" : "\"Just a note holder\""
},
"name" : "Iterator"
}
],
"DiagramX" : 120,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 2.721568584442139,
"diagramX" : -115,
"name" : "Iterator",
"HideInfo" : "n"
},
{
"diagramY" : -0.8854166865348816,
"DiagramY" : -10,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "An expression is the simplest Math Minion object - just a formula and the display of a result.  But like equations in a math problem, they are the work horse of any problem.\n\nYou will probably use expressions more than any other Math Minion tool.  This model has more examples and information about using them.\n",
"Formula" : {
"Formula" : "(2 kg + 2 lb) / 2 litre"
},
"name" : "Introduction"
},
{
"DiagramNotes" : "y",
"DiagramY" : 115,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "Expressions are often used to represent scalar values or constants, such as the density in this expression.",
"Formula" : {
"Formula" : "1 g/cm^3"
},
"name" : "ScalarNumber"
},
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : 95,
"Type" : "Expression",
"Notes" : "Here the range operator is used to create an array of numbers between 1 and 50, which is then multiplied by 1\"m\" to convert the values into lengths.\n\nYou can drag the results table up or down to see more, or on a Mac, scroll it in the normal ways with your mouse or trackpad\n\nYou can also use the icons at the bottom to jump to the beginning or end or middle of the table.",
"Formula" : {
"Formula" : "1:50 * 1\"m\""
},
"name" : "ColumnArray"
},
{
"DiagramNotes" : "y",
"DiagramY" : 125,
"DiagramX" : 90,
"displayUnit" : "cm",
"Type" : "Expression",
"Notes" : "Here the transpose function (which can be abbreviated as just tr) is used to create a row array.\n\nOnce again you can drag or scroll the results display, or use the icons at the bottom to jump the left or rightmost items.\n\nIn this case the display unit has been changed to \"cm\" (the unit name is displayed in blue if it is not the default).  You can click on the button to the right of the unit name to select a different unit from the unit browser.",
"Formula" : {
"Formula" : "{transpose 1:10 * 1\"m\"}"
},
"name" : "RowArray"
},
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : 180,
"displayUnit" : "ft^2",
"Type" : "Expression",
"Notes" : "Multiplying the ColumnArray by the RowArray creates a matrix.\n\nTapping on the info button beside the unit name will bring up a unit browser where you can choose a display unit.  \n\nIf a specific display unit is used, rather than the default, the unit type and name are displayed in blue.\n\nSee the dot function for matrix multiplication (inner product).",
"Formula" : {
"Formula" : "ColumnArray * RowArray"
},
"name" : "matrix"
},
{
"DiagramNotes" : "y",
"DiagramY" : 260,
"DiagramX" : 90,
"Type" : "Expression",
"Notes" : "Arrays can have string values as well",
"Formula" : {
"Formula" : "{fmt \"Row %3.0f\", 1:50}"
},
"name" : "StringArray"
},
{
"DiagramNotes" : "y",
"DiagramY" : 125,
"DiagramX" : 180,
"Type" : "Expression",
"Notes" : "Expressions can also display table values.  These often result from operations on a DataTable tool, but can also be created with functions as in this example.\n\nIf you tap on the column header titled \"Value\", the display unit name for that column will appear below the formula field.\n\nWith the column header selected, you can then click on the button to the right of that unit name and use the resulting unit browser to select the unit you wish to use to display the column results.\n\nChanging the display value never effects the actual calculations, only how the results are displayed.",
"Formula" : {
"Formula" : "{table {cc \"Name\", \"Value\"}\n\tStringArray, ColumnArray\n}"
},
"name" : "TableValue"
},
{
"DiagramNotes" : "y",
"DiagramY" : 205,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "Any two column array can be used as a complex number, with the first column representing the real component and the second the imaginary one.\n\nAll the complex value functions use table values to represent their results, with column 1 being labeled \"r\" and column 2 \"i\".",
"Formula" : {
"Formula" : "{complex 1, 2}"
},
"name" : "Complex"
},
{
"DiagramNotes" : "y",
"DiagramY" : 165,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -70,
"DiagramX" : 125,
"Type" : "Expression",
"Notes" : "Normally a single quote is used to add a comment to the end of a formula, but if the entire formula consists of a comment, it is interpreted as a string value.\n\nThis is handy for long strings as you just need to start them with a single quote.",
"Formula" : {
"Formula" : "'This string has several lines,\nsuch as this one,\nand this one\nand yet another one."
},
"name" : "LongerString2"
},
{
"DiagramNotes" : "y",
"DiagramY" : -115,
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "A string constant can be defined by including the desired text in double quotes.",
"Formula" : {
"Formula" : "\"Hello World\""
},
"name" : "ScalarString"
},
{
"DiagramNotes" : "y",
"DiagramY" : -70,
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "By using the expanded formula editor, you can create strings with more than one line, by enclosing the whole thing in double quotes.\n\nYou will notice that the string no longer fits completely in the display cell at the bottom, but if you click on that cell, a view will open that displays the entire string.\n\nHowever you can only change the value of the expression by editing the formula, not the displayed string.",
"Formula" : {
"Formula" : "\"This string has two\nlines.\""
},
"name" : "LongerString"
}
],
"DiagramX" : 15,
"Type" : "Model",
"Notes" : "Expressions can also contain strings",
"diagramScale" : 3,
"diagramX" : -35,
"name" : "Strings",
"diagramY" : 121.6666641235352
}
],
"DiagramX" : 45,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 2.19428563117981,
"diagramX" : -5,
"name" : "Expressions",
"HideInfo" : "n"
},
{
"diagramY" : 80.51873016357422,
"DiagramY" : 20,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -70,
"DiagramX" : -140,
"Type" : "Expression",
"Notes" : "Data tables are unlike other Math Minion tools in that they contain static data as compared to the dynamic formulas that other tools use.\n\nWhile formulas can be used to input values, the formulas are immediately evaluated and discarded, with only the result being retained.\n\nThis makes data tables ideal for storing the kind of information that is often stored in spreadsheet or database tables.\n\nThe analogy is stronger with the latter as spreadsheets mix their data and calculations in the same cells, whereas databases and Math Minion store static data in their tables and use external, and hence visible, operations to slice and dice this data into other table value representations, without altering the source data.",
"Formula" : {
"Formula" : "\"Just a note holder\""
},
"name" : "DataTables"
},
{
"Columns" : [
{
"displayUnit" : "date",
"unitDimensions" : "0 0 1 0 0 0 0",
"defaultValue" : "{mktime {int {date {now}}}}",
"name" : "Date",
"nValues" : [
1179964800,
1180051200,
1180137600,
1180224000,
1180310400,
1180396800,
1180483200,
1180569600,
1180656000,
1180742400,
1180828800,
1180915200,
1181001600,
1181088000,
1181174400,
1181260800,
1181347200,
1181433600,
1181520000,
1181606400,
1181692800,
1181779200,
1181865600,
1181952000,
1182038400,
1182124800,
1182211200,
1182297600,
1182384000,
1182470400,
1182556800,
1182643200,
1182729600,
1182816000,
1182902400,
1182988800,
1183075200,
1183161600,
1183248000,
1183334400,
1183420800,
1183507200,
1183593600,
1183680000,
1183766400,
1183852800,
1183939200,
1184025600,
1184112000,
1184198400,
1184284800,
1184371200,
1184457600,
1184544000,
1184630400,
1184716800,
1184803200,
1184889600,
1184976000,
1185062400,
1185148800,
1185235200,
1185321600,
1185408000,
1185494400,
1185580800,
1185667200,
1185753600,
1185840000,
1185926400,
1186012800,
1186099200,
1186185600,
1186272000,
1186358400,
1186444800,
1186531200,
1186617600,
1186704000,
1186790400,
1186876800,
1186963200,
1187049600,
1187136000,
1187222400,
1187308800,
1187395200,
1187481600,
1187568000,
1187654400,
1187740800,
1187827200,
1187913600,
1188000000,
1188086400,
1188172800,
1188259200,
1188345600,
1188432000,
1188518400,
1188604800,
1188691200,
1188777600,
1188864000,
1188950400,
1189036800,
1189123200,
1189209600,
1189296000,
1189382400,
1189468800,
1189555200,
1189641600,
1189728000,
1189814400,
1189900800,
1189987200,
1190073600,
1190160000,
1190246400,
1190332800,
1190419200,
1190505600,
1190592000,
1190678400,
1190764800,
1190851200,
1190937600,
1191024000,
1191110400,
1191196800,
1191283200,
1191369600,
1191456000,
1191542400,
1191628800,
1191715200,
1191801600,
1191888000,
1191974400,
1192060800,
1192147200,
1192233600,
1192320000,
1192406400,
1192492800,
1192579200,
1192665600,
1192752000,
1192838400,
1192924800,
1193011200,
1193097600,
1193184000,
1193270400,
1193356800,
1193443200,
1193529600,
1193616000,
1193702400,
1193788800,
1193875200,
1193961600,
1194048000,
1194134400,
1194220800,
1194307200,
1194393600,
1194480000,
1194566400,
1194652800,
1194739200,
1194825600,
1194912000,
1194998400,
1195084800,
1195171200,
1195257600,
1195344000,
1195430400,
1195516800,
1195603200,
1195689600,
1195776000,
1195862400,
1195948800,
1196035200,
1196121600,
1196208000,
1196294400,
1196380800,
1196467200,
1196553600,
1196640000,
1196726400,
1196812800,
1196899200,
1196985600,
1197072000,
1197158400,
1197244800,
1197331200,
1197417600,
1197504000,
1197590400,
1197676800,
1197763200,
1197849600,
1197936000,
1198022400,
1198108800,
1198195200,
1198281600,
1198368000,
1198454400,
1198540800,
1198627200,
1198713600,
1198800000,
1198886400,
1198972800,
1199059200,
1199145600,
1199232000,
1199318400,
1199404800,
1199491200,
1199577600,
1199664000,
1199750400,
1199836800,
1199923200,
1200009600,
1200096000,
1200182400,
1200268800,
1200355200,
1200441600,
1200528000,
1200614400,
1200700800,
1200787200,
1200873600,
1200960000,
1201046400,
1201132800,
1201219200,
1201305600,
1201392000,
1201478400,
1201564800,
1201651200,
1201737600,
1201824000,
1201910400,
1201996800,
1202083200,
1202169600,
1202256000,
1202342400,
1202428800,
1202515200,
1202601600,
1202688000,
1202774400,
1202860800,
1202947200,
1203033600,
1203120000,
1203206400,
1203292800,
1203379200,
1203465600,
1203552000,
1203638400,
1203724800,
1203811200,
1203897600,
1203984000,
1204070400,
1204156800,
1204243200,
1204329600,
1204416000,
1204502400,
1204588800,
1204675200,
1204761600,
1204848000,
1204934400,
1205020800,
1205107200,
1205193600,
1205280000,
1205366400,
1205452800,
1205539200,
1205625600,
1205712000,
1205798400,
1205884800,
1205971200,
1206057600,
1206144000,
1206230400,
1206316800,
1206403200,
1206489600,
1206576000,
1206662400,
1206748800,
1206835200,
1206921600,
1207008000,
1207094400,
1207180800,
1207267200,
1207353600,
1207440000,
1207526400,
1207612800,
1207699200,
1207785600,
1207872000,
1207958400,
1208044800,
1208131200,
1208217600,
1208304000,
1208390400,
1208476800,
1208563200,
1208649600,
1208736000,
1208822400,
1208908800,
1208995200,
1209081600,
1209168000,
1209254400,
1209340800,
1209427200,
1209513600,
1209600000,
1209686400,
1209772800,
1209859200,
1209945600,
1210032000,
1210118400,
1210204800,
1210291200,
1210377600,
1210464000,
1210550400,
1210636800,
1210723200,
1210809600,
1210896000,
1210982400,
1211068800,
1211155200,
1211241600,
1211328000,
1211414400,
1211500800,
1211587200,
1211673600,
1211760000,
1211846400,
1211932800,
1212019200,
1212105600,
1212192000,
1212278400,
1212364800,
1212451200,
1212537600,
1212624000,
1212710400,
1212796800,
1212883200,
1212969600,
1213056000,
1213142400,
1213228800,
1213315200,
1213401600,
1213488000,
1213574400,
1213660800,
1213747200,
1213833600,
1213920000,
1214006400,
1214092800,
1214179200,
1214265600,
1214352000,
1214438400,
1214524800,
1214611200,
1214697600,
1214784000,
1214870400,
1214956800,
1215043200,
1215129600,
1215216000,
1215302400,
1215388800,
1215475200,
1215561600,
1215648000,
1215734400,
1215820800,
1215907200,
1215993600,
1216080000,
1216166400,
1216252800,
1216339200,
1216425600,
1216512000,
1216598400,
1216684800,
1216771200,
1216857600,
1216944000,
1217030400,
1217116800,
1217203200,
1217289600,
1217376000,
1217462400,
1217548800,
1217635200,
1217721600,
1217808000,
1217894400,
1217980800,
1218067200,
1218153600,
1218240000,
1218326400,
1218412800,
1218499200,
1218585600,
1218672000,
1218758400,
1218844800,
1218931200,
1219017600,
1219104000,
1219190400,
1219276800,
1219363200,
1219449600,
1219536000,
1219622400,
1219708800,
1219795200,
1219881600,
1219968000,
1220054400,
1220140800,
1220227200,
1220313600,
1220400000,
1220486400,
1220572800,
1220659200,
1220745600,
1220832000,
1220918400,
1221004800,
1221091200,
1221177600,
1221264000,
1221350400,
1221436800,
1221523200,
1221609600,
1221696000,
1221782400,
1221868800,
1221955200,
1222041600,
1222128000,
1222214400,
1222300800,
1222387200,
1222473600,
1222560000,
1222646400,
1222732800,
1222819200,
1222905600,
1222992000,
1223078400,
1223164800,
1223251200,
1223337600,
1223424000,
1223510400,
1223596800,
1223683200,
1223769600,
1223856000,
1223942400,
1224028800,
1224115200,
1224201600,
1224288000,
1224374400,
1224460800,
1224547200,
1224633600,
1224720000,
1224806400,
1224892800,
1224979200,
1225065600,
1225152000,
1225238400,
1225324800,
1225411200,
1225497600,
1225584000,
1225670400,
1225756800,
1225843200,
1225929600,
1226016000,
1226102400,
1226188800,
1226275200,
1226361600,
1226448000,
1226534400,
1226620800,
1226707200,
1226793600,
1226880000,
1226966400,
1227052800,
1227139200,
1227225600,
1227312000,
1227398400,
1227484800,
1227571200,
1227657600,
1227744000,
1227830400,
1227916800,
1228003200,
1228089600,
1228176000,
1228262400,
1228348800,
1228435200,
1228521600,
1228608000,
1228694400,
1228780800,
1228867200,
1228953600,
1229040000,
1229126400,
1229212800,
1229299200,
1229385600,
1229472000,
1229558400,
1229644800,
1229731200,
1229817600,
1229904000,
1229990400,
1230076800,
1230163200,
1230249600,
1230336000,
1230422400,
1230508800,
1230595200,
1230681600,
1230768000,
1230854400,
1230940800,
1231027200,
1231113600,
1231200000,
1231286400,
1231372800,
1231459200,
1231545600,
1231632000,
1231718400,
1231804800,
1231891200,
1231977600,
1232064000,
1232150400,
1232236800,
1232323200,
1232409600,
1232496000,
1232582400,
1232668800,
1232755200,
1232841600,
1232928000,
1233014400,
1233100800,
1233187200,
1233273600,
1233360000,
1233446400,
1233532800,
1233619200,
1233705600,
1233792000,
1233878400,
1233964800,
1234051200,
1234137600,
1234224000,
1234310400,
1234396800,
1234483200,
1234569600,
1234656000,
1234742400,
1234828800,
1234915200,
1235001600,
1235088000,
1235174400,
1235260800,
1235347200,
1235433600,
1235520000,
1235606400,
1235692800,
1235779200,
1235865600,
1235952000,
1236038400,
1236124800,
1236211200,
1236297600,
1236384000,
1236470400,
1236556800,
1236643200,
1236729600,
1236816000,
1236902400,
1236988800,
1237075200,
1237161600,
1237248000,
1237334400,
1237420800,
1237507200,
1237593600,
1237680000,
1237766400,
1237852800,
1237939200,
1238025600,
1238112000,
1238198400,
1238284800,
1238371200,
1238457600,
1238544000,
1238630400,
1238716800,
1238803200,
1238889600,
1238976000,
1239062400,
1239148800,
1239235200,
1239321600,
1239408000,
1239494400,
1239580800,
1239667200,
1239753600,
1239840000,
1239926400,
1240012800,
1240099200,
1240185600,
1240272000,
1240358400,
1240444800,
1240531200,
1240617600,
1240704000,
1240790400,
1240876800,
1240963200,
1241049600,
1241136000,
1241222400,
1241308800,
1241395200,
1241481600,
1241568000,
1241654400,
1241740800,
1241827200,
1241913600,
1242000000,
1242086400,
1242172800,
1242259200,
1242345600,
1242432000,
1242518400,
1242604800,
1242691200,
1242777600,
1242864000,
1242950400,
1243036800,
1243123200,
1243209600,
1243296000,
1243382400,
1243468800,
1243555200,
1243641600,
1243728000,
1243814400,
1243900800,
1243987200,
1244073600,
1244160000,
1244246400,
1244332800,
1244419200,
1244505600,
1244592000,
1244678400,
1244764800,
1244851200,
1244937600,
1245024000,
1245110400,
1245196800,
1245283200,
1245369600,
1245456000,
1245542400,
1245628800,
1245715200,
1245801600,
1245888000,
1245974400,
1246060800,
1246147200,
1246233600,
1246320000,
1246406400,
1246492800,
1246579200,
1246665600,
1246752000,
1246838400,
1246924800,
1247011200,
1247097600,
1247184000,
1247270400,
1247356800,
1247443200,
1247529600,
1247616000,
1247702400,
1247788800,
1247875200,
1247961600,
1248048000,
1248134400,
1248220800,
1248307200,
1248393600,
1248480000,
1248566400,
1248652800,
1248739200,
1248825600,
1248912000,
1248998400,
1249084800,
1249171200,
1249257600,
1249344000,
1249430400,
1249516800,
1249603200,
1249689600,
1249776000,
1249862400,
1249948800,
1250035200,
1250121600,
1250208000,
1250294400,
1250380800,
1250467200,
1250553600,
1250640000,
1250726400,
1250812800,
1250899200,
1250985600,
1251072000,
1251158400,
1251244800,
1251331200,
1251417600,
1251504000,
1251590400,
1251676800,
1251763200,
1251849600,
1251936000,
1252022400,
1252108800,
1252195200,
1252281600,
1252368000,
1252454400,
1252540800,
1252627200,
1252713600,
1252800000,
1252886400,
1252972800,
1253059200,
1253145600,
1253232000,
1253318400,
1253404800,
1253491200,
1253577600,
1253664000,
1253750400,
1253836800,
1253923200,
1254009600,
1254096000,
1254182400,
1254268800,
1254355200,
1254441600,
1254528000,
1254614400,
1254700800,
1254787200,
1254873600,
1254960000,
1255046400,
1255132800,
1255219200,
1255305600,
1255392000,
1255478400,
1255564800,
1255651200,
1255737600,
1255824000,
1255910400,
1255996800,
1256083200,
1256169600,
1256256000,
1256342400,
1256428800,
1256515200,
1256601600,
1256688000,
1256774400,
1256860800,
1256947200,
1257033600,
1257120000,
1257206400,
1257292800,
1257379200,
1257465600,
1257552000,
1257638400,
1257724800,
1257811200,
1257897600,
1257984000,
1258070400,
1258156800,
1258243200,
1258329600,
1258416000,
1258502400,
1258588800,
1258675200,
1258761600,
1258848000,
1258934400,
1259020800,
1259107200,
1259193600,
1259280000,
1259366400,
1259452800,
1259539200,
1259625600,
1259712000,
1259798400,
1259884800,
1259971200,
1260057600,
1260144000,
1260230400,
1260316800,
1260403200,
1260489600,
1260576000,
1260662400,
1260748800,
1260835200,
1260921600,
1261008000,
1261094400,
1261180800,
1261267200,
1261353600,
1261440000,
1261526400,
1261612800,
1261699200,
1261785600,
1261872000,
1261958400,
1262044800,
1262131200,
1262217600,
1262304000,
1262390400,
1262476800,
1262563200,
1262649600,
1262736000,
1262822400,
1262908800,
1262995200,
1263081600,
1263168000,
1263254400,
1263340800,
1263427200,
1263513600,
1263600000,
1263686400,
1263772800,
1263859200,
1263945600,
1264032000,
1264118400,
1264204800,
1264291200,
1264377600,
1264464000,
1264550400,
1264636800,
1264723200,
1264809600,
1264896000,
1264982400,
1265068800,
1265155200,
1265241600,
1265328000,
1265414400,
1265500800,
1265587200,
1265673600,
1265760000,
1265846400,
1265932800,
1266019200,
1266105600,
1266192000,
1266278400,
1266364800,
1266451200,
1266537600,
1266624000,
1266710400,
1266796800,
1266883200,
1266969600,
1267056000,
1267142400,
1267228800,
1267315200,
1267401600,
1267488000,
1267574400,
1267660800,
1267747200,
1267833600,
1267920000,
1268006400,
1268092800,
1268179200,
1268265600,
1268352000,
1268438400,
1268524800,
1268611200,
1268697600,
1268784000,
1268870400,
1268956800,
1269043200,
1269129600,
1269216000,
1269302400,
1269388800,
1269475200,
1269561600,
1269648000,
1269734400,
1269820800,
1269907200,
1269993600,
1270080000,
1270166400,
1270252800,
1270339200,
1270425600,
1270512000,
1270598400,
1270684800,
1270771200,
1270857600,
1270944000,
1271030400,
1271116800,
1271203200,
1271289600,
1271376000,
1271462400,
1271548800,
1271635200,
1271721600,
1271808000,
1271894400,
1271980800,
1272067200,
1272153600,
1272240000,
1272326400,
1272412800,
1272499200,
1272585600,
1272672000,
1272758400,
1272844800,
1272931200,
1273017600,
1273104000,
1273190400,
1273276800,
1273363200,
1273449600,
1273536000,
1273622400,
1273708800,
1273795200,
1273881600,
1273968000,
1274054400,
1274140800,
1274227200,
1274313600,
1274400000,
1274486400,
1274572800,
1274659200,
1274745600,
1274832000,
1274918400,
1275004800,
1275091200,
1275177600,
1275264000,
1275350400,
1275436800,
1275523200,
1275609600,
1275696000,
1275782400,
1275868800,
1275955200,
1276041600,
1276128000,
1276214400,
1276300800,
1276387200,
1276473600,
1276560000,
1276646400,
1276732800,
1276819200,
1276905600,
1276992000,
1277078400,
1277164800,
1277251200,
1277337600,
1277424000,
1277510400,
1277596800,
1277683200,
1277769600,
1277856000,
1277942400,
1278028800,
1278115200,
1278201600,
1278288000,
1278374400,
1278460800,
1278547200,
1278633600,
1278720000,
1278806400,
1278892800,
1278979200,
1279065600,
1279152000,
1279238400,
1279324800,
1279411200,
1279497600,
1279584000,
1279670400,
1279756800,
1279843200,
1279929600,
1280016000,
1280102400,
1280188800,
1280275200,
1280361600,
1280448000,
1280534400,
1280620800,
1280707200,
1280793600,
1280880000,
1280966400,
1281052800,
1281139200,
1281225600,
1281312000,
1281398400,
1281484800,
1281571200,
1281657600,
1281744000,
1281830400,
1281916800,
1282003200,
1282089600,
1282176000,
1282262400,
1282348800,
1282435200,
1282521600,
1282608000,
1282694400,
1282780800,
1282867200,
1282953600,
1283040000,
1283126400,
1283212800,
1283299200,
1283385600,
1283472000,
1283558400,
1283644800,
1283731200,
1283817600,
1283904000,
1283990400,
1284076800,
1284163200,
1284249600,
1284336000,
1284422400,
1284508800,
1284595200,
1284681600,
1284768000,
1284854400,
1284940800,
1285027200,
1285113600,
1285200000,
1285286400,
1285372800,
1285459200,
1285545600,
1285632000,
1285718400,
1285804800,
1285891200,
1285977600,
1286064000,
1286150400,
1286236800,
1286323200,
1286409600,
1286496000,
1286582400,
1286668800,
1286755200,
1286841600,
1286928000,
1287014400,
1287100800,
1287187200,
1287273600,
1287360000,
1287446400,
1287532800,
1287619200,
1287705600,
1287792000,
1287878400,
1287964800,
1288051200,
1288137600,
1288224000,
1288310400,
1288396800,
1288483200,
1288569600,
1288656000,
1288742400,
1288828800,
1288915200,
1289001600,
1289088000,
1289174400,
1289260800,
1289347200,
1289433600,
1289520000,
1289606400,
1289692800,
1289779200,
1289865600,
1289952000,
1290038400,
1290124800,
1290211200,
1290297600,
1290384000,
1290470400,
1290556800,
1290643200,
1290729600,
1290816000,
1290902400,
1290988800,
1291075200,
1291161600,
1291248000,
1291334400,
1291420800,
1291507200,
1291593600,
1291680000,
1291766400,
1291852800,
1291939200,
1292025600,
1292112000,
1292198400,
1292284800,
1292371200,
1292457600,
1292544000,
1292630400,
1292716800,
1292803200,
1292889600,
1292976000,
1293062400,
1293148800,
1293235200,
1293321600,
1293408000,
1293494400,
1293580800,
1293667200,
1293753600,
1293840000,
1293926400,
1294012800,
1294099200,
1294185600,
1294272000,
1294358400,
1294444800,
1294531200,
1294617600,
1294704000,
1294790400,
1294876800,
1294963200,
1295049600,
1295136000,
1295222400,
1295308800,
1295395200,
1295481600,
1295568000,
1295654400,
1295740800,
1295827200,
1295913600,
1296000000,
1296086400,
1296172800,
1296259200,
1296345600,
1296432000,
1296518400,
1296604800,
1296691200,
1296777600,
1296864000,
1296950400,
1297036800,
1297123200,
1297209600,
1297296000,
1297382400,
1297468800,
1297555200,
1297641600,
1297728000,
1297814400,
1297900800,
1297987200,
1298073600,
1298160000,
1298246400,
1298332800,
1298419200,
1298505600,
1298592000,
1298678400,
1298764800,
1298851200,
1298937600,
1299024000,
1299110400,
1299196800,
1299283200,
1299369600,
1299456000,
1299542400,
1299628800,
1299715200,
1299801600,
1299888000,
1299974400,
1300060800,
1300147200,
1300233600,
1300320000,
1300406400,
1300492800,
1300579200,
1300665600,
1300752000,
1300838400,
1300924800,
1301011200,
1301097600,
1301184000,
1301270400,
1301356800,
1301443200,
1301529600,
1301616000,
1301702400,
1301788800,
1301875200,
1301961600,
1302048000,
1302134400,
1302220800,
1302307200,
1302393600,
1302480000,
1302566400,
1302652800,
1302739200,
1302825600,
1302912000,
1302998400,
1303084800,
1303171200,
1303257600,
1303344000,
1303430400,
1303516800,
1303603200,
1303689600,
1303776000,
1303862400,
1303948800,
1304035200,
1304121600,
1304208000,
1304294400,
1304380800,
1304467200,
1304553600,
1304640000,
1304726400,
1304812800,
1304899200,
1304985600,
1305072000,
1305158400,
1305244800,
1305331200,
1305417600,
1305504000,
1305590400,
1305676800,
1305763200,
1305849600,
1305936000,
1306022400,
1306108800,
1306195200,
1306281600,
1306368000,
1306454400,
1306540800,
1306627200,
1306713600,
1306800000,
1306886400,
1306972800,
1307059200,
1307145600,
1307232000,
1307318400,
1307404800,
1307491200,
1307577600,
1307664000,
1307750400,
1307836800,
1307923200,
1308009600,
1308096000,
1308182400,
1308268800,
1308355200,
1308441600,
1308528000,
1308614400,
1308700800,
1308787200,
1308873600,
1308960000,
1309046400,
1309132800,
1309219200,
1309305600,
1309392000,
1309478400,
1309564800,
1309651200,
1309737600,
1309824000,
1309910400,
1309996800,
1310083200,
1310169600,
1310256000,
1310342400,
1310428800,
1310515200,
1310601600,
1310688000,
1310774400,
1310860800,
1310947200,
1311033600,
1311120000,
1311206400,
1311292800,
1311379200,
1311465600,
1311552000,
1311638400,
1311724800,
1311811200,
1311897600,
1311984000,
1312070400,
1312156800,
1312243200,
1312329600,
1312416000,
1312502400,
1312588800,
1312675200,
1312761600,
1312848000,
1312934400,
1313020800,
1313107200,
1313193600,
1313280000,
1313366400,
1313452800,
1313539200,
1313625600,
1313712000,
1313798400,
1313884800,
1313971200,
1314057600,
1314144000,
1314230400,
1314316800,
1314403200,
1314489600,
1314576000,
1314662400,
1314748800,
1314835200,
1314921600,
1315008000,
1315094400,
1315180800,
1315267200,
1315353600,
1315440000,
1315526400,
1315612800,
1315699200,
1315785600,
1315872000,
1315958400,
1316044800,
1316131200,
1316217600,
1316304000,
1316390400,
1316476800,
1316563200,
1316649600,
1316736000,
1316822400,
1316908800,
1316995200,
1317081600,
1317168000,
1317254400,
1317340800,
1317427200,
1317513600,
1317600000,
1317686400,
1317772800,
1317859200,
1317945600,
1318032000,
1318118400,
1318204800,
1318291200,
1318377600,
1318464000,
1318550400,
1318636800,
1318723200,
1318809600,
1318896000,
1318982400,
1319068800,
1319155200,
1319241600,
1319328000,
1319414400,
1319500800,
1319587200,
1319673600,
1319760000,
1319846400,
1319932800,
1320019200,
1320105600,
1320192000,
1320278400,
1320364800,
1320451200,
1320537600,
1320624000,
1320710400,
1320796800,
1320883200,
1320969600,
1321056000,
1321142400,
1321228800,
1321315200,
1321401600,
1321488000,
1321574400,
1321660800,
1321747200,
1321833600,
1321920000,
1322006400,
1322092800,
1322179200,
1322265600,
1322352000,
1322438400,
1322524800,
1322611200,
1322697600,
1322784000,
1322870400,
1322956800,
1323043200,
1323129600,
1323216000,
1323302400,
1323388800,
1323475200,
1323561600,
1323648000,
1323734400,
1323820800,
1323907200,
1323993600,
1324080000,
1324166400,
1324252800,
1324339200,
1324425600,
1324512000,
1324598400,
1324684800,
1324771200,
1324857600,
1324944000,
1325030400,
1325116800,
1325203200,
1325289600,
1325376000,
1325462400,
1325548800,
1325635200,
1325721600,
1325808000,
1325894400,
1325980800,
1326067200,
1326153600,
1326240000,
1326326400,
1326412800,
1326499200,
1326585600,
1326672000,
1326758400,
1326844800,
1326931200,
1327017600,
1327104000,
1327190400,
1327276800,
1327363200,
1327449600,
1327536000,
1327622400,
1327708800,
1327795200,
1327881600,
1327968000,
1328054400,
1328140800,
1328227200,
1328313600,
1328400000,
1328486400,
1328572800,
1328659200,
1328745600,
1328832000,
1328918400,
1329004800,
1329091200,
1329177600,
1329264000,
1329350400,
1329436800,
1329523200,
1329609600,
1329696000,
1329782400,
1329868800,
1329955200,
1330041600,
1330128000,
1330214400,
1330300800,
1330387200,
1330473600,
1330560000,
1330646400,
1330732800,
1330819200,
1330905600,
1330992000,
1331078400,
1331164800,
1331251200,
1331337600,
1331424000,
1331510400,
1331596800,
1331683200,
1331769600,
1331856000,
1331942400,
1332028800,
1332115200,
1332201600,
1332288000,
1332374400,
1332460800,
1332547200,
1332633600,
1332720000,
1332806400,
1332892800,
1332979200,
1333065600,
1333152000,
1333238400,
1333324800,
1333411200,
1333497600,
1333584000,
1333670400,
1333756800,
1333843200,
1333929600,
1334016000,
1334102400,
1334188800,
1334275200,
1334361600,
1334448000,
1334534400,
1334620800,
1334707200,
1334793600,
1334880000,
1334966400,
1335052800,
1335139200,
1335225600,
1335312000,
1335398400,
1335484800,
1335571200,
1335657600,
1335744000,
1335830400,
1335916800,
1336003200,
1336089600,
1336176000,
1336262400,
1336348800,
1336435200,
1336521600,
1336608000,
1336694400,
1336780800,
1336867200,
1336953600,
1337040000,
1337126400,
1337212800,
1337299200,
1337385600,
1337472000,
1337558400,
1337644800,
1337731200,
1337817600,
1337904000,
1337990400,
1338076800,
1338163200,
1338249600,
1338336000,
1338422400,
1338508800,
1338595200,
1338681600,
1338768000,
1338854400,
1338940800,
1339027200,
1339113600,
1339200000,
1339286400,
1339372800,
1339459200,
1339545600,
1339632000,
1339718400,
1339804800,
1339891200,
1339977600,
1340064000,
1340150400,
1340236800,
1340323200,
1340409600,
1340496000,
1340582400,
1340668800,
1340755200,
1340841600,
1340928000,
1341014400,
1341100800,
1341187200,
1341273600,
1341360000,
1341446400,
1341532800,
1341619200,
1341705600,
1341792000,
1341878400,
1341964800,
1342051200,
1342137600,
1342224000,
1342310400,
1342396800,
1342483200,
1342569600,
1342656000,
1342742400,
1342828999,
1342915200,
1343001600,
1343088000,
1343174400,
1343260800,
1343347200,
1343433600,
1343520000,
1343606400,
1343692800,
1343779200,
1343865600,
1343952000,
1344038400,
1344124800,
1344211200,
1344470400,
1344556800,
1344643200,
1344729600,
1344816000,
1344902400,
1344988800,
1345075200,
1345161600,
1345248000
]
},
{
"displayUnit" : "degC",
"unitDimensions" : "0 0 0 0 1 0 0",
"defaultValue" : "EmptyT",
"name" : "MinT",
"nValues" : [
276.25,
271.25,
271.55,
268.15,
278.25,
278.25,
275.25,
275.65,
278.25,
281.25,
281.65,
284.25,
281.25,
281.25,
273.15,
280.25,
-12047.85,
-12047.85,
277.75,
273.15,
275.25,
278.25,
268.15,
278.25,
277.65,
279.25,
277.75,
278.25,
280.25,
280.25,
281.35,
280.25,
268.05,
271.55,
268.05,
282.25,
285.25,
285.25,
-12047.85,
277.25,
282.25,
282.25,
281.25,
281.25,
287.25,
281.25,
283.25,
282.25,
281.25,
286.25,
281.25,
281.25,
281.25,
286.25,
281.25,
281.25,
287.25,
281.25,
281.25,
281.35,
281.75,
289.25,
281.25,
281.85,
281.25,
285.25,
282.25,
281.25,
282.25,
280.25,
281.25,
281.25,
281.25,
282.25,
281.35,
281.25,
284.25,
-12047.85,
280.45,
275.25,
275.25,
280.25,
280.25,
277.75,
281.35,
281.35,
-12047.85,
280.35,
284.25,
281.25,
276.25,
277.25,
279.25,
279.25,
281.45,
279.25,
275.25,
276.25,
274.65,
277.95,
281.75,
274.85,
280.25,
282.25,
279.25,
277.85,
-12047.85,
274.25,
275.25,
273.25,
274.25,
276.25,
271.55,
271.25,
273.25,
273.25,
276.25,
273.25,
274.25,
271.65,
275.25,
275.75,
266.45,
271.25,
271.25,
275.65,
272.25,
274.05,
277.25,
277.25,
275.75,
276.05,
271.65,
271.65,
271.65,
266.65,
273.25,
278.25,
275.25,
275.25,
277.25,
271.75,
271.75,
271.25,
270.35,
271.25,
267.15,
275.25,
275.25,
271.25,
272.05,
273.25,
275.25,
277.25,
265.45,
264.85,
264.85,
265.25,
270.25,
272.25,
265.15,
270.25,
264.85,
265.25,
275.25,
264.85,
264.45,
269.25,
265.95,
266.05,
275.25,
272.35,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
273.15,
258.25,
258.25,
-12047.85,
-12047.85,
-12047.85,
261.85,
259.75,
251.25,
251.25,
257.25,
255.75,
271.75,
274.25,
270.25,
264.25,
256.25,
254.25,
256.25,
255.65,
259.25,
262.25,
259.75,
261.25,
265.25,
266.15,
266.15,
266.15,
272.15,
258.85,
255.65,
258.25,
266.15,
264.85,
264.65,
250.85,
261.25,
264.25,
264.25,
267.25,
259.25,
250.95,
259.25,
264.25,
271.75,
265.45,
265.45,
264.25,
264.65,
264.65,
268.25,
271.25,
271.25,
271.25,
266.05,
253.25,
252.25,
261.95,
258.95,
259.55,
245.25,
245.25,
254.25,
251.25,
250.25,
250.25,
264.25,
250.85,
247.25,
247.25,
259.25,
264.25,
264.25,
258.85,
262.25,
250.95,
267.25,
264.25,
264.25,
257.25,
256.25,
259.25,
271.25,
272.25,
266.15,
265.55,
270.25,
261.25,
250.85,
259.25,
260.25,
260.25,
261.25,
262.25,
261.95,
265.35,
264.25,
271.25,
275.25,
271.25,
273.25,
270.65,
270.25,
269.25,
265.45,
266.15,
265.35,
-12047.85,
266.15,
268.25,
266.75,
271.25,
265.25,
266.15,
266.15,
271.25,
271.25,
271.85,
265.25,
265.25,
265.45,
265.45,
264.25,
265.25,
261.25,
250.95,
261.85,
267.75,
269.25,
264.65,
-12047.85,
-12047.85,
250.55,
264.35,
266.25,
272.25,
271.25,
271.75,
271.25,
267.25,
266.15,
266.15,
268.25,
270.25,
271.25,
271.65,
270.25,
265.55,
273.25,
266.65,
263.25,
264.25,
266.05,
266.05,
269.25,
272.25,
267.25,
265.95,
270.25,
272.25,
271.25,
269.25,
269.25,
265.95,
271.25,
272.25,
272.15,
271.25,
271.65,
274.65,
271.25,
274.25,
271.65,
275.25,
275.75,
271.65,
271.65,
276.25,
277.65,
274.75,
281.45,
274.65,
274.75,
274.55,
280.25,
278.25,
279.25,
274.95,
277.85,
275.25,
266.45,
-12047.85,
274.85,
281.55,
279.25,
279.85,
277.25,
277.25,
274.85,
279.75,
274.75,
277.25,
274.25,
273.25,
276.25,
279.85,
271.65,
276.25,
275.65,
277.75,
275.05,
275.65,
280.25,
280.25,
280.25,
280.25,
278.25,
278.25,
277.25,
277.95,
280.55,
281.45,
286.25,
281.45,
281.45,
281.55,
281.45,
286.25,
280.25,
277.85,
280.55,
288.25,
277.25,
274.75,
280.05,
281.25,
-12047.85,
281.25,
279.95,
279.25,
280.55,
280.05,
280.25,
283.25,
281.45,
281.45,
280.05,
280.25,
280.25,
281.45,
280.05,
280.25,
275.65,
277.85,
281.55,
280.25,
277.25,
279.85,
277.95,
281.55,
-12047.85,
-12047.85,
-12047.85,
280.55,
279.25,
280.25,
281.25,
281.25,
280.25,
281.55,
281.55,
288.25,
285.25,
282.25,
277.45,
277.25,
279.85,
280.35,
280.25,
277.55,
274.85,
-12047.85,
281.65,
282.25,
279.25,
275.75,
277.25,
275.25,
275.25,
277.25,
277.25,
271.25,
-12047.85,
275.25,
273.25,
273.25,
275.25,
271.75,
-12047.85,
-12047.85,
275.25,
-12047.85,
274.75,
-12047.85,
280.25,
-12047.85,
275.75,
272.15,
272.25,
274.75,
271.75,
271.75,
272.25,
273.25,
274.25,
-12047.85,
275.65,
280.25,
274.95,
274.25,
-12047.85,
275.65,
-12047.85,
-12047.85,
269.65,
264.25,
266.15,
271.45,
268.45,
268.25,
-12047.85,
280.15,
271.25,
271.25,
271.85,
266.15,
264.25,
264.25,
266.95,
264.65,
264.65,
266.25,
267.25,
268.25,
271.85,
273.25,
276.25,
274.85,
-12047.85,
270.25,
268.35,
268.25,
271.25,
273.25,
275.85,
275.25,
271.95,
275.25,
266.25,
267.25,
274.75,
276.25,
274.65,
264.35,
264.35,
264.45,
272.05,
269.25,
264.65,
264.45,
264.85,
263.25,
263.25,
266.25,
270.35,
270.35,
270.25,
266.25,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
270.25,
-12047.85,
258.25,
249.25,
248.25,
245.25,
245.25,
256.25,
251.25,
244.25,
243.25,
248.25,
253.25,
255.25,
251.15,
260.25,
259.85,
264.85,
264.25,
264.65,
261.85,
264.65,
262.35,
246.35,
246.25,
254.25,
264.25,
271.25,
271.85,
271.85,
271.85,
271.35,
264.25,
-12047.85,
271.85,
266.15,
269.25,
271.25,
268.25,
264.65,
250.95,
250.95,
251.05,
256.65,
254.25,
252.25,
247.25,
247.25,
249.25,
261.25,
270.25,
271.25,
264.25,
264.25,
269.25,
268.25,
271.25,
264.35,
268.25,
265.25,
250.85,
263.25,
250.95,
272.15,
264.25,
264.25,
261.95,
261.95,
-12047.85,
-12047.85,
264.25,
266.25,
261.85,
261.85,
263.25,
271.85,
258.65,
256.05,
257.25,
260.25,
264.25,
268.25,
271.85,
272.25,
270.85,
252.25,
252.25,
259.75,
255.15,
251.25,
251.25,
251.25,
251.05,
264.25,
272.25,
271.25,
270.25,
264.25,
267.45,
271.85,
271.85,
271.25,
271.35,
271.85,
271.25,
250.85,
263.25,
271.35,
271.25,
264.25,
264.25,
271.25,
264.25,
269.25,
267.25,
266.15,
266.15,
269.25,
270.25,
271.25,
271.25,
266.05,
270.25,
271.75,
272.25,
271.75,
266.05,
269.25,
269.25,
271.25,
274.25,
271.65,
275.95,
268.25,
-12047.85,
265.05,
270.25,
271.25,
271.25,
272.15,
266.05,
271.25,
270.25,
271.25,
276.25,
275.35,
275.25,
273.25,
272.25,
273.25,
271.25,
271.25,
275.25,
274.25,
271.75,
266.75,
272.25,
277.25,
277.45,
277.75,
275.25,
271.65,
271.65,
277.25,
277.75,
277.75,
276.25,
277.95,
277.25,
266.55,
274.95,
280.25,
280.15,
273.25,
276.25,
277.75,
281.25,
274.75,
274.25,
277.25,
274.55,
271.25,
273.25,
277.25,
281.25,
281.25,
280.25,
281.55,
280.25,
281.25,
280.25,
282.25,
280.25,
279.25,
274.75,
275.75,
277.85,
282.25,
275.25,
278.25,
274.75,
274.75,
274.75,
277.95,
280.25,
-12047.85,
284.25,
289.25,
280.25,
277.25,
277.95,
-12047.85,
277.65,
281.25,
281.55,
281.85,
280.25,
280.25,
281.25,
282.25,
285.25,
281.25,
281.25,
281.25,
281.55,
281.55,
281.55,
281.55,
284.25,
281.35,
281.25,
279.25,
281.25,
281.55,
281.55,
281.55,
286.25,
280.25,
281.55,
281.55,
280.25,
281.55,
284.25,
-12047.85,
281.55,
281.65,
280.25,
-12047.85,
-12047.85,
280.25,
-12047.85,
280.25,
280.25,
281.55,
281.55,
-12047.85,
278.25,
276.25,
277.25,
-12047.85,
275.75,
277.25,
280.25,
281.25,
281.55,
280.25,
280.55,
281.65,
274.85,
281.25,
280.25,
-12047.85,
275.75,
277.25,
274.85,
274.75,
276.25,
274.85,
277.25,
274.75,
280.25,
-12047.85,
274.85,
276.25,
270.25,
271.25,
274.25,
277.25,
277.95,
278.25,
271.75,
271.75,
274.25,
275.25,
-12047.85,
274.85,
271.85,
276.25,
275.25,
269.25,
269.25,
266.15,
265.25,
259.75,
258.85,
257.25,
258.35,
264.35,
270.25,
271.25,
271.85,
-12047.85,
-12047.85,
-12047.85,
275.25,
275.25,
275.25,
275.25,
267.25,
264.35,
272.25,
264.25,
270.25,
272.25,
271.25,
270.25,
266.05,
-12047.85,
266.15,
264.35,
268.25,
272.25,
272.25,
272.25,
272.25,
270.25,
264.25,
264.25,
264.35,
269.25,
270.25,
274.25,
274.25,
272.25,
270.25,
266.15,
269.25,
264.25,
271.85,
271.85,
271.25,
271.25,
266.15,
268.25,
271.85,
266.25,
250.85,
255.25,
255.25,
259.85,
258.25,
252.25,
246.25,
246.25,
253.25,
249.35,
261.75,
254.25,
249.25,
250.25,
249.85,
264.35,
271.85,
271.85,
264.25,
268.25,
267.25,
260.25,
252.25,
253.25,
248.25,
248.25,
250.25,
253.25,
249.35,
249.35,
259.85,
262.15,
270.25,
270.25,
264.25,
251.05,
246.25,
246.25,
251.25,
262.35,
-12047.85,
270.25,
272.25,
273.25,
271.85,
270.35,
268.25,
268.25,
264.25,
264.35,
264.25,
264.25,
265.25,
265.25,
264.35,
260.55,
259.25,
259.55,
258.85,
264.35,
264.35,
264.35,
268.25,
271.75,
271.25,
266.25,
264.35,
270.25,
270.45,
264.35,
264.35,
270.25,
271.25,
271.95,
270.25,
271.85,
271.85,
270.25,
270.25,
264.65,
264.25,
250.95,
251.05,
262.25,
264.25,
268.25,
271.35,
270.25,
268.25,
268.25,
268.25,
264.25,
264.25,
267.25,
267.25,
264.65,
267.25,
264.25,
269.25,
264.25,
271.25,
273.25,
269.95,
264.25,
264.35,
269.25,
267.25,
264.25,
264.65,
264.35,
266.35,
264.25,
270.25,
264.25,
270.25,
274.25,
270.25,
271.25,
271.25,
271.85,
270.25,
271.25,
272.25,
268.25,
264.65,
269.25,
271.85,
272.25,
266.15,
264.65,
269.25,
272.15,
271.25,
266.25,
-12047.85,
-12047.85,
270.45,
272.25,
272.25,
273.25,
-12047.85,
274.25,
274.95,
274.75,
271.25,
266.05,
266.05,
-12047.85,
271.75,
270.25,
271.25,
271.25,
274.85,
271.75,
272.25,
271.25,
271.85,
271.25,
271.75,
265.25,
271.75,
271.25,
272.25,
274.25,
271.75,
277.25,
266.65,
280.25,
-12047.85,
-12047.85,
271.75,
270.25,
271.25,
271.25,
271.75,
275.75,
279.25,
-12047.85,
274.75,
-12047.85,
-12047.85,
277.25,
274.95,
279.25,
-12047.85,
276.25,
274.75,
278.25,
277.25,
274.35,
-12047.85,
275.75,
275.25,
275.75,
280.25,
275.75,
277.75,
279.25,
-12047.85,
274.65,
-12047.85,
281.65,
280.25,
277.65,
280.25,
280.25,
-12047.85,
-12047.85,
-12047.85,
281.25,
281.55,
277.25,
280.25,
274.85,
-12047.85,
277.25,
274.55,
278.25,
-12047.85,
-12047.85,
281.65,
284.25,
281.65,
274.75,
277.25,
-12047.85,
280.25,
280.25,
280.55,
281.65,
277.25,
-12047.85,
-12047.85,
275.05,
281.25,
283.25,
283.25,
285.25,
285.25,
281.65,
283.25,
281.65,
281.65,
282.25,
281.65,
280.25,
283.25,
284.25,
281.65,
283.35,
281.75,
280.25,
282.25,
281.25,
280.25,
-12047.85,
279.25,
-12047.85,
-12047.85,
280.25,
281.65,
281.25,
278.25,
-12047.85,
276.25,
276.25,
276.25,
274.95,
-12047.85,
274.65,
-12047.85,
277.25,
275.25,
276.25,
271.85,
-12047.85,
-12047.85,
279.25,
274.85,
276.25,
277.25,
280.25,
277.65,
280.25,
275.85,
277.95,
277.25,
276.25,
277.25,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
271.85,
272.15,
273.25,
264.25,
264.35,
267.25,
269.25,
271.25,
270.35,
270.25,
272.25,
272.05,
272.05,
273.25,
272.15,
271.25,
271.25,
272.25,
270.25,
277.25,
-12047.85,
-12047.85,
268.25,
269.25,
277.65,
-12047.85,
274.25,
-12047.85,
267.25,
264.25,
268.25,
271.25,
272.25,
271.25,
271.25,
264.65,
-12047.85,
-12047.85,
258.25,
252.25,
253.25,
252.25,
-12047.85,
-12047.85,
-12047.85,
265.35,
264.35,
264.35,
266.25,
267.85,
269.25,
261.95,
263.25,
258.25,
251.25,
252.25,
258.25,
269.25,
270.25,
264.35,
264.35,
-12047.85,
271.95,
270.25,
266.25,
261.25,
255.25,
249.35,
257.25,
257.25,
257.25,
249.45,
259.25,
257.25,
257.25,
258.25,
264.35,
264.35,
257.25,
246.25,
247.25,
253.25,
258.25,
260.25,
261.25,
264.45,
272.25,
270.25,
259.55,
254.25,
246.25,
246.25,
255.25,
264.45,
274.25,
271.95,
272.25,
272.25,
259.25,
258.95,
268.25,
266.25,
266.25,
-12047.85,
264.25,
271.25,
271.25,
272.25,
271.25,
-12047.85,
247.25,
245.25,
245.25,
250.25,
257.25,
264.55,
267.25,
264.35,
260.25,
255.25,
254.25,
264.75,
271.95,
272.25,
264.35,
270.25,
271.25,
266.25,
261.25,
253.25,
255.25,
260.25,
266.25,
259.25,
253.25,
242.25,
243.35,
256.25,
261.35,
254.25,
254.25,
258.25,
270.25,
267.85,
261.75,
259.55,
258.85,
270.25,
270.35,
271.95,
264.35,
269.25,
271.95,
272.35,
271.95,
270.25,
268.25,
268.25,
270.25,
264.35,
264.35,
270.25,
269.25,
270.35,
270.25,
264.35,
270.25,
271.25,
271.85,
271.95,
-12047.85,
272.25,
264.55,
267.25,
270.25,
270.25,
270.25,
264.35,
266.25,
268.25,
271.95,
270.25,
264.35,
271.25,
271.95,
272.25,
271.25,
266.25,
264.35,
264.35,
271.25,
270.25,
264.25,
269.25,
271.25,
274.25,
271.85,
271.85,
271.95,
264.25,
264.25,
270.35,
275.25,
272.25,
274.45,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
273.15,
275.15,
280.15,
279.15,
274.15,
271.15,
274.15,
278.15,
-12047.85,
-12047.85,
-12047.85,
279.15,
279.15,
280.15,
274.15,
275.15,
273.15,
273.15,
274.15,
276.15,
276.15,
278.15,
277.15,
276.15,
279.15,
281.15,
281.15,
280.15,
281.15,
280.15,
279.15,
278.15,
281.15,
280.15,
280.15,
280.15,
281.15,
282.15,
282.15,
281.15,
-12047.85,
-12047.85,
284.15,
278.15,
275.15,
278.15,
281.15,
281.15,
-12047.85,
283.15,
277.15,
279.15,
281.15,
278.15,
280.15,
283.15,
285.15,
281.15,
277.15,
279.15,
281.15,
286.15,
283.15,
282.15,
278.15,
278.15,
284.15,
286.15,
284.15,
281.15,
282.15,
279.15,
278.15,
278.15,
283.15,
284.15,
279.15,
280.15,
279.15,
282.15,
286.15,
279.15,
279.15,
281.15,
281.15,
282.15,
282.15,
283.15,
281.15,
280.15,
280.15,
280.15,
280.15,
281.15,
280.15,
278.15,
278.15,
278.15,
276.15,
276.15,
276.15,
278.15,
285.15,
282.15,
282.15,
281.15,
281.15,
281.15,
281.15,
281.15,
283.15,
279.15,
279.15,
273.15,
273.15,
274.15,
276.15,
277.15,
277.15,
277.15,
277.15,
277.15,
277.15,
282.15,
281.15,
278.15,
278.15,
281.15,
279.15,
282.15,
272.15,
272.15,
278.15,
279.15,
284.15,
278.15,
278.15,
283.15,
280.15,
272.15,
272.15,
273.15,
280.15,
277.15,
277.15,
275.15,
277.15,
279.15,
278.15,
276.15,
276.15,
276.15,
277.15,
273.15,
271.15,
271.15,
-12047.85,
-12047.85,
270.15,
270.15,
270.15,
275.15,
275.15,
279.15,
269.15,
269.15,
267.15,
269.15,
268.15,
270.15,
275.15,
274.15,
268.15,
268.15,
268.15,
269.15,
269.15,
265.15,
265.15,
271.15,
270.15,
270.15,
275.15,
273.15,
272.15,
272.15,
262.15,
259.15,
259.15,
264.15,
253.15,
254.15,
256.15,
267.15,
275.15,
273.15,
273.15,
266.15,
269.15,
274.15,
274.15,
272.15,
266.15,
266.15,
263.15,
263.15,
260.15,
260.15,
264.15,
262.15,
260.15,
260.15,
260.15,
262.15,
260.15,
263.15,
266.15,
268.15,
271.15,
277.15,
269.15,
272.15,
266.15,
264.15,
265.15,
266.15,
272.15,
273.15,
271.15,
272.15,
275.15,
272.15,
272.15,
264.15,
263.15,
266.15,
277.15,
277.15,
272.15,
270.15,
270.15,
273.15,
273.15,
261.15,
260.15,
260.15,
263.15,
263.15,
255.15,
251.15,
246.15,
247.15,
255.15,
258.15,
265.15,
268.15,
265.15,
267.15,
272.15,
266.15,
267.15,
269.15,
273.15,
274.15,
272.15,
271.15,
268.15,
-12047.85,
-12047.85,
260.15,
260.15,
256.15,
256.15,
267.15,
268.15,
268.15,
270.15,
266.15,
258.15,
258.15,
263.15,
269.15,
271.15,
270.15,
270.15,
273.15,
264.15,
263.15,
264.15,
265.15,
258.15,
257.15,
258.15,
262.15,
262.15,
264.15,
274.15,
276.15,
269.15,
265.15,
267.15,
270.15,
274.15,
274.15,
272.15,
272.15,
270.15,
271.15,
273.15,
271.15,
269.15,
269.15,
269.15,
-12047.85,
271.15,
270.15,
271.15,
269.15,
270.15,
273.15,
273.15,
273.15,
274.15,
274.15,
274.15,
273.15,
268.15,
269.15,
271.15,
267.15,
269.15,
267.15,
268.15,
272.15,
275.15,
276.15,
278.15,
272.15,
272.15,
273.15,
274.15,
274.15,
272.15,
273.15,
272.15,
273.15,
273.15,
273.15,
278.15,
-12047.85,
-12047.85,
271.15,
272.15,
272.15,
-12047.85,
275.15,
271.15,
274.15,
276.15,
272.15,
272.15,
274.15,
279.15,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
279.15,
278.15,
283.15,
279.15,
276.15,
278.15,
284.15,
281.15,
281.15,
282.15,
279.15,
281.15,
286.15,
286.15,
281.15,
281.15,
279.15,
276.15,
280.15,
283.15,
286.15,
282.15,
284.15,
281.15,
277.15,
278.15,
282.15,
285.15,
285.15,
285.15,
283.15,
285.15,
288.15,
288.15,
288.15,
286.15,
287.15,
286.15,
286.15,
288.15,
287.15,
282.15,
285.15,
285.15,
279.15,
284.15,
283.15,
283.15,
281.15,
282.15,
291.15,
281.15,
282.15,
279.15,
279.15,
282.15,
285.15,
283.15,
280.15,
281.15,
284.15,
281.15,
282.15,
284.15,
277.15,
279.15,
280.15
]
},
{
"displayUnit" : "degC",
"unitDimensions" : "0 0 0 0 1 0 0",
"defaultValue" : "EmptyT",
"name" : "MaxT",
"nValues" : [
294.15,
278.15,
292.15,
297.15,
288.15,
286.15,
295.15,
300.15,
303.15,
305.05,
305.05,
306.05,
303.15,
298.75,
287.05,
287.15,
-12047.85,
-12047.85,
293.15,
287.15,
289.15,
290.15,
290.15,
294.15,
295.15,
283.15,
289.15,
298.15,
303.15,
303.15,
302.15,
298.15,
298.15,
284.15,
298.15,
303.15,
306.15,
301.15,
-12047.85,
302.15,
303.15,
304.15,
307.15,
309.15,
311.05,
306.15,
304.15,
301.15,
304.15,
307.15,
308.15,
310.15,
310.15,
309.15,
307.15,
306.15,
305.15,
299.05,
302.05,
297.15,
305.15,
309.15,
305.15,
306.15,
308.05,
307.95,
309.15,
309.15,
306.15,
305.15,
305.15,
306.15,
307.05,
301.15,
303.15,
304.15,
302.15,
302.15,
301.05,
298.15,
301.05,
303.15,
302.15,
305.15,
307.15,
302.15,
306.15,
303.15,
295.15,
290.15,
298.15,
300.15,
300.15,
302.15,
302.15,
291.05,
292.15,
298.05,
304.15,
297.15,
299.95,
300.15,
302.15,
304.15,
303.15,
303.15,
300.15,
297.15,
295.15,
297.05,
300.15,
293.15,
288.15,
297.15,
300.15,
303.15,
301.15,
294.15,
287.15,
285.15,
280.15,
288.15,
287.15,
283.15,
286.15,
289.05,
289.05,
294.15,
289.15,
284.15,
282.15,
280.15,
279.15,
279.15,
280.15,
281.15,
284.05,
282.15,
284.15,
293.15,
288.15,
285.15,
288.15,
288.15,
289.15,
290.15,
284.15,
286.05,
280.15,
279.15,
280.05,
279.15,
284.15,
291.15,
294.15,
283.15,
281.15,
282.15,
286.15,
285.15,
284.15,
283.15,
282.15,
280.15,
283.15,
284.15,
280.15,
281.15,
283.15,
284.15,
283.15,
279.15,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
275.15,
270.15,
268.15,
-12047.85,
-12047.85,
-12047.85,
271.15,
271.15,
270.15,
262.15,
261.15,
274.15,
278.15,
279.15,
277.15,
274.15,
270.15,
265.15,
264.15,
267.15,
270.15,
272.15,
271.15,
268.15,
273.15,
274.15,
274.15,
274.15,
275.15,
274.15,
269.15,
270.15,
273.15,
273.15,
271.15,
271.15,
265.55,
269.15,
271.15,
271.15,
271.15,
266.15,
271.15,
274.15,
276.05,
276.15,
273.15,
270.25,
270.15,
271.15,
273.15,
276.15,
275.15,
276.15,
277.15,
270.15,
265.15,
268.15,
269.15,
271.15,
264.15,
259.15,
267.15,
265.15,
264.15,
271.15,
274.15,
274.15,
254.15,
261.15,
269.25,
272.15,
273.15,
272.15,
272.15,
270.15,
272.15,
273.15,
273.15,
275.15,
262.15,
274.15,
275.15,
277.15,
276.15,
275.15,
276.15,
276.15,
274.15,
275.15,
276.15,
277.15,
277.15,
278.15,
278.15,
277.15,
279.15,
278.15,
280.15,
281.15,
283.15,
279.15,
281.05,
284.15,
279.15,
280.15,
282.15,
280.15,
281.15,
282.15,
282.15,
278.15,
280.15,
284.15,
278.15,
277.15,
280.15,
277.15,
277.15,
280.15,
281.15,
282.15,
282.05,
277.15,
278.15,
281.15,
280.15,
279.15,
278.15,
275.15,
-12047.85,
-12047.85,
279.15,
282.05,
281.15,
284.15,
282.15,
279.15,
283.05,
283.05,
284.15,
284.15,
288.15,
292.15,
297.15,
279.15,
279.15,
284.15,
287.15,
282.15,
271.15,
277.15,
276.15,
282.15,
277.15,
280.15,
283.15,
289.15,
290.15,
293.15,
279.15,
286.15,
288.15,
291.15,
290.15,
295.15,
291.15,
294.15,
290.15,
283.15,
284.15,
286.15,
279.15,
289.15,
283.15,
291.15,
299.05,
302.15,
302.15,
300.15,
299.05,
295.15,
286.15,
286.15,
286.15,
286.15,
289.15,
287.15,
287.15,
297.15,
297.15,
-12047.85,
300.15,
290.15,
293.15,
294.15,
292.15,
293.15,
286.15,
-12047.85,
289.15,
283.15,
281.15,
285.15,
296.15,
294.05,
295.15,
298.15,
301.15,
302.15,
297.15,
297.15,
298.15,
304.15,
292.15,
297.15,
297.05,
298.95,
297.15,
301.15,
306.15,
309.05,
308.15,
304.15,
299.05,
305.15,
299.05,
298.15,
297.15,
300.35,
302.15,
304.05,
300.15,
295.15,
301.15,
304.15,
303.05,
301.05,
303.15,
301.15,
302.15,
301.15,
305.15,
308.15,
302.15,
299.05,
302.15,
305.15,
303.15,
302.15,
297.15,
301.15,
286.15,
299.05,
292.15,
299.05,
291.15,
301.15,
303.15,
306.15,
-12047.85,
-12047.85,
-12047.85,
305.15,
297.15,
301.15,
304.15,
304.15,
307.15,
307.15,
309.15,
309.05,
300.15,
288.15,
288.15,
295.15,
298.15,
303.15,
293.15,
290.05,
284.15,
-12047.85,
293.15,
296.15,
287.15,
291.15,
295.15,
295.15,
296.05,
287.15,
289.15,
294.15,
295.15,
297.15,
295.15,
296.15,
297.15,
295.15,
298.15,
298.95,
298.15,
300.15,
300.15,
301.15,
299.05,
287.15,
283.15,
286.15,
290.15,
288.15,
290.15,
291.15,
295.15,
294.15,
297.15,
296.15,
295.15,
292.15,
284.15,
286.15,
287.15,
284.15,
-12047.85,
-12047.85,
282.15,
283.15,
284.15,
284.15,
285.15,
284.15,
281.15,
286.15,
289.15,
287.05,
279.15,
283.15,
284.15,
287.15,
286.15,
-12047.85,
281.15,
282.15,
284.15,
290.15,
289.15,
283.15,
286.15,
283.15,
280.15,
276.15,
275.15,
276.15,
277.15,
278.15,
281.15,
280.15,
277.15,
280.15,
279.15,
277.15,
282.15,
284.15,
285.15,
285.15,
279.15,
276.15,
278.15,
277.15,
277.15,
276.15,
277.15,
278.15,
272.15,
275.15,
279.15,
281.15,
283.15,
272.15,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
282.75,
-12047.85,
273.15,
259.15,
255.15,
255.15,
258.15,
261.15,
257.15,
256.15,
249.15,
255.15,
266.15,
264.15,
265.15,
267.15,
267.15,
274.15,
274.15,
270.15,
271.15,
272.15,
267.15,
263.15,
255.15,
267.15,
273.15,
275.15,
276.15,
276.15,
276.15,
275.15,
278.15,
277.15,
280.15,
278.15,
276.15,
276.15,
274.15,
271.15,
269.15,
268.15,
268.15,
270.15,
261.15,
263.15,
263.15,
263.15,
266.15,
274.15,
276.15,
278.15,
274.15,
274.15,
277.15,
280.15,
283.15,
282.15,
277.15,
277.15,
277.15,
277.15,
273.15,
273.05,
273.15,
272.15,
272.15,
273.15,
277.15,
-12047.85,
278.15,
277.15,
279.15,
280.15,
279.15,
277.15,
275.15,
264.15,
268.15,
273.15,
277.15,
277.15,
277.15,
277.15,
279.15,
273.15,
274.15,
270.15,
266.15,
261.15,
264.15,
272.15,
276.15,
283.15,
275.15,
275.15,
275.15,
276.15,
280.15,
279.15,
284.15,
286.15,
282.15,
285.15,
279.15,
277.15,
281.15,
284.15,
280.15,
277.15,
278.15,
279.15,
278.15,
279.15,
282.15,
285.15,
288.15,
290.15,
293.15,
293.15,
290.15,
291.15,
291.15,
283.15,
282.15,
283.15,
282.05,
289.15,
290.15,
289.15,
290.15,
295.15,
299.05,
287.05,
-12047.85,
283.15,
282.15,
286.15,
277.15,
279.15,
280.15,
287.15,
291.15,
295.15,
286.05,
289.15,
283.15,
286.15,
277.15,
289.15,
291.15,
294.15,
290.15,
281.15,
284.15,
284.15,
291.15,
296.15,
298.15,
302.15,
288.15,
284.15,
291.15,
295.15,
299.05,
301.15,
293.15,
294.15,
295.15,
299.05,
303.15,
303.15,
301.15,
291.15,
298.15,
302.15,
304.15,
293.15,
287.05,
291.15,
287.15,
286.15,
298.15,
301.15,
304.15,
303.15,
303.15,
301.15,
298.95,
296.15,
298.15,
291.15,
295.15,
300.15,
281.15,
292.15,
298.15,
293.15,
295.05,
299.05,
299.05,
302.15,
302.15,
300.15,
303.15,
-12047.85,
306.15,
302.05,
290.15,
291.15,
293.15,
297.15,
300.15,
304.15,
302.15,
291.15,
297.15,
301.15,
304.15,
306.15,
306.15,
304.15,
303.25,
306.15,
307.15,
306.15,
301.15,
305.25,
298.15,
301.15,
295.15,
295.15,
303.15,
301.15,
306.15,
304.15,
303.15,
292.15,
294.15,
299.05,
298.95,
302.15,
301.15,
-12047.85,
301.15,
291.15,
285.15,
288.15,
294.15,
294.15,
298.15,
302.15,
302.15,
304.05,
304.15,
302.15,
302.15,
301.15,
302.05,
301.15,
302.15,
303.15,
303.15,
304.05,
303.15,
304.05,
305.15,
297.15,
298.15,
298.95,
289.15,
283.15,
290.15,
292.15,
298.15,
298.15,
300.15,
302.15,
302.15,
302.15,
303.15,
291.15,
299.05,
298.05,
289.15,
291.15,
298.15,
300.15,
301.15,
301.15,
299.25,
294.15,
293.15,
290.15,
289.15,
284.15,
278.15,
280.15,
280.15,
284.15,
284.15,
280.15,
281.15,
275.15,
272.15,
272.15,
276.15,
276.15,
274.15,
282.15,
279.15,
-12047.85,
-12047.85,
-12047.85,
283.15,
280.15,
286.05,
280.15,
285.15,
280.15,
275.15,
278.15,
276.15,
274.15,
281.15,
280.15,
281.15,
-12047.85,
281.15,
277.15,
284.15,
282.15,
275.15,
274.15,
279.15,
278.15,
275.15,
275.15,
274.15,
273.15,
275.15,
281.15,
282.15,
277.15,
274.15,
276.15,
274.15,
275.15,
276.15,
278.15,
277.15,
280.15,
276.15,
275.15,
277.15,
278.15,
272.15,
268.15,
264.15,
266.15,
270.15,
262.15,
260.15,
256.15,
262.15,
265.15,
268.15,
267.15,
256.15,
256.15,
266.15,
274.15,
276.15,
276.15,
276.15,
273.15,
274.15,
273.15,
263.15,
259.55,
262.15,
259.15,
260.15,
263.15,
265.15,
269.15,
263.15,
275.15,
277.15,
274.15,
272.15,
268.15,
261.15,
257.15,
263.15,
270.15,
275.15,
275.15,
278.15,
278.25,
276.15,
277.15,
276.15,
274.15,
276.15,
273.15,
276.15,
271.15,
275.15,
274.15,
271.15,
271.15,
273.15,
271.15,
273.15,
276.15,
275.15,
272.15,
275.15,
276.15,
277.15,
277.15,
275.15,
275.15,
276.15,
275.15,
275.15,
277.15,
277.15,
276.15,
281.15,
280.15,
279.15,
277.15,
279.15,
279.15,
279.15,
279.15,
277.15,
279.15,
281.15,
275.15,
280.15,
282.05,
278.15,
285.15,
284.15,
282.15,
286.15,
286.15,
286.15,
284.15,
286.15,
284.15,
277.15,
281.15,
277.15,
277.15,
283.15,
283.05,
286.15,
286.15,
280.15,
280.15,
284.15,
285.15,
281.15,
284.15,
286.05,
288.15,
285.15,
285.15,
286.15,
283.15,
278.15,
278.15,
279.15,
284.15,
280.15,
276.15,
281.15,
286.15,
286.15,
278.15,
276.15,
276.15,
284.15,
279.15,
278.15,
281.15,
-12047.85,
-12047.85,
298.15,
297.15,
294.15,
298.15,
298.15,
302.15,
293.05,
291.15,
281.15,
290.15,
290.15,
281.15,
277.15,
279.15,
288.05,
286.15,
288.15,
278.15,
281.15,
279.15,
283.15,
286.15,
281.15,
288.55,
292.05,
291.15,
296.15,
298.15,
298.15,
299.05,
300.05,
303.15,
302.15,
297.15,
280.15,
284.15,
292.15,
292.15,
293.15,
291.15,
290.15,
284.15,
287.15,
282.15,
282.15,
289.15,
287.15,
284.15,
288.15,
285.15,
292.15,
294.15,
293.15,
295.15,
284.15,
288.15,
292.15,
300.15,
303.15,
297.15,
298.15,
283.15,
283.15,
287.15,
296.05,
300.15,
294.15,
295.15,
300.15,
302.05,
-12047.85,
-12047.85,
-12047.85,
304.05,
304.15,
297.15,
297.15,
285.15,
291.05,
287.15,
295.15,
294.95,
302.25,
305.15,
309.05,
304.15,
303.05,
294.15,
288.15,
298.15,
303.05,
304.15,
304.15,
305.05,
298.95,
-12047.85,
-12047.85,
303.05,
299.05,
303.05,
306.15,
307.15,
302.15,
305.15,
302.15,
304.15,
300.15,
298.95,
295.15,
297.15,
299.05,
303.15,
301.05,
300.15,
292.85,
299.05,
298.85,
298.95,
298.15,
290.15,
299.05,
-12047.85,
-12047.85,
304.15,
306.15,
304.15,
301.15,
297.15,
293.15,
295.05,
300.15,
305.05,
305.05,
290.15,
293.15,
281.15,
294.15,
286.15,
289.15,
295.15,
297.15,
298.95,
282.15,
286.15,
288.15,
287.15,
288.15,
289.05,
287.15,
287.15,
294.15,
294.15,
294.15,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
287.15,
289.15,
292.15,
286.15,
284.05,
284.15,
286.95,
288.15,
288.15,
289.15,
284.15,
279.15,
279.15,
279.15,
277.15,
279.15,
277.15,
278.15,
279.15,
280.15,
282.15,
283.15,
283.15,
281.15,
283.15,
283.15,
281.15,
-12047.85,
278.15,
274.15,
276.15,
278.15,
276.15,
280.15,
281.05,
273.15,
-12047.85,
267.15,
263.15,
262.15,
261.15,
259.15,
-12047.85,
-12047.85,
266.15,
270.15,
273.15,
273.15,
270.15,
270.15,
275.15,
274.15,
272.15,
268.15,
266.15,
263.15,
270.15,
275.15,
275.15,
275.15,
274.15,
276.15,
276.15,
275.15,
274.15,
270.15,
267.15,
265.15,
263.15,
263.25,
268.15,
266.15,
270.15,
266.15,
266.15,
274.15,
273.15,
276.15,
267.15,
263.15,
257.15,
262.15,
263.15,
264.15,
269.15,
274.15,
276.05,
275.15,
272.15,
265.15,
263.15,
257.15,
271.15,
276.15,
277.15,
279.15,
278.15,
279.15,
275.15,
270.15,
273.15,
274.15,
275.15,
278.15,
276.15,
278.15,
276.15,
280.25,
279.05,
272.15,
263.15,
261.15,
261.15,
265.15,
271.15,
277.15,
278.15,
273.15,
269.15,
270.15,
270.15,
278.15,
277.15,
279.15,
278.15,
280.15,
276.15,
275.15,
272.15,
268.15,
273.15,
274.15,
273.15,
269.15,
262.15,
257.15,
262.15,
266.15,
272.15,
273.15,
262.15,
274.15,
276.15,
278.05,
281.15,
273.15,
276.15,
275.15,
276.15,
277.15,
275.15,
281.15,
281.15,
277.15,
277.15,
277.15,
279.85,
282.15,
280.15,
282.15,
275.15,
280.15,
282.15,
282.15,
282.15,
281.15,
278.05,
283.05,
276.15,
281.15,
279.15,
281.05,
274.15,
282.15,
279.15,
279.05,
278.15,
280.05,
284.15,
285.15,
-12047.85,
277.15,
283.15,
285.05,
277.15,
278.15,
277.15,
275.15,
280.15,
280.15,
281.15,
286.15,
284.15,
287.15,
290.15,
285.15,
284.15,
280.15,
278.15,
282.15,
286.05,
290.15,
290.15,
284.15,
291.15,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
290.15,
290.15,
291.15,
288.15,
283.15,
281.15,
292.15,
288.15,
-12047.85,
-12047.85,
-12047.85,
293.15,
285.15,
287.15,
281.15,
279.15,
279.15,
288.15,
290.15,
293.15,
292.15,
289.15,
289.15,
295.15,
299.15,
292.15,
290.15,
284.15,
291.15,
292.15,
290.15,
293.15,
285.15,
-12047.85,
284.15,
282.15,
286.15,
290.15,
288.15,
293.15,
-12047.85,
-12047.85,
291.15,
286.15,
289.15,
293.15,
298.15,
300.15,
-12047.85,
290.15,
293.15,
298.15,
295.15,
298.15,
301.15,
303.15,
304.15,
290.15,
295.15,
297.15,
299.15,
299.15,
295.15,
294.15,
290.15,
298.15,
302.15,
305.15,
299.15,
289.15,
288.15,
285.15,
293.15,
300.15,
296.15,
291.15,
292.15,
297.15,
298.15,
301.15,
302.15,
301.15,
301.15,
300.15,
301.15,
303.15,
299.15,
300.15,
299.15,
302.15,
300.15,
298.15,
299.15,
301.15,
300.15,
292.15,
295.15,
298.15,
296.15,
297.15,
299.15,
303.15,
303.15,
296.15,
302.15,
302.15,
302.15,
303.15,
303.15,
302.15,
299.15,
286.15,
287.15,
289.15,
292.15,
297.15,
299.15,
300.15,
300.15,
300.15,
300.15,
301.15,
302.15,
300.15,
290.15,
296.15,
288.15,
291.15,
287.15,
287.15,
288.15,
290.15,
294.15,
295.15,
300.15,
302.15,
296.15,
289.15,
287.15,
289.15,
290.15,
298.15,
288.15,
289.15,
289.15,
284.15,
282.15,
281.15,
281.15,
283.15,
285.15,
280.15,
280.15,
281.15,
282.15,
280.15,
-12047.85,
-12047.85,
283.15,
283.15,
285.15,
282.15,
283.15,
283.15,
284.15,
278.15,
278.15,
278.15,
280.15,
279.15,
279.15,
279.15,
279.15,
278.15,
279.15,
278.15,
275.15,
273.15,
273.15,
275.15,
278.15,
277.15,
280.15,
278.15,
274.15,
275.15,
274.15,
270.15,
270.15,
273.15,
264.15,
261.15,
268.15,
275.15,
278.15,
278.15,
275.15,
274.15,
276.15,
279.15,
277.15,
277.15,
275.15,
273.15,
275.15,
271.15,
269.15,
268.15,
271.15,
267.15,
269.15,
267.15,
269.15,
270.15,
266.15,
267.15,
270.15,
272.15,
277.15,
279.15,
279.15,
274.15,
275.15,
270.15,
270.15,
274.15,
276.15,
276.15,
274.15,
277.15,
279.15,
277.15,
275.15,
272.15,
269.15,
277.15,
279.15,
283.15,
278.15,
272.15,
274.15,
277.15,
279.15,
274.15,
266.15,
266.15,
270.15,
273.15,
265.15,
257.15,
252.15,
255.15,
259.15,
266.15,
274.15,
272.15,
273.15,
275.15,
275.15,
275.15,
271.15,
275.15,
276.15,
277.15,
276.15,
274.15,
276.15,
-12047.85,
-12047.85,
270.15,
272.15,
272.15,
269.15,
271.15,
274.15,
273.15,
275.15,
277.15,
273.15,
273.15,
272.15,
273.15,
274.15,
275.15,
274.15,
278.15,
277.15,
276.15,
271.15,
274.15,
267.15,
270.15,
271.15,
271.15,
274.15,
275.15,
278.15,
280.15,
277.15,
272.15,
274.15,
280.15,
284.15,
283.15,
276.15,
277.15,
277.15,
275.15,
279.15,
278.15,
274.15,
276.15,
277.15,
-12047.85,
276.15,
276.15,
276.15,
278.15,
284.15,
279.15,
281.15,
280.15,
277.15,
277.15,
276.15,
280.15,
280.15,
285.15,
278.15,
278.15,
281.15,
268.15,
283.15,
286.15,
290.15,
292.15,
281.15,
285.15,
283.15,
281.15,
280.15,
282.15,
283.15,
282.15,
285.15,
287.15,
295.15,
297.15,
287.15,
-12047.85,
-12047.85,
282.15,
287.15,
288.15,
-12047.85,
280.15,
283.15,
281.15,
281.15,
280.15,
287.15,
291.15,
295.15,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
-12047.85,
289.15,
294.15,
296.15,
288.15,
289.15,
293.15,
292.15,
288.15,
283.15,
291.15,
292.15,
298.15,
293.15,
292.15,
295.15,
296.15,
284.15,
288.15,
298.15,
294.15,
296.15,
293.15,
297.15,
287.15,
294.15,
299.15,
300.15,
304.15,
306.15,
305.15,
302.15,
305.15,
305.15,
303.15,
291.15,
291.15,
299.15,
298.15,
300.15,
304.15,
301.15,
297.15,
302.15,
291.15,
295.15,
300.15,
301.15,
303.15,
301.15,
302.15,
301.15,
301.15,
300.15,
295.15,
295.15,
301.15,
304.15,
300.15,
302.15,
303.15,
301.15,
301.15,
304.15,
302.15,
292.15,
298.15,
301.15
]
},
{
"displayUnit" : "cm",
"unitDimensions" : "1 0 0 0 0 0 0",
"defaultValue" : "Records[ records.nrows, \"Rain_Fall\"] ",
"name" : "Rain_Fall",
"nValues" : [
0.061,
0.067,
0.067,
0.06799999999999998,
0.092,
0.097,
0.097,
0.097,
0.097,
0.097,
0.097,
0.097,
0.106,
0.116,
0.12,
0.121,
-123.21,
-123.21,
0.147,
0.149,
0.15,
0.16,
0.168,
0.168,
0.186,
0.193,
0.197,
0.197,
0.197,
0.197,
0.197,
0.197,
0.198,
0.202,
0.202,
0.202,
0.202,
0.204,
-123.21,
0.205,
0.205,
0.205,
0.205,
0.205,
0.205,
0.205,
0.205,
0.205,
0.205,
0.205,
0.205,
0.205,
0.205,
0.205,
0.205,
0.21,
0.213,
0.213,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.222,
0.223,
0.223,
0.223,
0.223,
0.223,
0.223,
0.223,
0.223,
0.223,
0.225,
0.234,
0.234,
0.234,
0.234,
0.234,
0.234,
0.239,
0.24,
0.24,
0.24,
0.24,
0.241,
0.241,
0.241,
0.241,
0.241,
0.241,
0.241,
0.241,
0.241,
0.241,
0.241,
0.241,
0.242,
0.242,
0.242,
0.242,
0.245,
0.245,
0.248,
0.248,
0.257,
0.267,
0.268,
0.268,
0.268,
0.268,
0.268,
0.268,
0.273,
0.277,
0.298,
0.326,
0.379,
0.3820000000000001,
0.386,
0.378,
0.378,
0.393,
0.396,
0.396,
0.4,
0.4,
0.4,
0.4,
0.4,
0.4,
0.4,
0.4,
0.407,
0.4279999999999998,
0.4279999999999998,
0.4349999999999999,
0.444,
0.444,
0.449,
0.449,
0.449,
0.449,
0.449,
0.449,
0.449,
0.449,
0.449,
0.449,
0.454,
0.458,
0.458,
0.458,
0.463,
0.463,
0.466,
0.474,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
0,
0.012,
0.014,
0.015,
0.015,
0.015,
0.015,
0.015,
0.015,
0.015,
0.015,
0.02,
0.029,
0.029,
0.029,
0.034,
0.04099999999999999,
0.04099999999999999,
0.04099999999999999,
0.04099999999999999,
0.04099999999999999,
0.04099999999999999,
0.04099999999999999,
0.04099999999999999,
0.052,
0.05400000000000003,
0.05400000000000003,
0.063,
0.08900000000000002,
0.09,
0.099,
0.099,
0.099,
0.099,
0.099,
0.099,
0.099,
0.119,
0.12,
0.121,
0.124,
0.125,
0.125,
0.125,
0.125,
0.125,
0.125,
-123.21,
0.125,
0.129,
0.133,
0.135,
0.135,
0.151,
0.164,
0.167,
0.172,
0.182,
0.184,
0.184,
0.186,
0.196,
0.196,
0.196,
0.196,
0.196,
0.196,
0.196,
0.196,
0.208,
0.213,
0.218,
0.218,
0.218,
0.218,
0.218,
0.218,
0.218,
0.221,
0.239,
0.239,
0.241,
0.242,
0.244,
0.246,
0.246,
0.246,
0.246,
0.251,
0.251,
0.251,
0.251,
0.251,
0.251,
0.252,
0.252,
0.253,
0.253,
0.253,
0.253,
0.253,
0.254,
0.254,
0.254,
0.254,
0.254,
0.254,
0.262,
0.276,
0.276,
0.277,
0.277,
0.281,
0.281,
0.281,
0.281,
-123.21,
-123.21,
-123.21,
0.297,
0.297,
0.297,
0.297,
0.297,
0.297,
0.297,
0.297,
0.297,
0.299,
0.337,
0.345,
0.345,
0.345,
0.345,
0.355,
0.369,
0.381,
-123.21,
0.386,
0.386,
0.386,
0.388,
0.388,
0.388,
0.388,
0.388,
0.389,
0.389,
0.389,
0.389,
0.389,
0.389,
0.391,
0.391,
0.391,
0.391,
0.391,
0.391,
0.391,
0.391,
0.391,
0.401,
0.411,
0.411,
0.411,
0.42,
0.42,
0.42,
0.42,
0.42,
0.42,
0.42,
0.42,
0.424,
0.4389999999999999,
0.441,
0.455,
0.46,
-123.21,
-123.21,
0.46,
0.46,
0.46,
0.47,
0.47,
0.47,
0.47,
0.47,
0.47,
0.47,
0.48,
0.48,
0.48,
0.48,
0.48,
0.48,
0.48,
0.48,
0.48,
0.48,
0.48,
0.481,
0.485,
0.4970000000000002,
0.4970000000000002,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
0.004,
0.004,
0.004,
0.004,
0.004,
0.004,
0.004,
0.004,
0.006999999999999998,
0.011,
0.024,
0.038,
0.05599999999999998,
0.05599999999999998,
0.05599999999999998,
0.058,
0.08,
0.08500000000000003,
0.08699999999999998,
0.098,
0.098,
0.098,
0.098,
0.098,
0.105,
0.112,
0.112,
0.112,
0.112,
0.112,
0.112,
0.112,
0.112,
0.112,
0.112,
0.112,
0.112,
0.112,
0.112,
0.112,
0.112,
0.117,
0.117,
0.117,
0.119,
0.119,
0.119,
0.119,
0.119,
0.119,
0.119,
0.122,
0.123,
0.124,
0.127,
0.132,
0.132,
0.149,
0.172,
0.172,
0.172,
0.172,
0.172,
0.172,
0.172,
0.172,
0.172,
0.172,
0.172,
-123.21,
0.172,
0.172,
0.184,
0.185,
0.185,
0.186,
0.186,
0.186,
0.186,
0.204,
0.206,
0.206,
0.206,
0.206,
0.206,
0.206,
0.206,
0.206,
0.206,
0.209,
0.209,
0.209,
0.219,
0.228,
0.228,
0.228,
0.24,
0.24,
0.24,
0.24,
0.24,
0.244,
0.244,
0.244,
0.244,
0.244,
0.244,
-123.21,
0.25,
0.26,
0.269,
0.272,
0.272,
0.275,
0.275,
0.275,
0.275,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.277,
0.282,
0.29,
0.29,
0.29,
0.29,
0.29,
0.29,
0.29,
0.29,
0.29,
0.29,
0.292,
0.292,
0.295,
0.295,
0.295,
0.295,
0.295,
0.295,
0.295,
0.295,
0.295,
0.295,
0.295,
0.295,
0.295,
0.305,
0.305,
0.305,
0.305,
0.307,
-123.21,
0.3110000000000001,
0.3110000000000001,
0.3110000000000001,
0.3110000000000001,
0.3110000000000001,
0.3110000000000001,
0.316,
0.32,
0.32,
-123.21,
-123.21,
0.338,
0.338,
0.347,
0.347,
0.352,
0.352,
0.352,
0.365,
0.3729999999999999,
0.374,
0.374,
0.394,
0.404,
0,
0,
0,
0,
0,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
0,
0,
0,
0,
0,
0,
0,
-123.21,
-123.21,
0,
0,
0,
0.001,
0.001,
0.001,
0.002,
0.002,
0.006,
0.006,
0.006,
0.013,
0.025,
0.03,
0.03,
0.031,
0.038,
0.045,
0.05,
0.051,
0.051,
0.051,
0.051,
0.052,
0.052,
0.052,
0.052,
0.052,
0.052,
0.052,
0.052,
0.052,
0.05300000000000003,
0.058,
0.07200000000000004,
0.073,
0.073,
0.073,
0.073,
0.073,
0.073,
0.07400000000000004,
0.075,
0.09,
0.102,
0.11,
0.122,
0.144,
0.146,
0.147,
0.148,
0.152,
0.152,
0.152,
0.169,
0.171,
0.172,
0.172,
0.172,
0.172,
0.172,
0.178,
0.185,
0.185,
0.185,
0.186,
0.188,
0.188,
0.189,
0.19,
-123.21,
-123.21,
-123.21,
0.191,
0.191,
0.191,
0.191,
0.197,
0.197,
0.209,
0.213,
0.213,
0.213,
0.213,
0.213,
0.216,
0.219,
0.233,
0.233,
0.233,
0.233,
0.233,
0.233,
0.235,
0.235,
-123.21,
-123.21,
0.247,
0.247,
0.247,
0.247,
0.247,
0.247,
0.247,
0.247,
0.248,
0.25,
0.251,
0.255,
0.255,
0.255,
0.257,
0.26,
0.267,
0.271,
0.271,
0.271,
0.271,
0.278,
0.278,
0.278,
-123.21,
-123.21,
0.278,
0.278,
0.278,
0.278,
0.278,
0.28,
0.28,
0.28,
0.315,
0.315,
0.32,
0.324,
0.331,
0.331,
0.344,
0.354,
0.354,
0.4420000000000002,
0.4420000000000002,
0.448,
0.449,
0.45,
0.4560000000000001,
0.462,
0.463,
0.464,
0,
0,
0,
0.016,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
0.14,
0.14,
0.14,
0.14,
0.14,
0.14,
0.14,
0.14,
0.14,
0.14,
0.14,
0.14,
0.146,
0.178,
0.184,
0.185,
0.185,
0.191,
0.196,
0.199,
0.2,
0.224,
0.225,
0.225,
0.225,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
0.001,
0.001,
0.015,
0.017,
0.017,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
0.0014,
0.0014,
0.0014,
0.0014,
0.0166,
0.0258,
0.0258,
0.0258,
-123.21,
-123.21,
-123.21,
0.0274,
0.0326,
0.034,
0.07780000000000002,
0.09019999999999999,
0.09419999999999999,
0.09419999999999999,
0.09419999999999999,
0.09419999999999999,
0.0968,
0.0984,
0.0984,
0.0984,
0.0984,
0.0984,
0.1002,
0.1012,
0.1012,
0.1014,
0.1018,
0.102,
0.1098,
0.1116,
0.1136,
0.1224,
0.1228,
0.1272,
0.1324,
0.1332,
-123.21,
-123.21,
0.138,
0.1416,
0.1416,
0.1416,
0.1416,
0.1416,
-123.21,
0.1478,
0.1478,
0.1478,
0.1478,
0.1478,
0.1478,
0.1478,
0.1504,
0.1508,
0.1508,
0.1508,
0.1544,
0.1582,
0.16,
0.167,
0.167,
0.1686,
0.1688,
0.1688,
0.1832,
0.1926,
0.2032,
0.2178,
0.2178,
0.2178,
0.2378,
0.242,
0.2424,
0.2424,
0.2424,
0.2424,
0.2424,
0.2424,
0.2424,
0.2424,
0.2424,
0.2462,
0.2462,
0.2462,
0.2462,
0.2462,
0.2462,
0.2464,
0.2464,
0.2464,
0.2464,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2498,
0.2644,
0.2646,
0.2656,
0.2656,
0.2656,
0.2656,
0.2656,
0.2656,
0.2656,
0.2656,
0.2656,
0.2656,
0.2656,
0.2656,
0.2656,
0.2668,
0.2668,
0.2692000000000001,
0.2696,
0.2754,
0.2754,
0.2754,
0.2754,
0.2754,
0.2754,
0.2754,
0.3088,
0.3138,
0.3139999999999999,
0.3139999999999999,
0.3139999999999999,
0.3188,
0.3206000000000001,
0.3222,
0.3234,
0.3404,
0.347,
0.3562,
0.3562,
0.358,
0.3848,
0.4486,
0.4514,
0.4514,
0.4514,
-123.21,
-123.21,
0.4514,
0.4514,
0.4518,
0.4586,
0.4642000000000001,
0.4798,
0.4798,
0.4798,
0.4798,
0.4798,
0.4798,
0.489,
0.489,
0.5078,
0.5096000000000002,
0.5096000000000002,
0.5096000000000002,
0.5096000000000002,
0.5096000000000002,
0.5096000000000002,
0.5096000000000002,
0.5096000000000002,
0.5098,
0.5098,
0.5098,
0.5122000000000002,
0.5125999999999997,
0.5125999999999997,
0.5125999999999997,
0.5125999999999997,
0.5125999999999997,
0.5125999999999997,
0.5125999999999997,
0.5125999999999997,
0.5125999999999997,
0.5226000000000001,
0.6003999999999998,
0.6476000000000002,
0.6476000000000002,
0.6476000000000002,
0.6476000000000002,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.657,
0.6659999999999998,
0.6702000000000002,
0.6702000000000002,
0.6702000000000002,
0.6702000000000002,
0.6702000000000002,
0.6702000000000002,
0.6702000000000002,
0.6704000000000003,
0.672,
0.672,
0.6850000000000003,
0.7034,
0.7034,
0.7058,
0,
0,
0.0005,
0.0092,
0.009600000000000001,
0.009600000000000001,
0.009600000000000001,
0.009600000000000001,
0.0124,
0.018,
0.0184,
0.0184,
0.0184,
0.0184,
0.0184,
0.0184,
0.0184,
0.0184,
0.0184,
0.0184,
0.0184,
0.0186,
0.0186,
0.0186,
0.0186,
0.0186,
0.0186,
0.0186,
0.0186,
0.0318,
0.0408,
0.0414,
0.043,
0.043,
-123.21,
-123.21,
0.043,
0.043,
0.043,
0.043,
0.043,
0.043,
0.043,
0.0432,
0.0442,
0.0442,
0.0442,
0.0442,
0.0442,
0.0442,
0.0442,
0.0442,
0.0578,
0.0614,
0.0614,
0.0614,
0.0616,
0.0616,
0.0616,
0.0616,
0.0616,
0.0616,
0.0616,
0.07459999999999997,
0.077,
0.094,
0.094,
0.094,
0.1002,
0.1022,
0.1064,
0.1148,
0.1204,
0.1304,
0.1308,
0.1636,
0.1684,
0.1684,
0.17,
0.1724,
-123.21,
0.1732,
0.1742,
0.1756,
0.1838,
0.1968,
0.2182,
0.2236,
0.2368,
0.2774,
0.2854,
0.3012,
0.303,
0.3168,
0.3186,
0.3270000000000001,
0.3334,
0.3344,
0.335,
0.3352000000000002,
0.3352000000000002,
0.3352000000000002,
0.3372,
0.3392000000000002,
0.3392000000000002,
0.3398,
0.3406,
0.359,
0.3594,
0.3604,
0.3732,
0.3842,
0.3842,
0.3842,
0.3944,
0.401,
-123.21,
-123.21,
0.4362,
0.4362,
0.444,
-123.21,
0.4762,
0.4766,
0.4952,
0.5025999999999998,
0.505,
0.505,
0.505,
0.505,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
-123.21,
0.6315999999999998,
0.6315999999999998,
0.6337999999999998,
0.6424,
0.6424,
0.6426000000000002,
0.6596000000000002,
0.6776000000000002,
0.6842,
0.6851999999999997,
0.6851999999999997,
0.6851999999999997,
0.6879999999999998,
0.6981999999999997,
0.701,
0.7026000000000001,
0.7996000000000002,
0.7996000000000002,
0.8002,
0.8002,
0.8023999999999998,
0.8054000000000003,
0.8214,
0.8268000000000004,
0.8268000000000004,
0.8268000000000004,
0.8268000000000004,
0.8273999999999997,
0.8273999999999997,
0.8273999999999997,
0.8273999999999997,
0.8273999999999997,
0.8273999999999997,
0.8480000000000004,
0.8538,
0.865,
0.865,
0.8682000000000004,
0.8684000000000003,
0.8690000000000003,
0.8752000000000004,
0.8752000000000004,
0.8804000000000004,
0.8804000000000004,
0.8804000000000004,
0.8804000000000004,
0.8804000000000004,
0.8804000000000004,
0.8804000000000004,
0.8804000000000004,
0.8806,
0.8806,
0.8806,
0.8664000000000003,
0.8664000000000003,
0.8664000000000003,
0.8664000000000003,
0.8664000000000003,
0.8664000000000003,
0.8664000000000003,
0.8664000000000003,
0.8664000000000003,
0.8664000000000003,
0.8668000000000002,
0.8668000000000002,
0.8668000000000002,
0.8668000000000002
]
}
],
"Type" : "Data Table",
"DiagramY" : -70,
"name" : "Records",
"Notes" : "This is a data table with columns recording the minimum and maximum temperature and rainfall amounts from my deck weather station over a few years.\n\nAs values might not have been available for some rows, I have arbitrarily assigned the value -12321 to mean not available and this is used in  the default value formulas for the temperature columns, as well as a number of the expressions that manipulate this data.\n\nThe default value for the date is the current date, while the default value for the rainfall column simply replicates the value of the previous last row, as this often does not change.\n\nNote that even though the default value formulas reference the EmptyT expression, there is no line drawn on the model diagram from that expression to this data table.  That is because the connection is not dynamic.\n\nThe formula is only evaluated when a new row is added and changing the value of EmptyT afterwards would not change any of the current table values.",
"DiagramX" : -60
},
{
"DiagramNotes" : "y",
"DiagramY" : -35,
"DiagramX" : -60,
"Type" : "Expression",
"Notes" : "An arbitrary value that would never occur naturally in the data set and is used to designate no data is available for that cell.\n\nThe result of this expression is used in temperature fields, so it is defined with a unit.\n",
"Formula" : {
"Formula" : "-12321 degC"
},
"name" : "EmptyT"
},
{
"Formula" : {
"Formula" : "{int {date bothT.date} / 100}"
},
"Type" : "Expression",
"DiagramY" : 85,
"name" : "BothTYM",
"Notes" : "Convert the time into a date value and divide by 100 and take the integer to get just the year and month numbers.",
"DiagramX" : -60
},
{
"tableUnits" : {},
"DiagramY" : 135,
"DiagramX" : -60,
"Type" : "Expression",
"Notes" : "{groupsum MonthRecords \"Date\"}\n\nUsing the groupsum function on the MonthRecords table value and grouping on the \"Date\" column, which now just contains month numbers, allows us to calculate the sum of the recorded minimum and maximum temperatures for each month of record keeping.\n\nThe count column tells us how many values were summed, which we will use in the MonthAverages expression to calculate, well, the month averages.\n\nThe actual values displayed in this expression aren't very useful to human eyes as they are actually the sum of the temperatures in degrees Kelvin and then the sum is displayed in degrees C.  Nonetheless Math Minion is keeping track of the units and all will work out in the MonthAverages expression.",
"Formula" : {
"Formula" : "{groupsum MonthRecords \"Date\"}"
},
"name" : "MonthTotals"
},
{
"Formula" : {
"Formula" : "BothTYM -\n{int BothTYM / 100} * 100\n"
},
"Type" : "Expression",
"DiagramY" : 95,
"name" : "BothTMonth",
"Notes" : "Use the divide, int, multiply trick to strip off the months and then subtract that from the original to end up with just the month number.\n",
"DiagramX" : 20
},
{
"DiagramNotes" : "y",
"DiagramY" : 135,
"DiagramX" : 40,
"Type" : "Expression",
"Notes" : "Our records did not start in January, so the sort function will be used to sort the month by month number.",
"Formula" : {
"Formula" : "{sort monthtotals}"
},
"name" : "SortedMonths"
},
{
"Formula" : {
"Formula" : "{select Records[ 0, {concat \"Date\", \"MinT\"} ],\n\t{ne Records.MinT, EmptyT}\n}"
},
"Type" : "Expression",
"DiagramY" : -70,
"name" : "MinT",
"Notes" : "This expression uses the select function to select just the minimum temperatures that are not \"empty\" along with their associated dates.  The formula is:\n\n{select Records[ 0,\n\t{concat \"Date\", \"MinT\"} ],\n\t{ne Records.MinT, EmptyT}\n}\n\nThe first argument to the select function is:\n\nRecords[ 0, {concat \"Date\", \"MinT\"} ]\n\nwhich simply uses the index operator [ ] to get all the rows of the Date and MinT columns.\n\nThe second argument:\n\n{ne Records.MinT, EmptyT}\n\nuses the not equal function to create a column array that has 1 (true) values in all the rows where the minimum temperature is not \"empty\".\n",
"DiagramX" : 45
},
{
"DiagramNotes" : "y",
"DiagramY" : -35,
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "Same as the MinT expression, except for maximum temperatures.\n",
"Formula" : {
"Formula" : "{select Records[ 0, {concat \"Date\", \"MaxT\"} ],\n\t{ne Records.MaxT, EmptyT}\n}"
},
"name" : "MaxT"
},
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"tableUnits" : {},
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "Similar to the MinT expression except for rain fall and the use of the greater or equal function to select the valid rows.",
"Formula" : {
"Formula" : "{select Records[ 0, {concat \"Date\", \"Rain_Fall\"} ],\n  {ge Records.Rain_Fall, 0\"cm\"}\n}"
},
"name" : "RainFall"
},
{
"Formula" : {
"Formula" : "{select Records,[ 0, {cc \"Date\", \"MinT\",\"MaxT\"} ]\n\t{and\n\t\t{ne Records.MinT, EmptyT},\n\t\t{ne Records.MaxT, EmptyT}\n\t}\n}"
},
"Type" : "Expression",
"DiagramY" : 50,
"name" : "BothT",
"Notes" : "Again similar to the MinT expression, but in this case we are only selecting rows where both the minimum and maximum temperatures are known and we are creating a table with both of those values, plus the date.",
"DiagramX" : -60
},
{
"DiagramNotes" : "y",
"DiagramY" : -70,
"X1" : {
"vmin" : "20070501 date",
"vmax" : "{now}",
"Y1" : {
"vmin" : "-40 degC",
"vmax" : "40 degC",
"lineType" : 0,
"v" : "MinT.MinT 'MinT"
},
"v" : "MinT.Date",
"unit" : "date"
},
"DiagramX" : 135,
"Type" : "Graph",
"Notes" : "Plots both the MinT vs Date and MaxT vs Date values on the same graph.\n\nThe minimum and maximums are set for the MinT curve and since nothing is set for the MaxT one, the same values are used.",
"X2" : {
"v" : "MaxT.Date",
"Y1" : {
"v" : "MaxT.MaxT 'MaxT",
"lineType" : 0
},
"unit" : "date"
},
"name" : "TempPlot"
},
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"X1" : {
"vmin" : "20070501 date",
"vmax" : "{now}",
"Y1" : {
"v" : "RainFall.Rain_Fall 'Rain Fall",
"lineType" : 0,
"unit" : "cm"
},
"v" : "RainFall.Date 'Date",
"unit" : "date"
},
"DiagramX" : 135,
"Type" : "Graph",
"Notes" : "Plots rain fall versus Date\n",
"name" : "PrecipPlot"
},
{
"X1" : {
"vmin" : "20060701 date",
"vmax" : "20140629 date",
"Y1" : {
"v" : "BothT.maxt - BothT.minT 'DeltaT",
"lineType" : 0,
"unit" : "deltaC"
},
"v" : "BothT.Date 'Date",
"unit" : "date"
},
"Type" : "Graph",
"DiagramY" : 55,
"name" : "DeltaTPlot",
"Notes" : "Plots the daily difference between the maximum and minimum temperatures versus date.\n\nNote the selection of deltaC as the temperature unit.  A difference of 2 deltaC is essentially 2 K, which would be displayed in degC as -271.15.",
"DiagramX" : 130
},
{
"Formula" : {
"Formula" : "{append\n\t{table BothT,\n\t\tBothTMonth,\n\t\tbotht[ 0, 2:{ncols botht}]\n\t},\n\t{table \"count\", 1:{nrows botht} * 0 + 1}\n}"
},
"Type" : "Expression",
"DiagramY" : 85,
"name" : "MonthRecords",
"Notes" : "This formula:\n\n{append\n\t{table BothT,\n\t\tBothTMonth,\n\t\tbotht[ 0, 2:{ncols botht}]\n\t},\n\t{table \"count\", 1:{nrows botht} * 0 + 1}\n}\n\nfirst creates a new table value from BothT, where the Date values are replaced with the month numbers from BothTMonth.\n\nThis is done so we can sum the totals by month using the groupsum function in the MonthTotals expression.\n\nIn addition, a column with all 1 values is appended to allow us to count the number of entries in each group.\n",
"DiagramX" : 130
},
{
"Formula" : {
"Formula" : "{table {cc \"Months\", \"MinT\", \"MaxT\"},\n\t {cc \"January\", \"February\", \"March\", \"April\",\n\t\t\"May\",  \"June\", \"July\", \"August\",\n\t\t\"September\", \"October\",\n\t\t\"November\", \"December\"\n\t},\n\tSortedMonths[0,2:3] / SortedMonths[0,4]\n}"
},
"Type" : "Expression",
"DiagramY" : 135,
"name" : "MonthAverages",
"Notes" : "{table {cc \"Months\", \"MinT\", \"MaxT\"},\n\t {cc \"January\", \"February\", \"March\", \"April\",\n\t\t\"May\",  \"June\", \"July\", \"August\",\n\t\t\"September\", \"October\",\n\t\t\"November\", \"December\"\n\t},\n\tSortedMonths[0,2:3] / SortedMonths[0,4]\n}\n\nThe second and third columns of the SortedMonths table value are extracted and divided by the fourth column.\n\nThe result is the average minimum and maximum temperature of each month of the year during the record keeping period.\n\nThese are then used in a table function, along with a list of month names to make things a little prettier.",
"DiagramX" : 135
}
],
"DiagramX" : 45,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 1.90136981010437,
"diagramX" : 150,
"name" : "DataTable",
"HideInfo" : "n"
},
{
"diagramY" : 152.0605163574219,
"DiagramY" : 60,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -145,
"DiagramX" : -145,
"countFormula" : {
"Formula" : "2"
},
"Type" : "Optimizer",
"Notes" : "The Rosenbrock function is a classic performance test problem for optimizers.  The global minimum is inside a flat bottomed, long, narrow and curved valley.\n\nThe function is: \n\nf(x,y) = (1 - x)^2 + 100(y - x^2)^2\n\nAnd has a global minimum at (1,1).\n\nNote that the optimizer runs automatically if it's inputs are changed and the Optimize switch is on.\n\n Uncheck the box after the optimization is complete if you wish to prevent this.\n\nThe reset button will return the output values to their initial value of 0 and turn off the optimize switch.  Turn it on again when you want the optimizer to run.\n",
"Enabled" : "y",
"optFormula" : {
"Formula" : "( 1.0 - $.1 ) ^ 2.0 + 100.0 * ($.2 - $.1*$.1)^2.0"
},
"name" : "Rosenbrock"
},
{
"DiagramNotes" : "y",
"DiagramY" : -145,
"DiagramX" : -220,
"Type" : "Expression",
"Notes" : "Like the solver tool, the optimizer manipulates one or more output values to achieve a desired result.  \n\nFor the optimizer this is to obtain the smallest value possible for a single function that incorporates the solver outputs.\n\nThe Powell method is used.\n\nThis model contains two examples:\n\n- Rosenbrock - a classic optimization example.\n\n- LeastSqr - uses the optimizer to fit a curve to a set of data points.",
"Formula" : {
"Formula" : "\"Just a note holder\""
},
"name" : "Optimizer"
},
{
"DiagramNotes" : "y",
"DiagramY" : -145,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -25,
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "By adding random numbers to the parameters defining a parabola, we create a set of points which approximate the curve, but with significant errors.",
"Formula" : {
"Formula" : "x^(2  + rand1) + (50 + rand2)"
},
"name" : "randCurve"
},
{
"DiagramNotes" : "y",
"DiagramY" : 145,
"DiagramX" : 40,
"Type" : "Expression",
"Notes" : "The squares of the differences between the randomized points and the points generated using the optimizer outputs as the parameters of the parabola.\n",
"Formula" : {
"Formula" : "(line - randCurve)^2"
},
"name" : "error"
},
{
"DiagramNotes" : "y",
"DiagramY" : 140,
"DiagramX" : -65,
"Type" : "Expression",
"Notes" : "The curve we want to fit.  The \"randCurve\" expression will produce points approximating this curve by adding random numbers to the two parameters.",
"Formula" : {
"Formula" : "x^2 + 50"
},
"name" : "actual"
},
{
"DiagramNotes" : "y",
"DiagramY" : 200,
"DiagramX" : -65,
"Type" : "Expression",
"Notes" : "The y values generated for a parabola whose parameters are the outputs from the optimizer.",
"Formula" : {
"Formula" : "x^lstsqr.1 + lstsqr.2 "
},
"name" : "line"
},
{
"DiagramNotes" : "y",
"DiagramY" : 75,
"X1" : {
"Y3" : {
"vmin" : "0",
"vmax" : "500",
"lineType" : 0,
"v" : "actual"
},
"Y2" : {
"vmin" : "0",
"vmax" : "500",
"lineType" : 0,
"v" : "line"
},
"Y1" : {
"vmin" : "0",
"vmax" : "500",
"lineType" : 1,
"v" : "randCurve"
},
"v" : "x"
},
"DiagramX" : 45,
"Type" : "Graph",
"Notes" : "The randomized points, the actual line the points were randomized from and the line whose parameters were optimized to produce the least errors versus the points are all plotted.",
"name" : "graph"
},
{
"DiagramNotes" : "y",
"DiagramY" : 95,
"DiagramX" : -65,
"Type" : "Expression",
"Notes" : "A second set of random numbers used to generate the points to fit.",
"Formula" : {
"Formula" : "randomness * ({rand n} - .5) * 4 * x"
},
"name" : "rand2"
},
{
"DiagramNotes" : "y",
"DiagramY" : -25,
"DiagramX" : -155,
"Type" : "Expression",
"Notes" : "The number of points to generate.",
"Formula" : {
"Formula" : "20"
},
"name" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 200,
"DiagramX" : 40,
"countFormula" : {
"Formula" : "2"
},
"Type" : "Optimizer",
"Notes" : "We want to minimized the sum of the square of the errors, so that the outputs of this optimizer are a good fit as parameters of a parabola.\n",
"Enabled" : "y",
"optFormula" : {
"Formula" : "{sum error}"
},
"name" : "lstsqr"
},
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : -65,
"Type" : "Expression",
"Notes" : "One of two arrays of random numbers that will be used to generate points approximating a parabola.\n\nNote that if the rand function has a parameter, it is taken as the number of random points to generate.",
"Formula" : {
"Formula" : "randomness * ({rand n} - .5)  / 10"
},
"name" : "rand1"
},
{
"DiagramNotes" : "y",
"DiagramY" : -25,
"DiagramX" : -65,
"Type" : "Expression",
"Notes" : "A range of x values to be used in other expressions.",
"Formula" : {
"Formula" : "1:n"
},
"name" : "x"
},
{
"DiagramNotes" : "y",
"DiagramY" : 35,
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "Calculate the errors for the random points versus the actual line",
"Formula" : {
"Formula" : "{sum (actual - randCurve)^2}"
},
"name" : "ErrorActual"
},
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : -155,
"Type" : "Expression",
"Notes" : "Changes the amount of randomness.\n\nSet to 0 and the solution should be exactly 2 and 50.\n",
"Formula" : {
"Formula" : "1"
},
"name" : "randomness"
}
],
"DiagramX" : -65,
"Type" : "Model",
"Notes" : "An optimizer is used to fit a parabola to a set of semi random points.\n\nThe points are generated by adding random numbers to the a and b parameters of an equation:\n\ny = x^A + b\n\nwhere a is 2 and b is 50 in this example.",
"diagramScale" : 2.36307692527771,
"diagramX" : 165,
"name" : "LeastSqr",
"diagramY" : 33.46354293823242
}
],
"DiagramX" : 120,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 2.832653045654297,
"diagramX" : 230,
"name" : "Optimizer",
"HideInfo" : "n"
},
{
"DiagramY" : 90,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 75,
"DiagramX" : 130,
"Type" : "Data Table",
"Columns" : [
{
"displayUnit" : "date",
"unitDimensions" : "0 0 1 0 0 0 0",
"defaultValue" : "{mktime {int {date {now}}}}",
"name" : "Date",
"nValues" : [
1354320000,
1354406400,
1354492800,
1354579200,
1354665600,
1354752000,
1354838400,
1354924800,
1355011200,
1355097600,
1355184000,
1355270400,
1355356800,
1355443200,
1355529600,
1355616000,
1355702400,
1355788800,
1355875200,
1355961600,
1356048000,
1356134400,
1356220800,
1356307200,
1356393600,
1356480000,
1356566400,
1356652800,
1356739200,
1356825600,
1356912000,
1356998400,
1357084800,
1357171200,
1357257600,
1357344000,
1357430400,
1357516800,
1357603200,
1357689600,
1357776000,
1357862400,
1357948800,
1358035200,
1358121600,
1358208000,
1358294400
]
},
{
"displayUnit" : "kg",
"unitDimensions" : "0 1 0 0 0 0 0",
"defaultValue" : "{eval bmi.weight}",
"name" : "Weight",
"nValues" : [
85.8,
86,
86,
86,
86.2,
85.59999999999997,
86,
85.59999999999997,
86,
86.59999999999997,
85.8,
86,
85.8,
86,
86.2,
86,
86.40000000000003,
86.40000000000003,
86.40000000000003,
86.2,
86.59999999999997,
86.8,
86.2,
85.2,
85.2,
86,
86.2,
86,
86.59999999999997,
86.59999999999997,
86.59999999999997,
86.8,
87.2,
86.8,
86.8,
86.40000000000003,
86.59999999999997,
86.8,
87.2,
87.2,
86.59999999999997,
86.8,
86.8,
86.2,
86.40000000000003,
86.40000000000003,
85.59999999999997
]
}
],
"Notes" : "A table of previous weights.",
"name" : "Weight"
},
{
"DiagramNotes" : "y",
"DiagramY" : 75,
"X1" : {
"v" : "Weight.date 'Date",
"Y1" : {
"v" : "Weight.Weight 'Weight",
"lineType" : 0
},
"unit" : "date"
},
"DiagramX" : 220,
"Type" : "Graph",
"Notes" : "Plot of previous weights.",
"name" : "WeightPlot"
},
{
"DiagramNotes" : "y",
"DiagramY" : 115,
"DiagramX" : 50,
"Type" : "Expression",
"Notes" : "Cascading style sheet code for the HTML form.",
"Formula" : {
"Formula" : "'\nbody {\n\tbackground-color: #EEFFEE;\n}\n\n\n/* Tables\n * --------------------------------------------------------------------- */\n\n\ttable {\n\t\tborder-top:     0px solid #ddd;\n\t\tborder-left:    0px solid #ddd;\n\t\tmargin-top: 0px;\n\t\tmargin-bottom: 0.5em;\n\t\twidth:300px;\n\t\tfont-size: x-large;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t}\n\tth,td {\n\t\tborder-bottom:  0px solid #ddd;\n\t\tborder-right:   0px solid #ddd;\n\t\tvertical-align: top;\n\t}\n/* Default Classes\n * --------------------------------------------------------------------- */\n\n\tp.title, a.title, div.title {\n\t\tcolor: #040;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t\tfont-size: 2.0em;\n\t\ttext-align: center;\n\t}\n\n\tp.subtitle {\n\t\tcolor: #040;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t\tfont-size: 1.1em;\n\t}\n\t\n\t.explain {\n\t\tcolor: #000;\n\t\tfont-size: 1.2em;\n\t}\n\t\n\t.explain a {\n\t\tcolor: blue;\n\t\ttext-decoration: underline;\n\t}\n\t\n\t.html {\n\t\tcolor: navy;\n\t\tfont-weight: bold;\n\t}\n\t\n\t.htmlresult {\n\t\tcolor: navy;\n\t\tfont-weight: bold;\n\t}\n\t\n\t.center {\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\twidth=320px;\n\t\ttext-align: center;\n\t}\n\t\n\t.input {\n\t\twidth: 100%;\n\t\tfont-size: large;\n\t}\n\tbutton {\n\t\tfont-size: large;\n\t\tmargin-left: 10px;\n\t\tmargin-right: 10px;\n\t\twidth: 120px;\n\t}\n\n\t.result {\n\t\ttext-align: center;\n\t\tfont-size: x-large;\n\t}\t\t\n\n\t.indent {\n\t\tmargin-left: 1\n\t\tem;\n\t}\n\t\n\t.buttonrow {\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\twidth: 300px;\n\t\ttext-align: center;\n\t}"
},
"name" : "css"
},
{
"DiagramNotes" : "y",
"DiagramY" : 210,
"Objects" : [
{
"DiagramY" : 36.66667175292969,
"displayUnit" : "kg",
"DiagramX" : 10.66666984558105,
"isInput" : "y",
"Type" : "Expression",
"Formula" : {
"Formula" : "{eval BMI.weight}"
},
"name" : "Weight"
},
{
"DiagramY" : 70,
"displayUnit" : "m",
"DiagramX" : 10,
"isInput" : "y",
"Type" : "Expression",
"Formula" : {
"Formula" : "{eval BMI.height}"
},
"name" : "Height"
},
{
"DiagramNotes" : "y",
"DiagramY" : 49.66667175292969,
"isOutput" : "y",
"DiagramX" : 105.6667022705078,
"Type" : "Expression",
"Notes" : "Calculates weight in kg over height in m squared.\n\nUnits are used to make this dimensionless, so its value is the same regardless of display units.",
"Formula" : {
"Formula" : "weight/1\"kg\" /\n(height/1\"m\")^2"
},
"name" : "BMI"
}
],
"DiagramX" : 130,
"Type" : "Model",
"Notes" : "This is a model which calculates body mass index, which is weight in kg divided by height, in m, squared.\n\nThe result is calculated as a dimensionless value so it is displayed correctly, regardless of display units.",
"diagramScale" : 3,
"diagramX" : 0,
"name" : "BMICalc",
"diagramY" : -30.0000057220459
},
{
"DiagramNotes" : "y",
"DiagramY" : 75,
"inputs" : {},
"DiagramX" : 55,
"Type" : "HTML Form",
"Notes" : "             Tap this icon to start",
"f0" : "css",
"Formula" : {
"Formula" : "'<html lang=\"en\">\n\t<head>\n\t\t<title>HTML Pages</title>\n\t\t<meta name=\"viewport\" content=\"initial-scale=1.0\">\n\t\t<script type=\"text/javascript\" src=\"jquery.js\"></script>\n\t\t<script  type=\"text/javascript\">$( function() {\n\t\t\t$(\".vanish\").css(\"border\", \"1px solid red\");\n\t\t});\n\t\t</script>\n\t\t<style>\n\t\t\t<mm>css</mm>\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<p class=\"title\">HTML Pages</p>\n\t\t<div class=\"explain\">\n\t\t\t<p>\n\t\t\t\tMath Minion HTML page tools provide a way to present customized input and result views.  These can be used to simplify your own tasks, or to create calculation sheets that present a simpler interface for non-technical users.  The page you are reading is itself an  HTML page tool.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tAs the name implies, HTML page tools are presented as web browser views and have a single formula that should return a string value containing the HTML to be displayed. This formula can be any valid Math Minion formula, but most often simply consists of a single quote, followed by the desired HTML.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tSpecial HTML extensions allow the results of Math Minion formulas to appear on the rendered page and for the values from input fields to be made available to the Math Minion model.  Certain actions, such as adding rows to a data table or loading a different session can also be triggered from the html page.\n\t\t\t</p>\n\t\t\t<form action=\"HTMLExtensions\" method=\"POST\" id=\"htmlext\"></form>\n\t\t\t<p>\n\t\t\t\tSee the <a onclick=\"$('#htmlext').submit();\">HTML extensions</a> page for details.\n\t\t\t</p>\n\t\t</div>\n\t</body>\n</html>"
},
"name" : "Explanation"
},
{
"f0" : "css",
"f1" : "$.weight",
"DiagramNotes" : "y",
"DiagramX" : 130,
"f2" : "$.height",
"DiagramY" : 160,
"Formula" : {
"Formula" : "'<html lang=\"en\">\n\t<head>\n\t\t<title>Your BMI</title>\n\t\t<meta name=\"viewport\" content=\"initial-scale=1.0\">\n\t\t<script type=\"text/javascript\" src=\"jquery.js\"></script>\n\t\t<script  type=\"text/javascript\">$( function() {\n\t\t\t$(\".vanish\").css(\"border\", \"1px solid red\");\n\t\t});\n\t\t</script>\n\t\t<style>\n\t\t\t<mm>css</mm>\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<p class=\"title\">Your BMI</p>\n\t\t<form action=\"$\" method=\"POST\" id=\"bmiform\">\n\t\t\t<table class=\"center\">\n\t\t\t\t<tr><td><span class=\"rowlabel\">Weight</span></td>\n\t\t\t\t\t<td><input type=\"text\" name=\"weight\" value=\"<mm>$.weight</mm>\" class=\"input\"></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr><td><span class=\"rowlabel\">Height</span>\n\t\t\t\t\t<td><input type=\"text\" name=\"height\" value=\"<mm>$.height</mm>\" class=\"input\"></td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t\t<div class=\"center\">\n\t\t\t\t<button type=\"submit\" value=\"Calculate\"\n\t\t\t\t\ttitle=\"Submit the form to calculate BMI\">Calculate</button>\n\t\t\t\t<button type=\"submit\" name=\"mm_addrow\" value=\"weight\"\n\t\t\t\t\ttitle=\"Add weight to the Weight data table\">Record</button>\n\t\t\t</div>\n\t\t</form>\n\t\t<p class=\"result\">\n\t\t\tBMI = <mm>BMICalc.BMI</mm><br>\n\t\t\tLast Recorded = <mm>{fmt \"%8.0f\", weight[{nrows weight}, \"date\"], \"date\"}</mm>\n\t\t</p>\n\t\t<form action=\"explanation\" method=\"POST\" id=\"explain\"></form>\n\t\t<form action=\"HTMLExtensions\" method=\"POST\" id=\"htmlext\"></form>\n\t\t<div class=\"buttonrow moveup\">\n\t\t\t<button class=\"menubutton\" onclick=\"window.location='mm_WeightPlot';\"\n\t\t\t\ttitle=\"Plot the weight record\">Plot</button>\n\t\t\t<button class=\"menubutton\" onclick=\"$('#explain').submit();\"\n\t\t\t\ttitle=\"Switch to the Explanation page\">Explain</button>\n\t\t</div>\n\t\t<div class=\"buttonrow\">\n\t\t\t<p><button class=\"menubutton\" onclick=\"$('#htmlext').submit();\"\n\t\t\t\ttitle=\"Switch to the HTML Extensions page\">Extensions</button></p>\n\t\t</div>\n\t</body>\n</html>"
},
"Type" : "HTML Form",
"f3" : "BMICalc.BMI",
"Notes" : "            BMI Form",
"inputs" : {
"weight" : "85 kg",
"height" : "6 ft + 1 in"
},
"name" : "BMI",
"f4" : "{fmt \"%8.0f\", weight[{nrows weight}, \"date\"], \"date\"}"
},
{
"DiagramNotes" : "y",
"DiagramY" : 115,
"inputs" : {},
"f1" : "weight[1,\"weight\"]",
"DiagramX" : 220,
"f2" : "bmi.height",
"Type" : "HTML Form",
"Notes" : "Math Minion's HTML Extensions",
"f0" : "css",
"Formula" : {
"Formula" : "'<html lang=\"en\">\n\t<head>\n\t\t<title>HTML Extensions</title>\n\t\t<meta name=\"viewport\" content=\"initial-scale=1.0\">\n\t\t<script type=\"text/javascript\" src=\"jquery.js\"></script>\n\t\t<script  type=\"text/javascript\">$( function() {\n\t\t\t$(\".vanish\").css(\"border\", \"1px solid red\");\n\t\t});\n\t\t</script>\n\t\t<style>\n\t\t\t<mm>css</mm>\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<p class=\"title\">HTML Extensions</p>\n\t\t<form action=\"BMI\" method=\"POST\" id=\"bmi\"></form>\n\t\t<div class=\"explain\">\n\t\t\t<p class=\"subtitle\">The <b>&lt;mm&gt;</b> Tag</p>\n\t\t\t<div class=\"indent\">\n\t\t\t\t<p>\t\n\t\t\t\t\t Special <b>&lt;mm&gt;</b> tags containing Math Minion formulas can be embedded within the HTML and these tags will be replaced with the results of evaluating the formulas before the HTML is rendered.  For instance the code:\n\t\t\t\t</p>\n\t\t\t\t<p class=\"html\">\n\t\t\t\t\t&lt;p&gt; &lt;mm&gt;weight[1,\"weight\"]&lt;/mm&gt; &lt;/p&gt;\n\t\t\t\t</p>\n\t\t\t\t<p>in this page produces the result:</p>\n\t\t\t\t<p class=\"htmlresult\"><mm>weight[1,\"weight\"]</mm></p>\n\t\t\t\t<p>\n\t\t\t\t\twhich is the value in the first row and the \"weight\" column of the data table named <b>weight</b>.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<p class=\"subtitle\">JavaScript</p>\t\n\t\t\t<div class=\"indent\">\n\t\t\t\t<p>\n\t\t\t\t\tYou can include Javascript in the HTML and <b>JQuery</b> is supported without a net connection by including the following in the head section:\n\t\t\t\t</p>\n\t\t\t\t<p class=\"html\">\n\t\t\t\t\t&lt;script type=\"text/javascript\" src=\"jquery.js\"&gt;&lt;/script&gt;\n\t\t\t\t</p>\n\t\t\t</div>\t\t\t\t\t\n\t\t\t<p class=\"subtitle\">Form Tag Actions</p>\t\n\t\t\t<div class=\"indent\">\t\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tAn HTML page tool can be the action target of form tags with POST methods.  If the form contains named input values, these will become string values available as parameters of the target HTML page.  The <b>BMI</b> object in this model has a form tag whose action is <b>\"$\"</b> (in other words itself) and the form has input values named \"weight\" and \"height\".  After the form has been submitted, a formula using <b>bmi.height</b> would obtain the string value entered in the \"height\" input field of the form. This is currently <b>\"<mm>bmi.height</mm>\"</b>.\n\t\t\t\t</p>\t\n\t\t\t\t<p>\n\t\t\t\t\tThese posted values are retained by the HTML page tools when sessions are saved, so the page will always have the last inputs posted to it.  If a post made to the page has no named inputs, then the previous inputs will be retained.\n\t\t\t\t</p>\n\t\t\t\t<p>The link on the <b>Explanation</b> page which loads this page, used an empty form coded as:\n\t\t\t\t</p>\n\t\t\t\t<p class=\"html\">\n\t\t\t\t\t&lt;form action=\"HTMLExtensions\" method=\"POST\" id=\"htmlext\"&gt;&lt;/form&gt;\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tand an anchor tag coded as:\n\t\t\t\t</p>\n\t\t\t\t<p class=\"html\">\n\t\t\t\t\t&lt;a onclick=\"$('#htmlext').submit();\"&gt;HTML extensions&lt;/a&gt;\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThis makes use of the onclick attribute to submit the form using JQuery functions.  However you cannot use the JQuery <b>post</b> function to invoke a MM HTML form object.  It must be a form submission.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<p class=\"subtitle\">Viewing Non-Form Objects</p>\t\n\t\t\t<div class=\"indent\">\t\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tIf the action of a form tag is a Math Minion tool that is not an HTML page, then the view for that tool is simply pushed overtop of the html page and pressing the back button will return to the original page.  Using javascript to assign an tool's name, prepended by \"mm_\" (e.g \"mm_HTMLExtensions\") to <b>window.location</b> has the same effect.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<p class=\"subtitle\">Adding Rows to a Data Table</p>\n\t\t\t<div class=\"indent\">\n\t\t\t\t<p>\n\t\t\t\t\tIf an input value, probably hidden, to a form has the name <b>mm_addrow</b>, then its value is taken as the name of a data table in the model and a new row is added to the end of that data table.  This is done after the HTML page that is the action of the form tag has been updated with any other inputs.  If the data table that is having the row added references these inputs either directly or indirectly in its initial value formulas, then the values of the new row can result from the input of the form.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tWhen the <b>Record</b> button on the <b>BMI</b> form is tapped, the weight input in the form is added to the <b>Weight</b> data table using this method.  Note that form inputs are always strings, so the <b>eval</b> function is used to evaluate them as formulas.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<p class=\"subtitle\">Forcing a Recalculation</p>\t\n\t\t\t<div class=\"indent\">\n\t\t\t\t<p>\n\t\t\t\t\tWhen a Math Minion tool calculates new values, it normally remembers those until one of its inputs changes or a new session is loaded.  However in some circumstances, such as an expression which has read input from the web using the <b>wget</b> function, you may want a tool to forget its retained value and recalculate it.  If a form input has the name <b>mm_refresh</b>, then its value is assumed to be a tool name and any retained value for that tool is forgotten and recalculated.\n\t\t\t\t</p> \n\t\t\t</div>\t\t\t\t\t\n\t\t\t<p class=\"subtitle\">Loading a Different Session</p>\t\n\t\t\t<div class=\"indent\">\n\t\t\t\t<p>\n\t\t\t\t\tYou may want to break some activities up into different sessions, but still be able to access them directly from the HTML page.  If a form input has the name <b>mm_load</b>, then Math Minion will attempt to load a session with the name of that input's value.\n\t\t\t\t</p>\n\t\t\t</div>\t\t\t\t\t\n\t\t\t<p class=\"subtitle\">Net Communication</p>\t\n\t\t\t<div class=\"indent\">\t\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tYou can use absolute URLs to access net based servers to load net resources, submit forms, or with javascript functions, as on any ordinary web page.  Of course you will have to have to be online for this to work.\n\t\t\t\t</p>\t\t\t\n\t\t\t</div>\n\t\t\t<form action=\"explanation\" method=\"POST\" id=\"explain\"></form>\n\t\t\t<form action=\"bmi\" method=\"POST\" id=\"BMI\"></form>\n\t\t\t<div class=\"buttonrow moveup\">\n\t\t\t\t<button class=\"menubutton\" onclick=\"$('#explain').submit();\">Explain</button>\n\t\t\t\t<button class=\"menubutton\" onclick=\"$('#BMI').submit();\">BMI Form</button>\n\t\t\t</div>\n\t\t\t<p>&nbsp;</p>\n\t\t</div>\n\t</body>\n</html>"
},
"name" : "HTMLExtensions"
},
{
"DiagramNotes" : "y",
"DiagramY" : 160,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 40,
"inputs" : {
"a" : 10,
"b" : 2
},
"f1" : "$.b",
"DiagramX" : 170,
"Type" : "HTML Form",
"Notes" : "An HTML page that implements a very simple calculator using the javascript bridge to have Math Minion perform calculations without reloading the html page.\n\nRead through the comments in the html to see how it works.",
"f0" : "$.a",
"Formula" : {
"Formula" : "'<html lang=\"en\"> \n\t<head>\n\t\t<title>mmcalc Example</title>\n\t\t<meta name=\"viewport\" content=\"initial-scale=1.0\">\n\t\t\n\t\t<!-- jquery makes things easier, so I will include the build in version -->\n\t\t<script type=\"text/javascript\" src=\"jquery.js\"></script>\n\t\t\n\t\t<!-- the mmcalc.js file, which is also built in, must be included for the javascript bridge -->\n\t\t<script type=\"text/javascript\" src=\"mmcalc.js\"></script>\n\t\t\n\t\t<script  type=\"text/javascript\">\n\t\t\tfunction calc(op) {  // this function is called each time one of the buttons is pressed\n\t\t\t\tvar a = $('#a').val();\t// the value of the input field with id 'a' is retrieved\n\t\t\t\tif (!a) a = '1';\t\t\t// set it to one if absent - brain dead error avoidance\n\t\t\t\ta = parseFloat(a)\t\t// convert the text into a number\n\n\t\t\t\tvar b = $('#b').val();\t// get the b value as well\n\t\t\t\tif (!b) b = '2';\n\t\t\t\tb = parseFloat(b);\n\n\t\t\t\t // create a dictionary of names and values that will be assigned as parameter values\n\t\t\t\t// to the html form object\n\t\t\t\tvar assignments = { 'a': a, 'b':b  }; \n\n\t\t\t\t// create a second dictionary of formulas that will be evaluated by the html form\n\t\t\t\t// the names will be the keys in the returned dictonary of results\n\t\t\t\t// in this case the formula is the parameter passed by the button pressed and is\n\t\t\t\t// just the name of the expression object whose value is wanted\n\t\t\t\tvar requests = {'x': op };\n\t\t\t\t\n\t\t\t\t// call mmcalc with the assignments and requests dictionary and a call back function\n\t\t\t\t// that will be evaluated when the requests have been calculated.\n\t\t\t\t// The call back function takes a single argument, which is a dictionary of requested results\n\t\t\t\tmmcalc( assignments, requests, function(results) {\n\t\t\t\t\tvar x = results.x;\t\t// get the result corresponding to the request name 'x'\n\t\t\t\t\tif ( x != null )\n\t\t\t\t\t\t$('#a').val(x);\t\t// assign it to the 'a' input field\n\t\t\t\t} );\n\t\t\t}\n\n\t\t</script>\n\t\t<!-- some cosmetic stuff -->\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tbackground-color: #EEFFEE;\n\t\t\t\tfont-size: 20pt;\n\t\t\t}\n\t\t\tinput {\n\t\t\t\tfont-size: 14pt;\n\t\t\t}\n\t\t\ttable {\n\t\t\t\twidth: 310px;\n\t\t\t}\n\t\t\t.note {\n\t\t\t\tfont-size: 14pt;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<!-- The two input fields.  Since everything will be done by the bridge, there is no need to\n\t\t\tenclose them in a form block\n\t\t-->\n\t\t<p>\n\t\t\ta:\n\t\t\t<input type=\"text\" id=\"a\" value=\"<mm>$.a</mm>\">\n\t\t\t<!-- The mm tag is used to fill in previous values when the html page is first rendered.  The mm tags don't\n\t\t\t\tchange as we use the js bridge, but the input values can be overwritten by javascript.\n\t\t\t-->\n\t\t</p>\n\t\t<p>\n\t\t\tb:\n\t\t\t<input type=\"text\" id=\"b\" value=\"<mm>$.b</mm>\">\n\t\t</p>\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<!-- Buttons for the arithmetic operators.  When pressed each will call the calc function\n\t\t\t\t\tand pass the name of the appropriate expression operation\n\t\t\t\t-->\n\t\t\t\t<td><input id=\"input\" type=\"button\" class=\"button\" onclick=\"calc('plus');\" value=\"+\"></td>\n\t\t\t\t<td><input id=\"input\" type=\"button\" onclick=\"calc('minus');\" value=\"-\"></td>\n\t\t\t\t<td><input id=\"input\" type=\"button\" onclick=\"calc('times');\" value=\"*\"></td>\n\t\t\t\t<td><input id=\"input\" type=\"button\" onclick=\"calc('divide');\" value=\"/\"></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<p class=\"note\">\n\t\t\tPressing a key performs that operation between <b>a</b> and <b>b</b> and places the result in <b>a</b>.\n\t\t</p>\n\t</body>\n</html>"
},
"name" : "JSForm"
},
{
"DiagramNotes" : "y",
"DiagramY" : 100,
"DiagramX" : 350,
"Type" : "Expression",
"Notes" : "       Calculates a * b",
"Formula" : {
"Formula" : "a*b"
},
"name" : "times"
},
{
"DiagramNotes" : "y",
"DiagramY" : 40,
"DiagramX" : 255,
"Type" : "Expression",
"Notes" : "Retrieves the 'a' value from the form object.",
"Formula" : {
"Formula" : "jsform.a"
},
"name" : "a"
},
{
"DiagramNotes" : "y",
"DiagramY" : 80,
"DiagramX" : 255,
"Type" : "Expression",
"Notes" : "Retrieves the 'b' value from the form object.",
"Formula" : {
"Formula" : "jsform.b"
},
"name" : "b"
},
{
"DiagramNotes" : "y",
"DiagramY" : 70,
"DiagramX" : 350,
"Type" : "Expression",
"Notes" : "       Calculates a - b",
"Formula" : {
"Formula" : "a-b"
},
"name" : "minus"
},
{
"DiagramNotes" : "y",
"DiagramY" : 40,
"DiagramX" : 350,
"Type" : "Expression",
"Notes" : "       Calculates a + b",
"Formula" : {
"Formula" : "a+b"
},
"name" : "plus"
},
{
"DiagramNotes" : "y",
"DiagramY" : 130,
"DiagramX" : 350,
"Type" : "Expression",
"Notes" : "       Calculates a / b",
"Formula" : {
"Formula" : "a/b"
},
"name" : "divide"
}
],
"DiagramX" : 220,
"Type" : "Model",
"Notes" : "It is possible for javascript to call a function to initiate a Math Minion calculation without having to submit a form.  This model contains an example demonstrating this feature.",
"diagramScale" : 2.570370435714722,
"diagramX" : -160,
"name" : "JSBridge",
"diagramY" : -32.21902084350586
}
],
"DiagramX" : 45,
"diagramScale" : 2.669230699539185,
"Type" : "Model",
"Notes" : "",
"diagramX" : -40,
"name" : "HtmlForm",
"diagramY" : -67.5072021484375
},
{
"diagramY" : 61.66666793823242,
"DiagramY" : 40,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"diagramY" : -0.7803733348846436,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 65,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "By taking the transpose of the column array, we can use the dot function to matrix multiply it by it's untransposed self.  The result is a scalar.",
"Formula" : {
"Formula" : "{dot {tr col}, col}"
},
"name" : "cDotC"
},
{
"DiagramNotes" : "y",
"DiagramY" : 120,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "A column array with elements 2 and 3",
"Formula" : {
"Formula" : "2:3"
},
"name" : "col2"
},
{
"DiagramNotes" : "y",
"DiagramY" : -20,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "As multiplication is commutative, reversing the order and multiplying the row array by the column array results in the same 8x4 result.",
"Formula" : {
"Formula" : "row*col"
},
"name" : "rxc"
},
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"DiagramX" : -80,
"Type" : "Expression",
"Notes" : "A row array of length 4 generated by using the transpose function on a column array.",
"Formula" : {
"Formula" : "{tr 11:14}"
},
"name" : "row"
},
{
"DiagramNotes" : "y",
"DiagramY" : 30,
"DiagramX" : 115,
"Type" : "Expression",
"Notes" : "An example of multiplying a matrix by a row matrix that has fewer columns.",
"Formula" : {
"Formula" : "{transpose col2}*rxc"
},
"name" : "row2X"
},
{
"Formula" : {
"Formula" : "{dot col, row}"
},
"Type" : "Expression",
"DiagramY" : 35,
"name" : "dot",
"Notes" : "The dot function does matrix multiplication of the two arguments.\n\nThe nontechnical Wikipedia definition of a matrix multiplication result is \"a matrix whose elements are found by multiplying the elements of the same row from the first matrix times the associated elements of the same column from the second matrix and summing\".\n\nIn this case matrix multiplying the column array times the row array results in the same 8x4 matrix as the normal multiplication yielded.  This is because the number of columns in the first argument and rows in the second argument are 1, so the summation takes place over a single cell.\n\nMatrix multiplication is not commutative and in this case a matrix multiplication of the row array by the column array would be illegal since the number of columns of the first must equal the number of rows of the second.\n\nSee the mmult expression for an example of using the dot function on actual matrices.",
"DiagramX" : 20
},
{
"DiagramNotes" : "y",
"DiagramY" : -60,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "Multiplying the 8 row column array by the 4 column row array results in an 8x4 matrix.",
"Formula" : {
"Formula" : "col*row"
},
"name" : "cxr"
},
{
"DiagramNotes" : "y",
"DiagramY" : -20,
"DiagramX" : -80,
"Type" : "Expression",
"Notes" : "A column matrix of length 8 generated with the range operator.",
"Formula" : {
"Formula" : "1:8"
},
"name" : "col"
},
{
"DiagramNotes" : "y",
"DiagramY" : -20,
"DiagramX" : 115,
"Type" : "Expression",
"Notes" : "An example of multiplying a matrix by a column matrix that has fewer rows.",
"Formula" : {
"Formula" : "col2*rxc"
},
"name" : "col2X"
},
{
"unit" : "m",
"DiagramNotes" : "y",
"DiagramY" : 145,
"CellInputs" : {
"3_2" : "5 m",
"2_1" : "9 m",
"3_1" : "8 m",
"1_2" : "25 m",
"2_2" : "10 m",
"1_1" : "12 m",
"0_0" : "0 m"
},
"DiagramX" : -80,
"Type" : "Matrix",
"Notes" : "A 3x2 matrix with all cells defined as constants.  The unit for these values is defined as meters.",
"columnCount" : "2",
"name" : "B",
"rowCount" : "3"
},
{
"unit" : "N",
"DiagramNotes" : "y",
"DiagramY" : 85,
"CellInputs" : {
"2_1" : "2 N",
"3_3" : "7 N",
"0_0" : "0 N",
"1_2" : "9 N",
"3_1" : "0 N",
"4_3" : "3 N",
"2_2" : "11 N",
"1_3" : "3 N",
"4_1" : "5 N",
"3_2" : "12 N",
"1_1" : "14 N",
"2_3" : "15 N",
"4_2" : "2 N"
},
"DiagramX" : -80,
"Type" : "Matrix",
"Notes" : "A 4x3 matrix with all cells defined as constants.  The unit for these values is defined as newtons.",
"columnCount" : "3",
"name" : "A",
"rowCount" : "4"
},
{
"DiagramNotes" : "y",
"DiagramY" : 155,
"isOutput" : "y",
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "The dot function is used to matrix multiply a 4x3 matrix by a 3x2 matrix, yielding a 4x2 result.\n\nUnits are honoured in matrix multiplication as with other multiplications.\n\nIn this case multiplying a newton by a meter results in a joule, but the SI unit set uses kilojoules as the default output, so the numbers are smaller by a factor of a 1000 than if units hadn't been used.\n\nOf course you can set the display unit to a different energy unit if you wish.",
"Formula" : {
"Formula" : "{dot A, B}"
},
"name" : "mmult"
}
],
"DiagramX" : 50,
"Type" : "Model",
"Notes" : "Additional examples of multiplying matrices.",
"diagramScale" : 2.274569749832153,
"diagramX" : 104.636833190918,
"name" : "Multiply",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 80,
"diagramY" : -11.66666698455811,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "A constant for the Savings calculation.",
"Formula" : {
"Formula" : "10 %"
},
"name" : "interest"
},
{
"DiagramNotes" : "y",
"DiagramY" : 60,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "The initial amount of savings\n",
"Formula" : {
"Formula" : "1000"
},
"name" : "initial"
},
{
"DiagramNotes" : "y",
"DiagramY" : 240,
"DiagramX" : 95,
"Type" : "Expression",
"Notes" : "One can accomplish the same thing with a single formula, if you aren't trying to demonstrate matrix behaviour. :-)",
"Formula" : {
"Formula" : "initial *\n(1 + interest/12)^(1:20*12)"
},
"name" : "futureV"
},
{
"CellInputs" : {
"0_1" : "{cell -1,0} * ( 1 + interest / 12)",
"1_1" : "initial * (1 + interest/12)",
"0_0" : "0"
},
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 100,
"Type" : "Matrix",
"Notes" : "The cell function was discussed in the notes for the Matrix tool, but how it might be useful may not have been obvious in that contrived example. It actually comes up quite frequently so here is another contrived and very simple example of its use.\n\nAssuming an initial value and an interest compounded monthly, the ever growing monthly savings can be calculated by:\n\n{cell -1,0} * ( 1 + interest / 12)\n\nThe initial amount for the end of the first month is entered into cell 1,1 and this formula is used for the rest of the column 1 cells.\n\nAssuming the interest is an annual interest, it is divided by 12, added to 1 and the result used to multiply last months value from the cell above.\n\nThe number of rows is set to be 20 * 12 to provide 20 years of month by month calculations.",
"columnCount" : "1",
"name" : "savings",
"rowCount" : "20 * 12"
},
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 175,
"Type" : "Expression",
"Notes" : "Rather than looking at every month, perhaps we are only interested in yearly values.\n\nHere I use a index array to extract the 12th, 24th, 36th etc. values.  The range operator produces an array 1,2,3..20, which is multiplied by twelve to produce an array 12,24,36...240.  These values are then used as the indices into the savings array.",
"Formula" : {
"Formula" : "savings[1:20*12]"
},
"name" : "yearlySavings"
}
],
"DiagramX" : 50,
"Type" : "Model",
"Notes" : "Cell function example",
"diagramScale" : 2.400000095367432,
"diagramX" : -5,
"name" : "Example",
"HideInfo" : "n"
},
{
"DiagramY" : 60,
"Objects" : [
{
"CellInputs" : {
"0_0" : "{rand}"
},
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 45,
"Type" : "Matrix",
"Notes" : "This is a 50x50 matrix filled with random numbers for use with the invert function.\n\nInverting a matrix of random numbers has a very high likelihood of succeeding.  The numbers are random though, so there is a small possibility that a singular or otherwise evil matrix might be generated resulting in the inversion failing.\n\nIn that case just make a small change to the formula used here (add a space to the end for instance) so that new random numbers are generated.",
"columnCount" : "50",
"name" : "Random",
"rowCount" : "50"
},
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"DiagramX" : 125,
"Type" : "Expression",
"Notes" : "The invert function is used to invert the Random matrix.  See the notes on the Random matrix if this should fail.",
"Formula" : {
"Formula" : "{invert random}"
},
"name" : "Invert"
},
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 210,
"Type" : "Expression",
"Notes" : "Matrix multiplying a matrix by its inverse should result in the identity matrix, as demonstrated here.\n\nThe off diagonal values won't be identically zero, but as an engineer, I will call it close enough. :-)",
"Formula" : {
"Formula" : "{dot random, invert}"
},
"name" : "matmult"
}
],
"DiagramX" : 50,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : -8.333333015441895,
"diagramX" : -35,
"name" : "Inversion",
"HideInfo" : "n"
},
{
"DiagramY" : 5,
"Objects" : [
{
"CellInputs" : {
"0_0" : "{row} + {col}/10"
},
"DiagramNotes" : "y",
"DiagramY" : 5,
"DiagramX" : 30,
"Type" : "Matrix",
"Notes" : "A matrix used to illustrate how binary arithmetic operators work with matrices.",
"columnCount" : "8",
"name" : "m2x8",
"rowCount" : "2"
},
{
"CellInputs" : {
"0_0" : "{row}*10 + {col}/100"
},
"DiagramNotes" : "y",
"DiagramY" : 45,
"DiagramX" : 30,
"Type" : "Matrix",
"Notes" : "A second matrix for illustrating binary arithmetic operators.",
"columnCount" : "3",
"name" : "m4x3",
"rowCount" : "4"
},
{
"DiagramNotes" : "y",
"DiagramY" : 55,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "Here a 2x8 matrix is added to a 4x3 matrix to illustrate how binary operators work with matrices.\n\nNormally you will be performing such operations on matrices that conform in size, but Math Minion does permit operations on mismatched matrices such as these.\n\nThe result will always have a number of rows equal to the larger of the two operands.  Similarly the number of result columns will be the larger of the two.\n\nEach result cell is calculated by performing the arithmetic operation on the cells of the operands with indices corresponding to that of the result cell.\n\nIf either of these indices would be too large for the operand, the modulus of its value with respect to the maximum size is used.\n",
"Formula" : {
"Formula" : "m2x8+m4x3"
},
"name" : "s4x8"
},
{
"DiagramNotes" : "y",
"DiagramY" : 5,
"DiagramX" : 190,
"Type" : "Expression",
"Notes" : "The concat function creates a new array by concatenating the values of all of its arguments.  Matrix arguments will be unwound row by row.  The redim function can be used to redimension the resulting array if desired.\n",
"Formula" : {
"Formula" : "{concat m2x8, m4x3, s4x8}"
},
"name" : "concat"
},
{
"DiagramNotes" : "y",
"DiagramY" : 5,
"DiagramX" : 270,
"Type" : "Expression",
"Notes" : "The redim function can be used to redimension a value.  This does not change how many elements the object has, or even the order in which they are stored' but rather changes how they are arranged in rows and columns.\n\nThe function takes two arguments.  The first is the value to be copied and the second is the number of columns the result is to have.  The number of columns must divide evenly into the total number of elements in the source value.\n\nMatrices in Math Minion are stored row by row, so that if you were to use this function to change a matrix into a column array with only one column, then the top values would be those from the first row, with the values from the second row, following and so forth.",
"Formula" : {
"Formula" : "{redim concat 4}"
},
"name" : "redim"
},
{
"DiagramNotes" : "y",
"DiagramY" : 80,
"DiagramX" : 185,
"Type" : "Expression",
"Notes" : "In effect this means the smaller operands values are reused in order as needed.\n\nThe effect is easy to examine in this example as the calculation results in values where the inner two digits represent the row and column of the 2x8 operand, while the outer digits represent the row and column of the 4x3 operand.\n\nBe sure and see the notes in Multiply in the parent model for more examples of operations on matrices, including matrix multiplication with the dot function.\n\nNot that the concat function can be abbreviated as just cc.\n",
"Formula" : {},
"name" : "s4x8_Continued"
}
],
"DiagramX" : 50,
"diagramScale" : 2.590909004211426,
"Type" : "Model",
"diagramY" : 2.719298362731934,
"diagramX" : -20,
"name" : "Operations_2",
"HideInfo" : "n"
},
{
"DiagramY" : -55,
"Objects" : [
{
"CellInputs" : {
"0_2" : "{cell -1, 0} + {row}",
"1_2" : "1",
"0_0" : "{row} + {col} / 10",
"3_0" : "100 * {col}^2"
},
"DiagramNotes" : "y",
"DiagramY" : -190,
"DiagramX" : 10,
"Type" : "Matrix",
"Notes" : "A matrix tool allows a detailed specification of a matrix at the cell, column and row levels.\n\nThe number of rows and columns is specified in the fields immediately above the matrix table.\n\nWhile often constants, these fields are in fact formula fields and their values can be calculated from external values.\n\nIn this case we have a matrix with 5 rows and 4 columns.\n\nFor this matrix four different formulas are used to define the content of the matrix.\n\nCells with formulas have an orange background unless they are the selected cell, in which case the background is green.\n\nIf there is a formula for the selected cell, it appears in the field below the notes window.\n\nCell 1,2 (row 1, column 2) is simply defined as the value 1.\n",
"columnCount" : "4",
"name" : "Matrix",
"rowCount" : "5"
},
{
"DiagramNotes" : "y",
"DiagramY" : -190,
"DiagramX" : 95,
"Type" : "Expression",
"Notes" : "The label cell for row 3 has the formula:\n\n100 * {col}^2\n\nBecause this formula is defined for the label cell, it will be used for each cell in the row that does not have it's own formula (a constant is just a type of formula).\n\nThe function {col} is only valid when called by a formula in a matrix cell and returns the column number for the cell that is evaluating the formula.  Thus this formula causes the cell's column number to be squared and multiplied by 100, resulting in values of 100, 400, 900 and 1600 in the cells of the row.\n\nThe label cell for column 2 has the formula:\n\n{cell -1, 0} + {row}\n\n",
"Formula" : {},
"name" : "Notes2",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : -190,
"DiagramX" : 180,
"Type" : "Expression",
"Notes" : "The function \"cell\" can also only be called by a cell formula.  It returns the value of the cell in the same matrix whose index is computed by adding the first parameter to the calling cell's row number and the second parameter to the calling cell's column number.  The result here is the value of the cell immediately above it in the same column.\n\nBecause cell 1,2 has a value already defined as 1, this formula is not used for it, however for cell 2,2 it will be used and the cell function will evaluate to 1, the value of cell 1,2.  The {row} function is analogous to the {col} function and returns the evaluating cell's row number, which in this case is 2.  Thus the value for cell 2,2 will be 1 + 2 = 3.\n\nCell 3,2 already has a value determined by the row formula to be 400 and row formulas have precedence over column formulas.\n\n",
"Formula" : {},
"name" : "Notes3",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 40,
"DiagramX" : 10,
"Type" : "Expression",
"Notes" : "The column equation is again used for  cell 4,2, where it adds it's row number, 4, to value of the cell above to get 404.  A similar calculation for cell 5,2 yields 409.\n\nFinally there is a formula specified for the cell at the top left that is labelled \"*\":\n\n{row} + {col} / 10\n\nThis formula has the lowest priority and is used for all the cells that have no cell, row or column formula to use.  In this case it creates a value which is the cell's row number plus it's column number divided by 10.  Thus cell 1,1 has a value of 1.1.\n",
"Formula" : {},
"name" : "Notes4",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 40,
"DiagramX" : 95,
"Type" : "Expression",
"Notes" : "Some other points worth noting:\n\nAll values in a matrix must have the same unit type, although constant formulas can have differing units as long as they are all of the same type.\n\n If a unit is set using the info button beside the unit type, then all constant values that don't have an explicit unit will be assumed to use that unit.  It is a good idea to set the unit type of a matrix before entering any cell formulas.\n\nTapping in any cell selects it and moves its formula to the formula field.",
"Formula" : {},
"name" : "Notes5"
}
],
"DiagramX" : 50,
"diagramScale" : 2.797876596450806,
"Type" : "Model",
"diagramY" : 31.48644828796387,
"diagramX" : -11.61180019378662,
"name" : "Matrix_Tool"
},
{
"DiagramY" : -15,
"Objects" : [
{
"CellInputs" : {
"2_1" : "4",
"3_1" : "5",
"1_1" : "1"
},
"DiagramNotes" : "y",
"DiagramY" : -25,
"DiagramX" : 50,
"Type" : "Matrix",
"Notes" : "This is a column matrix with some values for use with the Subsets expression.",
"columnCount" : "1",
"name" : "Indices",
"rowCount" : "3"
},
{
"CellInputs" : {
"0_2" : "{cell -1, 0} + {row}",
"1_2" : "1",
"0_0" : "{row} + {col} / 10",
"3_0" : "100 * {col}^2"
},
"DiagramNotes" : "y",
"DiagramY" : -155,
"DiagramX" : 45,
"Type" : "Matrix",
"Notes" : "A matrix object.",
"columnCount" : "4",
"name" : "Matrix",
"rowCount" : "5"
},
{
"DiagramNotes" : "y",
"DiagramY" : -110,
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "The transpose function rotates a matrix so that its rows become columns and it columns become rows.  Thus the 5x4 Matrix value becomes a 4x5 matrix.",
"Formula" : {
"Formula" : "{transpose matrix}"
},
"name" : "Transpose"
},
{
"DiagramNotes" : "y",
"DiagramY" : -235,
"DiagramX" : 145,
"Type" : "Expression",
"Notes" : "A cell of a matrix can be referenced by following the matrix name by the comma separated row and column numbers in square brackets:\n\nmatrix[4,2]",
"Formula" : {
"Formula" : "matrix[4,2]"
},
"name" : "Cell"
},
{
"DiagramNotes" : "y",
"DiagramY" : -155,
"DiagramX" : 140,
"Type" : "Expression",
"Notes" : "If only a single index is given inside the square brackets, it is assumed to be a row number and returns the entire row.  Thus for a column array, a[3] would be equivalent to a[3,1].",
"Formula" : {
"Formula" : "matrix[4]"
},
"name" : "Row"
},
{
"DiagramNotes" : "y",
"DiagramY" : -25,
"DiagramX" : 140,
"Type" : "Expression",
"Notes" : "The row and column values inside the square bracket index operator don't have to be scalars.\n\nIn this case the array from the Indices object is used for the row value, while the range operator 2:3 is used for the columns.  The result is a 3x2 subset of Matrix.\n\nWhile all the values in indices must be valid for the matrix being referenced, they do not have to be contiguous or in a specific order.\n\nIf the index is a matrix rather than an array, it will be unwound row by row to produce the index array.",
"Formula" : {
"Formula" : "matrix[ indices, 2:3]"
},
"name" : "Subsets"
},
{
"CellInputs" : {
"0_0" : "{if {gt {row}, {col}},\n  1,\n  matrix[ {row}, {col} ]\n}\n' select 1 if row number is greater than column number, otherwise the corresponding value from the matrix object is used.\n\nNote the use of the single quote to append a comment to the end of a formula.\n"
},
"DiagramNotes" : "y",
"DiagramY" : -195,
"DiagramX" : 225,
"Type" : "Matrix",
"Notes" : "An \"if\" function is used to extract the diagonal and upper triangle of the Matrix matrix, while setting the lower triangle values to 1.\n",
"columnCount" : "{ncols matrix}",
"name" : "Upper",
"rowCount" : "{nrows matrix}"
},
{
"DiagramNotes" : "y",
"DiagramY" : -90,
"DiagramX" : 140,
"Type" : "Expression",
"Notes" : "If the row index is 0, then all rows are selected.\n\nThus matrix[0,2] will result in a column array consisting of the 2nd column of matrix.",
"Formula" : {
"Formula" : "matrix[0,2]"
},
"name" : "Column"
}
],
"DiagramX" : 50,
"diagramScale" : 2.491286754608154,
"Type" : "Model",
"diagramY" : 123.4425048828125,
"diagramX" : -24.7295970916748,
"name" : "Operations_1",
"HideInfo" : "n"
},
{
"CellInputs" : {
"0_2" : "{row} * 100",
"3_1" : "{cell -1, 1} * 5",
"3_2" : "10000",
"0_0" : "{row} * {col} ",
"2_0" : "{col} *10"
},
"DiagramNotes" : "y",
"DiagramY" : -55,
"DiagramX" : -25,
"Type" : "Matrix",
"Notes" : "While the result of every calculation in Math Minion is a matrix, even if it is often just a 1x1 matrix, there is also a specific matrix tool that can be added to the diagram.\n\nThis tool allows for a detailed specification of a matrix.\n\nIndependent formulas can be supplied for each row, column or cell and these formulas are allowed to reference other cells in the matrix.\n",
"columnCount" : "2",
"name" : "Matrices",
"rowCount" : "4"
}
],
"DiagramX" : 45,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 3,
"diagramX" : 35,
"name" : "Matrices",
"HideInfo" : "n"
},
{
"diagramY" : 7.348703384399414,
"DiagramY" : 110,
"Objects" : [
{
"DiagramY" : 40,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 35,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Inlet flow rate",
"Formula" : {
"Formula" : "100 l/s"
},
"name" : "flowIn"
},
{
"DiagramNotes" : "y",
"DiagramY" : 70,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Total volume of accumulated liquid.",
"Formula" : {
"Formula" : "100 l"
},
"name" : "Volume"
},
{
"DiagramNotes" : "y",
"DiagramY" : 105,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Surface area of the liquid area.",
"Formula" : {
"Formula" : "1 m^2"
},
"name" : "area"
},
{
"DiagramNotes" : "y",
"DiagramY" : 140,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "height of weir\n",
"Formula" : {
"Formula" : "3 cm"
},
"name" : "hWeir"
},
{
"DiagramNotes" : "y",
"DiagramY" : 55,
"DiagramX" : 130,
"Type" : "Expression",
"Notes" : "Total height of liquid",
"Formula" : {
"Formula" : "volume / area"
},
"name" : "hTotal"
},
{
"DiagramNotes" : "y",
"DiagramY" : 95,
"DiagramX" : 130,
"Type" : "Expression",
"Notes" : "height over weir",
"Formula" : {
"Formula" : "htotal - hweir"
},
"name" : "hOverWeir"
},
{
"DiagramNotes" : "y",
"DiagramY" : 95,
"DiagramX" : 200,
"Type" : "Expression",
"Notes" : "height over weir, with check to ensure flow is zero when liquid is below weir.",
"Formula" : {
"Formula" : "{if {gt hOverWeir, 0.0 \"m\"}, hOverWeir, 0.0\"m\"}"
},
"name" : "h"
},
{
"DiagramNotes" : "y",
"DiagramY" : 175,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "width of weir",
"Formula" : {
"Formula" : "50 cm"
},
"name" : "wWeir"
},
{
"DiagramNotes" : "y",
"DiagramY" : 210,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Discharge coefficient for weir.  Arbitrarily set to 1 for this fictional example.",
"Formula" : {
"Formula" : "1"
},
"name" : "cd"
},
{
"DiagramNotes" : "y",
"DiagramY" : 130,
"DiagramX" : 130,
"Type" : "Expression",
"Notes" : "gravitational constant\n",
"Formula" : {
"Formula" : "9.81 m/s^2"
},
"name" : "g"
},
{
"isOutput" : "y",
"Type" : "Expression",
"DiagramY" : 35,
"name" : "accumulation",
"DiagramX" : 215,
"Formula" : {
"Formula" : "flowIn - flowOut"
}
},
{
"DiagramNotes" : "y",
"DiagramY" : 150,
"isOutput" : "y",
"DiagramX" : 200,
"Type" : "Expression",
"Notes" : "Flow over weir",
"Formula" : {
"Formula" : "(2/3) * cd * wWeir *(2*g)^0.5 * h^1.5"
},
"name" : "flowOut"
}
],
"DiagramX" : 35,
"diagramScale" : 2.825454473495483,
"Type" : "Model",
"Notes" : "The input values of inlet flow, volume, surface area and weir height and width are used along with an empirical constant to calculate the outlet flow.  \n\nThis is subtracted from the inlet flow to determine the rate of accumulation.\n",
"diagramX" : -30,
"name" : "Tank",
"diagramY" : -27.92149353027344
},
{
"Type" : "Expression",
"DiagramY" : 0,
"name" : "TankCount",
"DiagramX" : 200,
"Formula" : {
"Formula" : "Tanks.nrows"
}
},
{
"DiagramNotes" : "y",
"DiagramY" : 85,
"DiagramX" : 110,
"displayUnit" : "L",
"Type" : "Expression",
"Notes" : "Just an arbitrary formula to give a range of initial volumes",
"Formula" : {
"Formula" : "50 \"l\" + 1:TankCount * 50\"l\""
},
"name" : "InitialV"
},
{
"DiagramNotes" : "y",
"DiagramY" : 140,
"DiagramX" : 35,
"Type" : "Expression",
"Notes" : "Upper bound of volume plot",
"Formula" : {
"Formula" : ".2 m^3"
},
"name" : "VMaxPlot"
},
{
"DiagramNotes" : "y",
"DiagramY" : 175,
"DiagramX" : 35,
"Type" : "Expression",
"Notes" : "Upper bound of flow plot",
"Formula" : {
"Formula" : ".2 m^3/s"
},
"name" : "FMaxPlot"
},
{
"dyFormula" : {
"Formula" : "Tanks.accumulation"
},
"AutoRun" : "y",
"absTolFormula" : {
"Formula" : "1.0e-10 m^3"
},
"y0Formula" : {
"Formula" : "InitialV"
},
"DiagramX" : 195,
"nextTFormula" : {
"Formula" : "$.t + 0.1 s"
},
"DiagramY" : 100,
"relTolFormula" : {
"Formula" : "1.0e-5"
},
"Type" : "ODE Solver",
"recFormulas" : [
{
"Formula" : "$.t ' Time"
},
{
"Formula" : "Volumes 'Volumes"
},
{
"Formula" : "Tanks.Flowout 'Flowout"
}
],
"Notes" : "Integrates the tank accumulation rates to determine the total volumes.\n\nThe volumes and flows are recorded versus time.\n\nNote that since these are arrays, they will be recorded as rows in a matrix.",
"name" : "ODE",
"endTFormula" : {
"Formula" : "10 s"
}
},
{
"templateFormula" : {
"Formula" : "tank"
},
"DiagramY" : 0,
"Objects" : [
{
"diagramY" : 5.157479763031006,
"DiagramY" : 30,
"Objects" : [
{
"DiagramY" : 35,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Inlet flow rate",
"Formula" : {
"Formula" : "100 l/s"
},
"name" : "flowIn"
},
{
"DiagramY" : 55,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Total volume of accumulated liquid.",
"Formula" : {
"Formula" : "Volumes[1]"
},
"name" : "Volume"
},
{
"DiagramY" : 75,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Surface area of the liquid area.",
"Formula" : {
"Formula" : "1 m^2"
},
"name" : "area"
},
{
"DiagramY" : 95,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "height of weir\n",
"Formula" : {
"Formula" : "3 cm"
},
"name" : "hWeir"
},
{
"Formula" : {
"Formula" : "volume / area"
},
"Type" : "Expression",
"DiagramY" : 55,
"name" : "hTotal",
"Notes" : "Total height of liquid",
"DiagramX" : 130
},
{
"Formula" : {
"Formula" : "htotal - hweir"
},
"Type" : "Expression",
"DiagramY" : 95,
"name" : "hOverWeir",
"Notes" : "height over weir",
"DiagramX" : 130
},
{
"Formula" : {
"Formula" : "{if {gt hOverWeir, 0.0 \"m\"}, hOverWeir, 0.0\"m\"}"
},
"Type" : "Expression",
"DiagramY" : 95,
"name" : "h",
"Notes" : "height over weir, with check to ensure flow is zero when liquid is below weir.",
"DiagramX" : 200
},
{
"DiagramY" : 115,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "width of weir",
"Formula" : {
"Formula" : "50 cm"
},
"name" : "wWeir"
},
{
"DiagramY" : 135,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Discharge coefficient for weir.  Arbitrarily set to 1 for this fictional example.",
"Formula" : {
"Formula" : "1"
},
"name" : "cd"
},
{
"Formula" : {
"Formula" : "9.81 m/s^2"
},
"Type" : "Expression",
"DiagramY" : 150,
"name" : "g",
"Notes" : "gravitational constant\n",
"DiagramX" : 130
},
{
"isOutput" : "y",
"Type" : "Expression",
"DiagramY" : 35,
"name" : "accumulation",
"DiagramX" : 235,
"Formula" : {
"Formula" : "flowIn - flowOut"
}
},
{
"isOutput" : "y",
"DiagramY" : 135,
"DiagramX" : 235,
"Type" : "Expression",
"Notes" : "Flow over weir",
"Formula" : {
"Formula" : "(2/3) * cd * wWeir *(2*g)^0.5 * h^1.5"
},
"name" : "flowOut"
}
],
"DiagramX" : 30,
"Type" : "Model",
"Notes" : "The input values of inlet flow, volume, surface area and weir height and width are used along with an empirical constant to calculate and outlet flow.  This is subtracted from the inlet flow to determine the rate of accumulation.\n",
"diagramScale" : 1.494117856025696,
"diagramX" : -30,
"name" : "Tank1",
"HideInfo" : "n"
},
{
"diagramY" : 5.157479763031006,
"DiagramY" : 30,
"Objects" : [
{
"DiagramY" : 35,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Inlet flow rate",
"Formula" : {
"Formula" : "Tanks.tank1.flowout"
},
"name" : "flowIn"
},
{
"DiagramY" : 55,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Total volume of accumulated liquid.",
"Formula" : {
"Formula" : "Volumes[2]"
},
"name" : "Volume"
},
{
"DiagramY" : 75,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Surface area of the liquid area.",
"Formula" : {
"Formula" : "1 m^2"
},
"name" : "area"
},
{
"DiagramY" : 95,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "height of weir\n",
"Formula" : {
"Formula" : "3 cm"
},
"name" : "hWeir"
},
{
"Formula" : {
"Formula" : "volume / area"
},
"Type" : "Expression",
"DiagramY" : 55,
"name" : "hTotal",
"Notes" : "Total height of liquid",
"DiagramX" : 130
},
{
"Formula" : {
"Formula" : "htotal - hweir"
},
"Type" : "Expression",
"DiagramY" : 95,
"name" : "hOverWeir",
"Notes" : "height over weir",
"DiagramX" : 130
},
{
"Formula" : {
"Formula" : "{if {gt hOverWeir, 0.0 \"m\"}, hOverWeir, 0.0\"m\"}"
},
"Type" : "Expression",
"DiagramY" : 95,
"name" : "h",
"Notes" : "height over weir, with check to ensure flow is zero when liquid is below weir.",
"DiagramX" : 200
},
{
"DiagramY" : 115,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "width of weir",
"Formula" : {
"Formula" : "50 cm"
},
"name" : "wWeir"
},
{
"DiagramY" : 135,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Discharge coefficient for weir.  Arbitrarily set to 1 for this fictional example.",
"Formula" : {
"Formula" : "1"
},
"name" : "cd"
},
{
"Formula" : {
"Formula" : "9.81 m/s^2"
},
"Type" : "Expression",
"DiagramY" : 150,
"name" : "g",
"Notes" : "gravitational constant\n",
"DiagramX" : 130
},
{
"isOutput" : "y",
"Type" : "Expression",
"DiagramY" : 35,
"name" : "accumulation",
"DiagramX" : 235,
"Formula" : {
"Formula" : "flowIn - flowOut"
}
},
{
"isOutput" : "y",
"DiagramY" : 135,
"DiagramX" : 235,
"Type" : "Expression",
"Notes" : "Flow over weir",
"Formula" : {
"Formula" : "(2/3) * cd * wWeir *(2*g)^0.5 * h^1.5"
},
"name" : "flowOut"
}
],
"DiagramX" : 30,
"Type" : "Model",
"Notes" : "The input values of inlet flow, volume, surface area and weir height and width are used along with an empirical constant to calculate and outlet flow.  This is subtracted from the inlet flow to determine the rate of accumulation.\n",
"diagramScale" : 1.494117856025696,
"diagramX" : -30,
"name" : "Tank2",
"HideInfo" : "n"
},
{
"diagramY" : 5.157479763031006,
"DiagramY" : 30,
"Objects" : [
{
"DiagramY" : 35,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Inlet flow rate",
"Formula" : {
"Formula" : "Tanks.tank2.flowout"
},
"name" : "flowIn"
},
{
"DiagramY" : 55,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Total volume of accumulated liquid.",
"Formula" : {
"Formula" : "Volumes[3]"
},
"name" : "Volume"
},
{
"DiagramY" : 75,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Surface area of the liquid area.",
"Formula" : {
"Formula" : "1 m^2"
},
"name" : "area"
},
{
"DiagramY" : 95,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "height of weir\n",
"Formula" : {
"Formula" : "3 cm"
},
"name" : "hWeir"
},
{
"Formula" : {
"Formula" : "volume / area"
},
"Type" : "Expression",
"DiagramY" : 55,
"name" : "hTotal",
"Notes" : "Total height of liquid",
"DiagramX" : 130
},
{
"Formula" : {
"Formula" : "htotal - hweir"
},
"Type" : "Expression",
"DiagramY" : 95,
"name" : "hOverWeir",
"Notes" : "height over weir",
"DiagramX" : 130
},
{
"Formula" : {
"Formula" : "{if {gt hOverWeir, 0.0 \"m\"}, hOverWeir, 0.0\"m\"}"
},
"Type" : "Expression",
"DiagramY" : 95,
"name" : "h",
"Notes" : "height over weir, with check to ensure flow is zero when liquid is below weir.",
"DiagramX" : 200
},
{
"DiagramY" : 115,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "width of weir",
"Formula" : {
"Formula" : "50 cm"
},
"name" : "wWeir"
},
{
"DiagramY" : 135,
"DiagramX" : 40,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "Discharge coefficient for weir.  Arbitrarily set to 1 for this fictional example.",
"Formula" : {
"Formula" : "1"
},
"name" : "cd"
},
{
"Formula" : {
"Formula" : "9.81 m/s^2"
},
"Type" : "Expression",
"DiagramY" : 150,
"name" : "g",
"Notes" : "gravitational constant\n",
"DiagramX" : 130
},
{
"isOutput" : "y",
"Type" : "Expression",
"DiagramY" : 35,
"name" : "accumulation",
"DiagramX" : 235,
"Formula" : {
"Formula" : "flowIn - flowOut"
}
},
{
"isOutput" : "y",
"DiagramY" : 135,
"DiagramX" : 235,
"Type" : "Expression",
"Notes" : "Flow over weir",
"Formula" : {
"Formula" : "(2/3) * cd * wWeir *(2*g)^0.5 * h^1.5"
},
"name" : "flowOut"
}
],
"DiagramX" : 30,
"Type" : "Model",
"Notes" : "The input values of inlet flow, volume, surface area and weir height and width are used along with an empirical constant to calculate and outlet flow.  This is subtracted from the inlet flow to determine the rate of accumulation.\n",
"diagramScale" : 1.494117856025696,
"diagramX" : -30,
"name" : "Tank3",
"HideInfo" : "n"
}
],
"DiagramX" : 120,
"diagramScale" : 3,
"Type" : "Model Array",
"Notes" : "The array of tanks based on the \"Tank\" template.\n\nWhen you tap on the Tanks icon, two views will be pushed.\n\nThe first is where you tell it what model to use as the template and where you can rearrange the array or discard elements.  See the documentation for details\n\nThe second view is a data type table, in which each row represents the input and output expressions of a member of the array.\n\nInputs are at the left with a yellow background, while outputs are at the right with a blue background.\n\nTapping on an input cell will select it and show its formula in the formula field at the top of the view.\n\nTapping on the + cell at the bottom left of the table will add another copy of the template model to the array.\n\nNote that changing the template will not modify elements of the array that have already been added.\n\nThe order of the columns within the input and output areas is determined by their left to right position on the template diagram, with the leftmost on the diagram also being the leftmost column and the rightmost on the diagram being the rightmost column.\n\nTapping on a row header will present the information view for the model that row represents, from which you can change inputs, view outputs, rename the element or even view and modify its diagram.\n",
"diagramX" : 0,
"name" : "Tanks",
"diagramY" : 0
},
{
"DiagramNotes" : "y",
"DiagramY" : 140,
"X1" : {
"Y6" : {
"v" : "ode.flowout[0,3] 'Flow 3",
"lineType" : 0
},
"Y1" : {
"vmin" : "0 m^3",
"vmax" : "VMaxPlot",
"lineType" : 0,
"v" : "ODE.volumes[0,1] 'Volume 1"
},
"Y4" : {
"vmin" : "0 m^3/s",
"vmax" : "FMaxPlot",
"lineType" : 0,
"v" : "ode.flowout[0,1] 'Flow 1"
},
"Y2" : {
"v" : "ODE.volumes[0,2] 'Volume 2",
"lineType" : 0
},
"v" : "ODE.time 'Time",
"Y5" : {
"v" : "ode.flowout[0,2] 'Flow 2",
"lineType" : 0
},
"Y3" : {
"v" : "ODE.volumes[0,3] 'Volume 3",
"lineType" : 0
}
},
"DiagramX" : 195,
"Type" : "Graph",
"Notes" : "Plot of the volumes and flows for each tank versus time.\n",
"name" : "Plot"
},
{
"Formula" : {
"Formula" : "ODE.y"
},
"Type" : "Expression",
"DiagramY" : 55,
"name" : "Volumes",
"Notes" : "The integrated Y values of the ODE tool will be the tank volumes.",
"DiagramX" : 195
},
{
"Formula" : {
"Formula" : "\"Read my notes\""
},
"Type" : "Expression",
"DiagramY" : 0,
"name" : "Overview",
"Notes" : "A model array allows you to quickly duplicate a template model and view its inputs and outputs alongside the other members of the array.\n\nBefore the introduction of data tables to Math Minion, it was often used to store static data, such as lab results.\n\n\nWhile a data table is now a better option for static data, because a model array's constituent models can be complex and dynamic, it still has application in some problems.\n\nIn this artificial example, I created a \"Tank\" model which essentially calculates the flow over an outlet weir, given a certain volume of liquid.\n\nThis model serves as a template for the model array \"Tanks\" which contains three copies of \"Tank\". \n\nThe top tank has a fixed input flow, while the lower ones take their input flow from the tank above, thus creating a short series of cascading tanks.\n\nThe tank model also calculates its rate of accumulation of liquid from the difference between input and outlet flows.\n\nAn ordinary differential equation solver is used to integrate these rates to calculate the volume of liquid in each tank.\n\nFinally the results are plotted in a graph/table object.\n\nWhile there is only a small advantage to using such a short array, it does illustrate the principles and the advantage of being able to easily get the results as arrays.",
"DiagramX" : 35
}
],
"DiagramX" : 120,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 2.721568584442139,
"diagramX" : -25,
"name" : "ModelArray",
"HideInfo" : "n"
},
{
"diagramY" : 77.06051635742188,
"DiagramY" : 20,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -70,
"diagramY" : -107.2190170288086,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 115,
"DiagramX" : -5,
"Type" : "Expression",
"Notes" : "The interest rate.  Note the unit.",
"Formula" : {
"Formula" : "10 %/year"
},
"name" : "interest"
},
{
"DiagramNotes" : "y",
"DiagramY" : 170,
"DiagramX" : -5,
"Type" : "Expression",
"Notes" : "The same initial investment as in the monthly example.  There are no units for currency, so it is left dimensionless.\n",
"Formula" : {
"Formula" : "1000"
},
"name" : "initial"
},
{
"DiagramNotes" : "y",
"DiagramY" : 150,
"DiagramX" : 85,
"Type" : "Expression",
"Notes" : "The derivative is simply the current principal, represented by the \"ode\" output, times the interest rate.",
"Formula" : {
"Formula" : "interest * ode.y"
},
"name" : "dy"
},
{
"dyFormula" : {
"Formula" : "dy"
},
"AutoRun" : "y",
"absTolFormula" : {
"Formula" : "1.0e-10*{baseunit $.y}"
},
"y0Formula" : {
"Formula" : "initial"
},
"DiagramX" : 85,
"nextTFormula" : {
"Formula" : "$.t + 1 year"
},
"DiagramY" : 115,
"relTolFormula" : {
"Formula" : "1.0e-5"
},
"Type" : "ODE Solver",
"recFormulas" : [
{
"Formula" : "$.t 'Time"
},
{
"Formula" : "$.y 'Dollars"
}
],
"Notes" : "See the documentation (question mark button) for details on the ODE inputs.\n\nFor this example:\n\nY0 in this case it is the value of the “initial” expression and is a scalar without units.\n\ndY/dT is the value of the “dy” expression.\n\nIt has units compatible with y and t. Since t has time units and y is dimensionless, the unit for this must be 1/time.\n\n EndT - the solver always integrates from 0 to this value of t.  It has to have the same units a t, which in this case is time, specifically 20 years.\n\nNextT  uses the formula\n\n$.t + 1 year\n\nto calculate the next record time. Here it is just the previous value plus a constant.\n\nNote this only applies to the record time and is not an integration step size.\n\nThe tolerances are left at their default values.\n\nThe t and y values are recorded for each year and labeled as “Time” and “Dollars” respectively.\n",
"name" : "ode",
"endTFormula" : {
"Formula" : "20 year"
}
},
{
"DiagramNotes" : "y",
"DiagramY" : 115,
"X1" : {
"v" : "ode.Time 'Time",
"Y1" : {
"vmin" : "0",
"vmax" : "8000",
"lineType" : 0,
"v" : "ode.Dollars 'Dollars"
},
"unit" : "year"
},
"DiagramX" : 175,
"Type" : "Graph",
"Notes" : "You will notice that the final savings are higher than when the interest was only compounded monthly, but not hugely so.",
"name" : "Plot"
},
{
"DiagramNotes" : "y",
"DiagramY" : 170,
"DiagramX" : 175,
"Type" : "Expression",
"Notes" : "The plot values can be\nretrieved as a table value,\nif desired.",
"Formula" : {
"Formula" : "plot.table"
},
"name" : "Table"
},
{
"DiagramNotes" : "y",
"DiagramY" : 225,
"DiagramX" : -5,
"Type" : "Expression",
"Notes" : "Calculation of future value with monthly compounding.",
"Formula" : {
"Formula" : "initial *\n(1 + interest * 1 year / 12)^(1:20*12)"
},
"name" : "futureV"
},
{
"DiagramNotes" : "y",
"DiagramY" : 215,
"DiagramX" : 175,
"Type" : "Expression",
"Notes" : "The additional value after 20 years as compared to monthly compounding.",
"Formula" : {
"Formula" : "table.dollars[ -1 ] - futureV[ -1 ]"
},
"name" : "Increase"
}
],
"DiagramX" : 5,
"Type" : "Model",
"Notes" : "In the \"Matrices\" model, there was an example where the growth of an investment was calculated assuming interest that was compounded monthly.\n\nThis example uses the ODE solver to see what would happen if the interest were continuously compounded.",
"diagramScale" : 2.570370435714722,
"diagramX" : 15,
"name" : "Interest",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : -70,
"DiagramX" : -70,
"Type" : "Expression",
"Notes" : "The ODE solver is used to integrate a set of 1 or more ordinary differential equations (ODE).\n\nAn ODE is a function with a single independent variable and a derivative with respect to that variable.\n\nEssentially it determines y with respect to t from t=0 to some end point, where dy/dt is some function of y.\n\nArrays or tables y and dy/dt must be the same size and with compatible units (i.e units y must equal units dy times units t).\n\nMath Minion uses code from the Sundials suite of solvers developed at the Lawerence Livermore National Library in the US.\n\nIt uses a variant of the Adam Moulton method for non-stiff problems and Backwards Difference Formulas (BDF) when the problem is designated as stiff.\n",
"Formula" : {
"Formula" : "\"Just a note holder\""
},
"name" : "ODEs"
},
{
"DiagramNotes" : "y",
"DiagramY" : -70,
"Objects" : [
{
"dyFormula" : {
"Formula" : "dy"
},
"AutoRun" : "y",
"absTolFormula" : {
"Formula" : "1.0e-10*{baseunit $.y}"
},
"y0Formula" : {
"Formula" : "y0"
},
"DiagramNotes" : "y",
"DiagramX" : 105,
"nextTFormula" : {
"Formula" : "$.t + 0.1 s"
},
"DiagramY" : 10,
"relTolFormula" : {
"Formula" : "1.0e-5"
},
"Type" : "ODE Solver",
"Notes" : "               The integrator",
"recFormulas" : [
{
"Formula" : "$.t 'Time"
},
{
"Formula" : "Theta"
}
],
"name" : "ode",
"endTFormula" : {
"Formula" : "10 s"
}
},
{
"DiagramNotes" : "y",
"DiagramY" : 65,
"DiagramX" : 105,
"displayUnit" : "degree",
"Type" : "Expression",
"Notes" : "y1 is the position in radians, but displayed here in degrees.\n",
"Formula" : {
"Formula" : "ode.y[0, \"Angle\"]"
},
"name" : "theta"
},
{
"DiagramNotes" : "y",
"DiagramY" : 110,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "The angular velocity of the pendulum.\n\nThe first index of 0 indicates all the rows, which in this case is just one.",
"Formula" : {
"Formula" : "ode.y[0,\"Velocity\"]"
},
"name" : "v"
},
{
"DiagramNotes" : "y",
"DiagramY" : 150,
"DiagramX" : 5,
"Type" : "Expression",
"Notes" : "The pendulum mass.",
"Formula" : {
"Formula" : "1 kg"
},
"name" : "m"
},
{
"DiagramNotes" : "y",
"DiagramY" : 180,
"DiagramX" : 5,
"Type" : "Expression",
"Notes" : "The length of the pendulum arm.",
"Formula" : {
"Formula" : "1 m"
},
"name" : "l"
},
{
"DiagramNotes" : "y",
"DiagramY" : 215,
"DiagramX" : 5,
"Type" : "Expression",
"Notes" : "Approximate gravitational constant.",
"Formula" : {
"Formula" : "9.8 m/s^2"
},
"name" : "g"
},
{
"DiagramNotes" : "y",
"DiagramY" : 255,
"DiagramX" : 5,
"Type" : "Expression",
"Notes" : "A damping coefficient.  Set to 0 for undamped.",
"Formula" : {
"Formula" : ".8 kg-m/s"
},
"name" : "c"
},
{
"DiagramNotes" : "y",
"DiagramY" : 230,
"DiagramX" : 105,
"Type" : "Expression",
"Notes" : "The calculation of acceleration.",
"Formula" : {
"Formula" : "(g / l) * {sin theta} - (c /(l*m)) * v"
},
"name" : "a"
},
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"X1" : {
"v" : "ode.Time 'Time",
"Y1" : {
"vmin" : "0",
"vmax" : "360 degree",
"lineType" : 0,
"v" : "ode.theta 'Theta",
"unit" : "degree"
}
},
"DiagramX" : 195,
"Type" : "Graph",
"Notes" : "The pendulum position versus time, with the angle displayed in degrees rather than radians.",
"name" : "graph"
},
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : 5,
"Type" : "Expression",
"Notes" : "The initial state of the pendulum, the velocity in radians per second.\n\nNote an angle of 0 is straight up.\n\nA table value is used so the integrated values can have different unit types.",
"Formula" : {
"Formula" : "{table {cc \"Angle\", \"Velocity\"},\n\t45 degree, 0 \"1/s\"\n}"
},
"name" : "y0"
},
{
"DiagramNotes" : "y",
"DiagramY" : 175,
"DiagramX" : 105,
"Type" : "Expression",
"Notes" : "      The derivative of position\n      is velocity and the derivative\n      of velocity is acceleration.",
"Formula" : {
"Formula" : "{table {cc \"Velocity\", \"Acceleration\"},\n\tv, a\n}"
},
"name" : "dy"
},
{
"DiagramNotes" : "y",
"DiagramY" : 65,
"DiagramX" : 195,
"Type" : "Expression",
"Notes" : "The recorded values",
"Formula" : {
"Formula" : "ode.table"
},
"name" : "recorded"
}
],
"DiagramX" : 80,
"Type" : "Model",
"Notes" : "This model calculates the motion of a simple pendulum.\n\nIf the \"c\" expression is non-zero, it will be damped.",
"diagramScale" : 2.226086854934692,
"diagramX" : 5,
"name" : "Pendulum",
"diagramY" : -1.015625
},
{
"DiagramNotes" : "y",
"DiagramY" : 0,
"diagramY" : -5.634005546569824,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 80,
"DiagramX" : -50,
"Type" : "Expression",
"Notes" : "Gravitational acceleration on earth.",
"Formula" : {
"Formula" : "9.80665 m/s^2"
},
"name" : "g"
},
{
"dyFormula" : {
"Formula" : "dy"
},
"AutoRun" : "y",
"absTolFormula" : {
"Formula" : "1.0e-10 * {baseunit $.y}"
},
"y0Formula" : {
"Formula" : "y0"
},
"DiagramNotes" : "y",
"DiagramX" : 75,
"nextTFormula" : {
"Formula" : "$.t + .02 s"
},
"DiagramY" : 225,
"relTolFormula" : {
"Formula" : "1.0e-12"
},
"Type" : "ODE Solver",
"Notes" : "                Integrator",
"recFormulas" : [
{
"Formula" : "$.t 'Time"
},
{
"Formula" : "theta'theta"
}
],
"name" : "ode",
"endTFormula" : {
"Formula" : "10 s"
}
},
{
"DiagramNotes" : "y",
"DiagramY" : 75,
"DiagramX" : 80,
"Type" : "Expression",
"Notes" : "Acceleration of pendulum 1",
"Formula" : {
"Formula" : "(\n\tm[2] * l[1] * v[1]^2 *\n\t{sin dt} * {cos dt} + \n\tm[2] * g * {sin theta[2]} * \n\t{cos dt} + m[2] * l[2] * \n\tv[2]^2 * {sin dt} - \n\tmSum * g * {sin theta[1]}\n) /\n(\n\tmSum * l[1] - m[2]*l[2] *\n\t{cos dt}^2\n)"
},
"name" : "a1"
},
{
"DiagramNotes" : "y",
"DiagramY" : 145,
"DiagramX" : 75,
"Type" : "Expression",
"Notes" : "Acceleration of pendulum 2",
"Formula" : {
"Formula" : "(\n\t-m[2] * l[2] * v[2]^2 *\n\t{sin dt} * {cos dt} +\n\tmSum * (\n\t\tg* {sin theta[1]} *\n\t\t{cos dt} - l[1] *\n\t\tv[1]^2* {sin dt} - g *\n\t\t{sin theta[2]}\n\t)\n) /\n(\n\tmSum * l[2] - m[2]*l[2] *\n\t{cos dt}^2\n)"
},
"name" : "a2"
},
{
"DiagramNotes" : "y",
"DiagramY" : 30,
"X1" : {
"v" : "ode.Time 'Time",
"Y2" : {
"v" : "ode.theta[0,2] 'Theta2",
"lineType" : 0
},
"Y1" : {
"v" : "ode.theta[0,1] 'Theta1",
"lineType" : 0
}
},
"DiagramX" : 185,
"Type" : "Graph",
"Notes" : "          Angle vs time",
"name" : "graph"
},
{
"DiagramNotes" : "y",
"DiagramY" : 120,
"DiagramX" : -50,
"Type" : "Expression",
"Notes" : "      Difference in angles",
"Formula" : {
"Formula" : "theta[2] - theta[1]"
},
"name" : "dt"
},
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : -50,
"Type" : "Expression",
"Notes" : "      Pendulum mass",
"Formula" : {
"Formula" : "{cc 1 kg, 1 kg}"
},
"name" : "m"
},
{
"DiagramNotes" : "y",
"DiagramY" : 175,
"DiagramX" : 80,
"Type" : "Expression",
"Notes" : "X coordinate of pendulum 2",
"Formula" : {
"Formula" : "l[1] * {sin ode.theta[0,1]} + \nl[2] * {sin\n\tode.theta[0,1] + ode.theta[0,2]\n}"
},
"name" : "x2"
},
{
"DiagramNotes" : "y",
"DiagramY" : 35,
"DiagramX" : 75,
"Type" : "Expression",
"Notes" : "Y coordinate of pendulum 2.",
"Formula" : {
"Formula" : "-l[1] * {cos ode.theta[0,1]} -\n\tl[2] * {cos\n\tode.theta[0,1] + ode.theta[0,2]\n}"
},
"name" : "y2"
},
{
"DiagramNotes" : "y",
"DiagramY" : 65,
"X1" : {
"vmin" : "-l[1] - l[2]",
"vmax" : "l[1] + l[2]",
"Y1" : {
"vmin" : "-l[1] - l[2]",
"vmax" : "l[1] + l[2]",
"lineType" : 0,
"v" : "y2"
},
"v" : "x2",
"unit" : "m"
},
"DiagramX" : 185,
"Type" : "Graph",
"Notes" : "A plot of the x/y coordinates of pendulum 2 (the outer pendulum)",
"name" : "xy2graph"
},
{
"DiagramNotes" : "y",
"DiagramY" : 190,
"DiagramX" : -50,
"Type" : "Data Table",
"Columns" : [
{
"displayUnit" : "radian",
"unitDimensions" : "0 0 0 0 0 0 0",
"defaultValue" : "0 radian",
"name" : "Angle",
"nValues" : [
0.7853981633974483,
1.570796326794897
]
},
{
"defaultValue" : "0 radian/s",
"unitDimensions" : "0 0 -1 0 0 0 0",
"name" : "Velocity",
"nValues" : [
3,
4
]
}
],
"Notes" : "Initial states of the pendulums",
"name" : "y0"
},
{
"DiagramNotes" : "y",
"DiagramY" : 195,
"DiagramX" : 185,
"Type" : "Expression",
"Notes" : "Derivative table",
"Formula" : {
"Formula" : "{table {cc \"Velocity\", \"Acceleration\"},\n\tv, a\n}"
},
"name" : "dy"
},
{
"DiagramNotes" : "y",
"DiagramY" : 225,
"tableUnits" : {
"1" : "radian"
},
"DiagramX" : -50,
"Type" : "Expression",
"Notes" : "Alternate formulation of y0 using table function",
"Formula" : {
"Formula" : "{table {cc \"Angle\", \"Velocity\"},\n\t{cc 0.25, 0.5} * {pi},\n\t{cc 3 \"1/s\", 4 \"1/s\"}\n}"
},
"name" : "y02"
},
{
"DiagramNotes" : "y",
"DiagramY" : 155,
"DiagramX" : -50,
"Type" : "Expression",
"Notes" : "     Angle of pendulums",
"Formula" : {
"Formula" : "ode.y[0,\"angle\"]"
},
"name" : "theta"
},
{
"DiagramNotes" : "y",
"DiagramY" : 155,
"DiagramX" : 185,
"Type" : "Expression",
"Notes" : "Angular velocity",
"Formula" : {
"Formula" : "ode.y[0,\"velocity\"]"
},
"name" : "v"
},
{
"DiagramNotes" : "y",
"DiagramY" : 115,
"DiagramX" : 185,
"Type" : "Expression",
"Notes" : "          acceleration",
"Formula" : {
"Formula" : "{cc a1, a2}"
},
"name" : "a"
},
{
"DiagramNotes" : "y",
"DiagramY" : 110,
"DiagramX" : 75,
"Type" : "Expression",
"Notes" : "       Total mass",
"Formula" : {
"Formula" : "{sum m}"
},
"name" : "mSum"
},
{
"DiagramNotes" : "y",
"DiagramY" : 50,
"DiagramX" : -50,
"Type" : "Expression",
"Notes" : "Length of pendulum arms",
"Formula" : {
"Formula" : "{cc 1 m, 1 m}"
},
"name" : "l"
}
],
"DiagramX" : 85,
"Type" : "Model",
"Notes" : "This is an extension of the pendulum problem to a double pendulum, that is a pendulum on the end of another pendulum.\n\nThe equations came from freddie.witherden.org/tools/doublependulum/report.pdf.\n\nNote that the relative tolerance on the ODE solver has been set quite small since this is a rather chaotic system.\n\nWhile more complex than the single version, the concepts are all the same and so the included notes are minimal.",
"diagramScale" : 2.135384559631348,
"diagramX" : 60,
"name" : "DblPend",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"Objects" : [
{
"dyFormula" : {
"Formula" : "dy"
},
"Stiff" : "y",
"AutoRun" : "y",
"absTolFormula" : {
"Formula" : "1.0e-14"
},
"y0Formula" : {
"Formula" : "y0"
},
"DiagramX" : -45,
"nextTFormula" : {
"Formula" : "{if {eq $.t 0}, 1e-5, $.t * 2}"
},
"DiagramY" : 105,
"relTolFormula" : {
"Formula" : "1.0e-5"
},
"Type" : "ODE Solver",
"recFormulas" : [
{
"Formula" : "$.t 'Time"
},
{
"Formula" : "$.y[1] 'Y1"
},
{
"Formula" : "$.y[2] ' Y2"
},
{
"Formula" : "$.y[3] ' Y3"
}
],
"Notes" : "A few things to note about this ODE solver:\n\n- the \"Stiff\" switch is turned on.\n\n- the end time is very large.\n\n- if the recorded time intervals were constant, you would either miss what happens very quickly at the beginning of the run or have way to many points. Therefore NextT is calculated by:\n\n{if {eq $.t 0}, 1e-5, $.t * 2}\n\nWhere the first value, when t = 0, is set to a small number and each succeeding interval is twice the previous one.\n\n- the absolute tolerance has been reduced from the default because some of the values will be very small.",
"name" : "ode",
"endTFormula" : {
"Formula" : "4e10"
}
},
{
"DiagramNotes" : "y",
"DiagramY" : 135,
"DiagramX" : -45,
"Type" : "Expression",
"Notes" : "The y values are simply the ode y values.  This expression isn't necessary, but makes the equations in the dy matrix a bit cleaner.",
"Formula" : {
"Formula" : "ode.y"
},
"name" : "y"
},
{
"CellInputs" : {
"2_1" : "-{cell -1, 0} - {cell 1, 0}",
"3_1" : "3.0e7*y[2]^2",
"1_1" : "-0.04*y[1] + 1.0e4*y[2]*y[3]"
},
"DiagramNotes" : "y",
"DiagramY" : 195,
"DiagramX" : -45,
"Type" : "Matrix",
"Notes" : "The rate equations are defined.\n\ndy1 = -0.04*y1 + 10^4*y2*y3\ndy2 = dy1 - dy3\ndy3 = 3*10^7 * y2\n\nNote the use of the cell function to calculate the derivative for component 2, which is defined as dy1 - dy3.",
"columnCount" : "1",
"name" : "dy",
"rowCount" : "{nrows y0}"
},
{
"DiagramNotes" : "y",
"DiagramY" : 200,
"X1" : {
"vmin" : "-5",
"vmax" : "7",
"Y2" : {
"vmin" : "0",
"vmax" : "5.e-5",
"lineType" : 0,
"v" : "ode.y2[range] 'Y2"
},
"Y3" : {
"vmin" : "0",
"vmax" : "1",
"lineType" : 0,
"v" : "ode.y3[range] ' Y3"
},
"Y1" : {
"vmin" : "0",
"vmax" : "1",
"lineType" : 0,
"v" : "ode.y1[range] ' Y1"
},
"v" : "logT"
},
"DiagramX" : 55,
"Type" : "Graph",
"Notes" : "A plot and table of the reaction progress.  Plotting against log t is necessary to capture the fast moving events that occur early.  Also y2 never exists in quantity, so its maximum is set quite low.",
"name" : "graph"
},
{
"DiagramNotes" : "y",
"DiagramY" : 150,
"DiagramX" : 55,
"Type" : "Expression",
"Notes" : "The log (base 10) of the recorded values of t (skipping the first one).",
"Formula" : {
"Formula" : "{log ode.time[range]}"
},
"name" : "logT"
},
{
"DiagramNotes" : "y",
"DiagramY" : 85,
"DiagramX" : 55,
"Type" : "Expression",
"Notes" : "A plot versus log t will be more useful than one versus t, but the first value of t is 0 and should be skipped.  This expression just calculates that range for use in other expressions.",
"Formula" : {
"Formula" : "2:{nrows ode.r1}"
},
"name" : "range"
},
{
"DiagramNotes" : "y",
"DiagramY" : 50,
"DiagramX" : -45,
"Type" : "Expression",
"Notes" : "The initial conditions  are the initial composition of the material and consists of pure compound 1.\n",
"Formula" : {
"Formula" : "{cc 1, 0, 0}"
},
"name" : "y0"
},
{
"DiagramNotes" : "y",
"DiagramY" : 50,
"DiagramX" : 55,
"Type" : "Expression",
"Notes" : "The recorded values",
"Formula" : {
"Formula" : "ode.table"
},
"name" : "recorded"
}
],
"DiagramX" : 5,
"Type" : "Model",
"Notes" : "This example represents the kinetics of a 3 species chemical reaction.\n\nThe large difference in the rates of the reactions make this problem what is termed stiff.  Using integration time steps small enough to track the very sensitive components would be very inefficient given the long overall times required for the slower components.\n\nSpecial algorithms have been developed for these types of problems and in the case of Math Minion a Backward Difference Formula approach is used when the \"Stiff\" switch on the information view of the ODE solver is turned on.\n",
"diagramScale" : 3,
"diagramX" : 55,
"name" : "Roberts",
"diagramY" : -43.33333206176758
}
],
"DiagramX" : 120,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 2.832653045654297,
"diagramX" : 80,
"name" : "ODEs",
"HideInfo" : "n"
},
{
"diagramY" : 7.348703170028818,
"DiagramY" : -10,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 0,
"DiagramX" : 185,
"Type" : "Expression",
"Notes" : "Retrieve the calculated outlet expression for area from the circle model.\n",
"Formula" : {
"Formula" : "circle.area"
},
"name" : "Area"
},
{
"DiagramNotes" : "y",
"DiagramY" : 135,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "A diameter",
"Formula" : {
"Formula" : "2 m"
},
"name" : "d"
},
{
"DiagramNotes" : "y",
"DiagramY" : 0,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "An expression in a model can communicate with the parent model by having its input switch/checkbox turned on.\n\nIts formula will then be evaluated in terms of the parent tools, but the calculated value will be available to its model.\n\nSimilarly, an expression designated as output, will be available to the parent model.\n\nIn this case circle.area retrieves the value of the “area” expression in the circle model.\n",
"Formula" : {
"Formula" : "\"Just a note holder\""
},
"name" : "Model"
},
{
"DiagramNotes" : "y",
"DiagramY" : 45,
"DiagramX" : 185,
"Type" : "Expression",
"Notes" : "Also retrieved from a model output.",
"Formula" : {
"Formula" : "circle.circumference"
},
"name" : "circumference"
},
{
"DiagramNotes" : "y",
"DiagramY" : 0,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 45,
"DiagramX" : 20,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "By turning on the input switch, the variables used in\nthe expression formula refer\nto those of the parent.",
"Formula" : {
"Formula" : "d / 2"
},
"name" : "radius"
},
{
"isOutput" : "y",
"DiagramY" : 140,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "",
"Formula" : {
"Formula" : "2*radius*{pi}"
},
"name" : "circumference"
},
{
"DiagramNotes" : "y",
"DiagramY" : 45,
"isOutput" : "y",
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "Turning on the output switch allows the parent to access the result of this expression using normal dot notation as in:\n\ncircle.area\n\nAlso note that the circumference expression does not have a note, so its name is not italicized.",
"Formula" : {
"Formula" : "{pi}*radius^2"
},
"name" : "area"
},
{
"DiagramNotes" : "y",
"DiagramY" : 170,
"X1" : {
"v" : "cart.x 'X1",
"Y1" : {
"v" : "cart.y 'Y1",
"lineType" : 0
}
},
"DiagramX" : 110,
"Type" : "Graph",
"Notes" : "Plot the circle from cart as\nwell as one half the size.",
"X2" : {
"v" : "$.x1/2 'X2",
"Y1" : {
"v" : "$.y1/2 'Y2",
"lineType" : 0
}
},
"name" : "xyplot"
},
{
"DiagramNotes" : "y",
"DiagramY" : 195,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "Calculate the x-y coordinates for a circle with a radius equal to radius[1,1].\n\nIn this case the radius is a scalar anyway, but it could have been defined as an array or matrix, in which case the [1,1] would ensure just the first element was used.",
"Formula" : {
"Formula" : "{cart radius[1,1], 1:60 / 30  * {pi}}"
},
"name" : "cart"
},
{
"DiagramNotes" : "y",
"DiagramY" : 210,
"isOutput" : "y",
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "An output expression, with a reference to the plot.\n\nThis plot isn’t useful, but just done to demonstrate the use of a reference in an output expression.",
"Formula" : {
"Formula" : "xyplot"
},
"name" : "plot"
},
{
"DiagramNotes" : "y",
"DiagramY" : 95,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "The order that the inputs and outputs appear in the model info view is determined by their icons'  positions on the diagram.\n\nThose farthest left are first, with ties being broken by the ones closer to the top being first.  However the info view won't change immediately when icons are moved ,but will when redisplayed.",
"Formula" : {},
"name" : "Order"
}
],
"DiagramX" : 105,
"Type" : "Model",
"Notes" : "A model which calculates the circumference and area of a circle, given the radius.\n\nIts expressions have the input and output switches set so they are exposed to the parent model.\n\nModels which have input expressions do not immediately open in their diagram, but rather present a view where these variables can be set and the outputs examined.\n\nTap on output rows to examine their values.\n\nThe plot output is just an example of how a model output can be a reference value.\n\nTap the diagram button on that view to see the diagram.",
"diagramScale" : 2.932075500488281,
"diagramX" : -10,
"name" : "circle",
"diagramY" : -38.17889404296875
}
],
"DiagramX" : 120,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 2.72156862745098,
"diagramX" : -10,
"name" : "Models",
"HideInfo" : "n"
}
],
"DiagramX" : 145,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : 16.66666666666667,
"diagramX" : -35,
"name" : "Tools"
},
{
"diagramY" : 3.178438663482666,
"DiagramY" : 20,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 5,
"DiagramX" : -65,
"Type" : "Expression",
"Notes" : "The Math Minion unit conversion system is deeply integrated with the calculation engine, which permits dimensional analysis on all calculations.\n\nPlease take time to read about it in the documentation.\n\nTo do so, tap the question mark icon on the top toolbar, then tap the Contents button and select Conversion Units.",
"Formula" : {
"Formula" : "32.174 ft/s^2"
},
"name" : "Units"
},
{
"DiagramNotes" : "y",
"DiagramY" : 125,
"DiagramX" : -70,
"Type" : "Expression",
"Notes" : "An expression with a length unit.",
"Formula" : {
"Formula" : "20 km"
},
"name" : "Length"
},
{
"DiagramNotes" : "y",
"DiagramY" : 160,
"DiagramX" : -70,
"Type" : "Expression",
"Notes" : "An expression with a time unit of hours",
"Formula" : {
"Formula" : "0.25 h"
},
"name" : "Hours"
},
{
"DiagramNotes" : "y",
"DiagramY" : 195,
"DiagramX" : -70,
"Type" : "Expression",
"Notes" : "A time value with a unit of minutes.",
"Formula" : {
"Formula" : "30 min"
},
"name" : "Minutes"
},
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : 35,
"Type" : "Expression",
"Notes" : "When a length is divided by time, the resulting value will be a velocity.",
"Formula" : {
"Formula" : "Length / Hours"
},
"name" : "Velocity"
},
{
"DiagramNotes" : "y",
"DiagramY" : 55,
"DiagramX" : 35,
"Type" : "Expression",
"Notes" : "You can't add values with different fundamental properties, but adding values with different units of the same type is always allowed.",
"Formula" : {
"Formula" : "Hours + Minutes"
},
"name" : "AddTimes"
},
{
"DiagramNotes" : "y",
"DiagramY" : 110,
"DiagramX" : 35,
"displayUnit" : "Fraction",
"Type" : "Expression",
"Notes" : "The default dimensionless unit for all the built-in unit sets is fraction.  Despite the name, these values are not constrained to be from 0 to 1 or 0 to 100.\n\nAs used in Math Minion, \"Fraction\" is just a generic description for  values which have powers of 0 for all of the fundamental SI properties.\n\nIn this expression, dividing the minutes value by the hours one causes the units to cancel out and the result is a \"Fraction\" value of 2.",
"Formula" : {
"Formula" : "Minutes / Hours"
},
"name" : "Fraction"
},
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : 115,
"displayUnit" : "mph",
"Type" : "Expression",
"Notes" : "This is the velocity value displayed in miles per hour.  The display unit is selected by tapping the info button beside the displayed unit name.\n\nIf a specific unit has been chosen, the unit type and name will appear in blue, rather than in black text if the current unit system default is being used.\n",
"Formula" : {
"Formula" : "Velocity"
},
"name" : "mph"
},
{
"DiagramNotes" : "y",
"DiagramY" : 110,
"tableUnits" : {
"1" : "h"
},
"DiagramX" : 115,
"Type" : "Expression",
"Notes" : "If the expression result is a table value, you can tap on the column name cell to enable selecting the display unit for that column.\n\nIf this case the default time unit of seconds has been replaced with hours in the first column, while the velocity unit has been left as the default.\n\nIf you tap on the column headers, you will see the Times column will list the unit in blue to indicate it has been specified.\n",
"Formula" : {
"Formula" : "{table {cc \"Times\", \"Velocity\"}\n\tAddTimes,\n\tVelocity\n}"
},
"name" : "TableColumns"
}
],
"DiagramX" : 145,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 2.445454597473145,
"diagramX" : 80,
"name" : "Units",
"HideInfo" : "n"
},
{
"DiagramY" : 70,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 270,
"DiagramX" : 115,
"displayUnit" : "s",
"Type" : "Expression",
"Notes" : "Minimum time to ping geosynchronous satellite if you are right under it on the equator",
"Formula" : {
"Formula" : "2 * 35786 \"km\"/ 1\"lightc\""
},
"name" : "geoping"
},
{
"DiagramNotes" : "y",
"DiagramY" : 315,
"diagramY" : -88.33333587646484,
"Objects" : [
{
"CellInputs" : {
"1_100" : "1",
"0_0" : "{if {if {eq {row} 1}, {eq {col}, $.ncol},0},\n  1,\n  {if {row}-1,\n    {if {lt {col}, $.ncol},\n      {cell -1,1} + {cell -1, 0},\n      {cell -1, 0}},\n    0\n  }\n}"
},
"DiagramNotes" : "y",
"DiagramY" : 95,
"DiagramX" : 100,
"Type" : "Matrix",
"Notes" : "Constructs a Pascal triangle.  Since it has to fit in a table it's shape is skewed into a right angled triangle.",
"columnCount" : "n",
"name" : "pascal",
"rowCount" : "n"
},
{
"isInput" : "y",
"Type" : "Expression",
"DiagramY" : 95,
"name" : "n",
"DiagramX" : 20,
"Formula" : {
"Formula" : " 20"
}
},
{
"isOutput" : "y",
"Type" : "Expression",
"DiagramY" : 95,
"name" : "triangle",
"DiagramX" : 185,
"Formula" : {
"Formula" : "pascal"
}
}
],
"DiagramX" : 35,
"Type" : "Model",
"Notes" : "Calculates a Pascal triangle.",
"diagramScale" : 3,
"diagramX" : -10,
"name" : "pascal",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 315,
"DiagramX" : 115,
"Type" : "Expression",
"Notes" : "Hmmm, matrices aren't triangular, so this triangle is skewed to the right, with the top element being in the rightmost  column of the top row.",
"Formula" : {
"Formula" : "pascal.triangle"
},
"name" : "triangle"
},
{
"DiagramNotes" : "y",
"DiagramY" : 270,
"DiagramX" : 35,
"displayUnit" : "megatontnt",
"Type" : "Expression",
"Notes" : "Energy from total annihilation of mass.  I.e. E = mc^2",
"Formula" : {
"Formula" : "85 \"kg\" * 1 \"lightc\"^2"
},
"name" : "e_mc2"
},
{
"DiagramNotes" : "y",
"DiagramY" : 225,
"diagramY" : -23.33333396911621,
"Objects" : [
{
"DiagramY" : 40,
"displayUnit" : "mile/gal",
"DiagramX" : -50,
"isInput" : "y",
"Type" : "Expression",
"Formula" : {
"Formula" : "15 mile/gal"
},
"name" : "mpg"
},
{
"isOutput" : "y",
"DiagramY" : 30,
"displayUnit" : "lp100km",
"DiagramX" : 40,
"Type" : "Expression",
"Formula" : {
"Formula" : "1/mpg"
},
"name" : "lp100km"
},
{
"isOutput" : "y",
"DiagramY" : 50,
"displayUnit" : "km/l",
"DiagramX" : 40,
"Type" : "Expression",
"Formula" : {
"Formula" : "mpg"
},
"name" : "kmpl"
}
],
"DiagramX" : 40,
"Type" : "Model",
"Notes" : "Converts miles per US gallon to liters per 100 km.",
"diagramScale" : 3,
"diagramX" : 60,
"name" : "mpg_to_lp100km",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 225,
"diagramY" : 8.222250938415527,
"Objects" : [
{
"DiagramY" : -1.555583953857422,
"displayUnit" : "lp100km",
"DiagramX" : -48.33332824707031,
"isInput" : "y",
"Type" : "Expression",
"Formula" : {
"Formula" : "7 lp100km"
},
"name" : "lp100km"
},
{
"isOutput" : "y",
"DiagramY" : 25,
"displayUnit" : "mile/gal",
"DiagramX" : -50,
"Type" : "Expression",
"Formula" : {
"Formula" : "1/lp100km"
},
"name" : "mpg"
},
{
"isOutput" : "y",
"DiagramY" : 50,
"displayUnit" : "km/l",
"DiagramX" : -50,
"Type" : "Expression",
"Formula" : {
"Formula" : "mpg"
},
"name" : "kmpl"
}
],
"DiagramX" : 120,
"Type" : "Model",
"Notes" : "Converts liters per 100 km into miles per US gallon.",
"diagramScale" : 3,
"diagramX" : 58.33332824707031,
"name" : "lp100km_to_mpg",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 170,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 45,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "h - Planck constant",
"Formula" : {
"Formula" : "6.62606957e-34 J-s"
},
"name" : "Planck"
},
{
"DiagramNotes" : "y",
"DiagramY" : 80,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "G - Newtonian constant of gravitation.",
"Formula" : {
"Formula" : "6.67384E-11 m^3/kg-s^2"
},
"name" : "GNewton"
},
{
"DiagramNotes" : "y",
"DiagramY" : 120,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "R - ideal gas constant.",
"Formula" : {
"Formula" : "8.3144621 J/K-mol"
},
"name" : "GasConstant"
},
{
"DiagramNotes" : "y",
"DiagramY" : 155,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "Na- Avogadro's number - the number of molecules in a mole",
"Formula" : {
"Formula" : "6.02214129e23 1/mol"
},
"name" : "Avogadro"
},
{
"DiagramNotes" : "y",
"DiagramY" : 190,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "k - Boltzmann's constant",
"Formula" : {
"Formula" : "1.3806488e-23 j/k"
},
"name" : "Boltzmann"
},
{
"DiagramNotes" : "y",
"DiagramY" : 45,
"DiagramX" : 90,
"Type" : "Expression",
"Notes" : "mu - Atomic mass unit",
"Formula" : {
"Formula" : "1.660538921e-27 kg"
},
"name" : "AtomicMassUnit"
},
{
"DiagramNotes" : "y",
"DiagramY" : 80,
"DiagramX" : 90,
"Type" : "Expression",
"Notes" : "me - electron mass",
"Formula" : {
"Formula" : "9.109382991e-31 kg"
},
"name" : "ElectronMass"
},
{
"DiagramNotes" : "y",
"DiagramY" : 120,
"DiagramX" : 90,
"Type" : "Expression",
"Notes" : "mp - proton mass",
"Formula" : {
"Formula" : "1.672621777e-27 kg"
},
"name" : "ProtonMass"
},
{
"DiagramNotes" : "y",
"DiagramY" : 155,
"DiagramX" : 90,
"Type" : "Expression",
"Notes" : "e - elementary charge",
"Formula" : {
"Formula" : "1.602176565e-19 C"
},
"name" : "ElementaryCharge"
},
{
"DiagramNotes" : "y",
"DiagramY" : 190,
"DiagramX" : 90,
"Type" : "Expression",
"Notes" : "eV - electron volt",
"Formula" : {
"Formula" : "1.602176565e-19 j"
},
"name" : "ElectronVolt"
}
],
"DiagramX" : 40,
"Type" : "Model",
"Notes" : "Miscellaneous physical constants.\n\nHopefully all correct, but user beware!",
"diagramScale" : 3,
"diagramX" : -5,
"name" : "Constants",
"diagramY" : -38.33333206176758
}
],
"DiagramX" : 145,
"diagramScale" : 3,
"Type" : "Model",
"Notes" : "",
"diagramX" : -25,
"name" : "tidbits",
"diagramY" : -163.3333282470703
},
{
"DiagramY" : -20,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -65,
"DiagramX" : 265,
"Type" : "Expression",
"Notes" : "An expression containing a constant with a unit of\nlength.\n",
"Formula" : {
"Formula" : "3 m"
},
"name" : "a"
},
{
"DiagramNotes" : "y",
"DiagramY" : -20,
"DiagramX" : 265,
"Type" : "Expression",
"Notes" : "Another length constant.",
"Formula" : {
"Formula" : "43 in"
},
"name" : "b"
},
{
"DiagramNotes" : "y",
"DiagramY" : -40,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 45,
"DiagramX" : 20,
"isInput" : "y",
"Type" : "Expression",
"Notes" : "By turning on the input switch in this expression’s info view, the variables used in\nthe expression formula refer\nto those of the parent.",
"Formula" : {
"Formula" : "diameters / 2"
},
"name" : "radius"
},
{
"isOutput" : "y",
"DiagramY" : 195,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "",
"Formula" : {
"Formula" : "2*radius*{pi}"
},
"name" : "circumference"
},
{
"DiagramNotes" : "y",
"DiagramY" : 100,
"isOutput" : "y",
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "Turning on the output switch allows the parent to access the result of this expression using normal dot notation as in:\n\ncircle.area\n\nAlso note that the circumference expression does not have a note, so its name is not italicized.",
"Formula" : {
"Formula" : "{pi}*radius^2"
},
"name" : "area"
},
{
"DiagramNotes" : "y",
"DiagramY" : 95,
"X1" : {
"v" : "cart.x 'X1",
"Y1" : {
"v" : "cart.y 'Y1",
"lineType" : 0
}
},
"DiagramX" : 115,
"Type" : "Graph",
"Notes" : "Plot the circle from cart as\nwell as one half the size.",
"X2" : {
"v" : "$.x1/2 'X2",
"Y1" : {
"v" : "$.y1/2 'Y2",
"lineType" : 0
}
},
"name" : "xyplot"
},
{
"DiagramNotes" : "y",
"DiagramY" : 45,
"DiagramX" : 115,
"Type" : "Expression",
"Notes" : "Calculate the x-y coordinates for a circle with a radius equal to radius[1,1]",
"Formula" : {
"Formula" : "{cart radius[1,1], 1:60 / 30  * {pi}}"
},
"name" : "cart"
},
{
"DiagramNotes" : "y",
"DiagramY" : 145,
"isOutput" : "y",
"DiagramX" : 115,
"Type" : "Expression",
"Notes" : "An output expression, with a reference to the plot.\n\nThis plot isn’t useful, but just done to demonstrate the use of a reference in an output expression.",
"Formula" : {
"Formula" : "xyplot"
},
"name" : "plot"
}
],
"DiagramX" : 345,
"Type" : "Model",
"Notes" : "A model which calculates the circumference and area of a circle, given the radius.\n\nIts expressions have the input and output switches set so they are exposed to the parent model.\n\nModels which have input expressions do not immediately open in their diagram, but rather present a view where these variables can be set and the outputs examined.\n\nTap on output rows to examine their values.\n\nThe plot output is just an example of how a model output can be a reference value.\n\nTap the diagram button on this model’s info view to see the diagram.",
"diagramScale" : 2.825454473495483,
"diagramX" : 0,
"name" : "circle",
"diagramY" : -37.92149353027344
},
{
"DiagramNotes" : "y",
"DiagramY" : -40,
"DiagramX" : 420,
"Type" : "Expression",
"Notes" : "Retrieve the calculated outlet expression for area from the circle model.\n\nSince the input was a matrix, the result is also a matrix, with elements determined by applying the calculation to each element of the input matrix.",
"Formula" : {
"Formula" : "circle.area"
},
"name" : "area"
},
{
"unit" : "m",
"DiagramNotes" : "y",
"DiagramY" : 15,
"CellInputs" : {
"2_1" : "b",
"0_2" : "a+b",
"0_0" : "1 m",
"1_1" : "a"
},
"DiagramX" : 265,
"Type" : "Matrix",
"Notes" : "A 2x2 matrix with some values.\n\nTap on a cell or header to see its formula.\n\nThe value for a cell is determined by first checking to see if it has a formula itself and if not then its corresponding row header, column header and finally the star header in that order.",
"columnCount" : "2",
"name" : "diameters",
"rowCount" : "2"
}
],
"DiagramX" : 145,
"diagramScale" : 2.832653045654297,
"Type" : "Model",
"Notes" : "",
"diagramX" : -255,
"name" : "A_Simple_Calc",
"diagramY" : 72.06051635742188
},
{
"diagramY" : 76.66666412353516,
"DiagramY" : 0,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -70,
"DiagramX" : -75,
"Type" : "Expression",
"Notes" : "At the heart of Math Minion calculations are the formulas that express the relationships between various objects.\n\nDon’t let the term scare you, these can be as simple as a scalar constant, or 2 + 2.\n\nHowever if the need arises, they can be complicated expressions involving functions and conditions.\n",
"Formula" : {
"Formula" : "' Just a not holder"
},
"name" : "Formulas"
},
{
"DiagramY" : -50,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 50,
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "A simple scalar constant, without units",
"Formula" : {
"Formula" : "1.5"
},
"name" : "scalar"
},
{
"DiagramNotes" : "y",
"DiagramY" : 85,
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "Shows the use of exponential input",
"Formula" : {
"Formula" : "-4.23e-5"
},
"name" : "small"
},
{
"DiagramNotes" : "y",
"DiagramY" : 50,
"DiagramX" : 135,
"Type" : "Expression",
"Notes" : "The binary operators are:\n\n+ Add\n- Minus\n* Multiply\n/ Divide\n^ Power\n% Modulus\n: Range (see the \"Range\" object)\n\nThe precedence is (from higher to lower):\n\n:\n^\n* / %\n+ -\n\nParenthesis can be used as required to specify the calculation order.\n\nSee “Arrays” in the parent model for examples of how these work with arrays and matrices.",
"Formula" : {
"Formula" : "(scalar * 2 + 1)^(2-small)"
},
"name" : "operators"
}
],
"DiagramX" : -5,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : -43.33333206176758,
"diagramX" : -35,
"name" : "Operators",
"HideInfo" : "n"
},
{
"DiagramY" : -30,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"DiagramX" : 40,
"Type" : "Expression",
"Notes" : "A simple scalar constant, without units",
"Formula" : {
"Formula" : "1.5"
},
"name" : "scalar"
},
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"DiagramX" : 115,
"Type" : "Expression",
"Notes" : "A function call in Math Minion consists of an opening curly brace \"{\" immediately followed by the function name, followed by a space and a comma separated list of parameters as appropriate and finally a closing curly brace \"}\".\n\nIn this case the natural logarithm of the value of the \"scalar\" object is calculated.\n\nWhen used with arrays and matrices, the function is applied to each element of the parameter(s) in turn, except for some matrix specific functions, like \"dot\", \"invert\", \"transpose\", etc.\n\nWhen entering a formula, use the \"{f}\" keyboard button on iOS or the “Functions” button on a Mac to see a list of available functions.\n\nSelecting a function from the list will reveal a short description of that function and clicking the insert button with the function selected, will insert a template call into the formula.",
"Formula" : {
"Formula" : "{ln scalar}"
},
"name" : "functions"
}
],
"DiagramX" : -5,
"diagramScale" : 2.756384134292603,
"Type" : "Model",
"diagramY" : -7.624326229095459,
"diagramX" : -17.4055004119873,
"name" : "Functions",
"HideInfo" : "n"
},
{
"DiagramY" : -70,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : 35,
"Type" : "Expression",
"Notes" : "A simple scalar constant, without units. \n\nTap on the icon to see the expression information view.\n",
"Formula" : {
"Formula" : "1.5"
},
"name" : "scalar"
},
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : 125,
"Type" : "Expression",
"Notes" : "Shows the use of exponential input",
"Formula" : {
"Formula" : "-4.23e-5"
},
"name" : "small"
},
{
"DiagramNotes" : "y",
"DiagramY" : 70,
"DiagramX" : 35,
"Type" : "Expression",
"Notes" : "A scalar constant with a designated unit, in this case \"cm\".\n\nThe output is reported in \"m\" as that is the default output unit for length in the currently selected unit system.  \n\nThe displayed unit can be changed by tapping on the info button to the right of the output unit.\n\nSee \"Units\" in the main model for a more examples of Math Minion's conversion unit system and its ability to help with dimensional analysis.\n",
"Formula" : {
"Formula" : "50 cm"
},
"name" : "WithUnits"
}
],
"DiagramX" : -5,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : -3.333333253860474,
"diagramX" : -25,
"name" : "Scalars",
"HideInfo" : "n"
},
{
"DiagramY" : -10,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"diagramY" : -8.333333015441895,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "The range operator \":\" can be used to create a column array with integer values starting at the first operand value and proceeding in increments of 1 to the second operand value.\n\nHere 1:20 produces an array:\n\n1,2,3,4,…19,20",
"Formula" : {
"Formula" : "1:20"
},
"name" : "Range"
},
{
"DiagramNotes" : "y",
"DiagramY" : 105,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "Combined with other arithmetic operators, this can be used to initialize value arrays of any sort.  For instance:\n\n1:20 * 2\n\nwould result in an array 20 long having members:\n\n2, 4, 6, 8, ... 38, 40\n",
"Formula" : {
"Formula" : "1:20 * 2"
},
"name" : "Range_2"
},
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 105,
"Type" : "Expression",
"Notes" : "The range operator has the highest precedence, so you would need the parenthesis in the following to get an array from 1 to 40:\n\n1:(20*2)\n \nYou can scroll the result display by dragging to see additional members.  \n\nTapping on the arrows at the bottom will jump to the end in the indicated direction.\n",
"Formula" : {
"Formula" : "1:(20*2)"
},
"name" : "Range_3"
}
],
"DiagramX" : 20,
"Type" : "Model",
"Notes" : "Create a column array",
"diagramScale" : 3,
"diagramX" : -10,
"name" : "Range",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 55,
"diagramY" : -28.33333396911621,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 35,
"DiagramX" : 25,
"Type" : "Expression",
"Notes" : "A column array from 1 to 20",
"Formula" : {
"Formula" : "1:20"
},
"name" : "Array"
},
{
"DiagramNotes" : "y",
"DiagramY" : 35,
"DiagramX" : 100,
"Type" : "Expression",
"Notes" : "The transpose function can be used to rotate a matrix.  In this case it has transformed the column array “array” into a row array.\n\nYou can scroll result matrix by dragging to see additional values or click on the arrows at the bottom to jump to the beginning and end.",
"Formula" : {
"Formula" : "{transpose array}"
},
"name" : "Transpose"
}
],
"DiagramX" : 20,
"Type" : "Model",
"Notes" : "Change a column array to row array.",
"diagramScale" : 3,
"diagramX" : -15,
"name" : "Transpose",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 55,
"diagramY" : -53.33333206176758,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 60,
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "A column array from 1 to 20.",
"Formula" : {
"Formula" : "1:20"
},
"name" : "Array"
},
{
"DiagramNotes" : "y",
"DiagramY" : 95,
"DiagramX" : 45,
"Type" : "Expression",
"Notes" : "A scalar constant of 50 cm.\n",
"Formula" : {
"Formula" : "50 cm"
},
"name" : "WithUnits"
},
{
"DiagramNotes" : "y",
"DiagramY" : 60,
"DiagramX" : 135,
"Type" : "Expression",
"Notes" : "The column array “Array” is multiplied by the scalar \"WithUnits\".\n\nThe result is a column array with each element of “Array” multiplied by the value of \"WithUnits\".\n\nSince \"WithUnits\" has a unit of length and “Array” has no units, the result also has a unit of length.\n\nNote that we could not have added these two values since Math Minion does not permit values with different unit types to be added.\n\nWe could of course have multiplied “Array” with a suitable constant that had a length unit before adding them though.\n\nSee \"Units” in the root model for more examples of conversion units.",
"Formula" : {
"Formula" : "WithUnits*Array"
},
"name" : "multiply"
}
],
"DiagramX" : 95,
"Type" : "Model",
"Notes" : "Multiplying an array by a scalar.",
"diagramScale" : 3,
"diagramX" : -35,
"name" : "Multiply",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 95,
"diagramY" : -8.333333015441895,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "A column array from 1 to 20.",
"Formula" : {
"Formula" : "1:20"
},
"name" : "Column"
},
{
"DiagramNotes" : "y",
"DiagramY" : 50,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "A row array from 21 to 40",
"Formula" : {
"Formula" : "{tr 21:40}"
},
"name" : "Row"
},
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 105,
"Type" : "Expression",
"Notes" : "When any binary arithmetic operator is used between two matrices of different shapes, the result is a matrix with the number of rows and columns each equal to the larger of the respective values for the two operands.\n\nThus a 2x8 matrix added to a 4x2 matrix will yield a 4x8 result.\n\nThe value at row i and column j will be the product of the values at the corresponding indices in the operands.\n\nWhen the index is greater than the number of rows or columns for the operand, the row and column values are repeated in order as necessary to fill in the result.\n\nIn this case a column array is multiplied by a row array to produce a matrix.\n\nNote that if a \"matrix product\", i.e. an inner product, is required, use the \"dot\" function.",
"Formula" : {
"Formula" : "column * row"
},
"name" : "RowXCol"
}
],
"DiagramX" : 20,
"Type" : "Model",
"Notes" : "More general multiplication of arrays and matrices.",
"diagramScale" : 3,
"diagramX" : -10,
"name" : "RowXCol",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 95,
"diagramY" : 1.666666626930237,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"DiagramX" : 25,
"Type" : "Expression",
"Notes" : "The array function is used to generate a 20 x 20 matrix.",
"Formula" : {
"Formula" : "{array 20, 20, 1:400}"
},
"name" : "Matrix"
},
{
"DiagramNotes" : "y",
"DiagramY" : 5,
"DiagramX" : 115,
"Type" : "Expression",
"Notes" : "Elements of an value can be accessed by using indices inside square brackets.\n\nThe indices can be arrays themselves.  \n\nIn this case I have used ranges to create a subset of the “Matrix” expression value.\n\n",
"Formula" : {
"Formula" : "matrix[5:6,2:3]"
},
"name" : "indices"
},
{
"DiagramNotes" : "y",
"DiagramY" : 90,
"DiagramX" : 115,
"Type" : "Expression",
"Notes" : "If only the row index is given, the entire row(s) is returned.",
"Formula" : {
"Formula" : "Matrix[5]"
},
"name" : "rowIndex"
},
{
"DiagramNotes" : "y",
"DiagramY" : 135,
"DiagramX" : 115,
"Type" : "Expression",
"Notes" : "To select entire columns, an index of 0 can be used for the row index.",
"Formula" : {
"Formula" : "matrix[0,5]"
},
"name" : "columnIndex"
}
],
"DiagramX" : 95,
"Type" : "Model",
"Notes" : "Getting array and matrix elements.",
"diagramScale" : 3,
"diagramX" : -15,
"name" : "Indices",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"diagramY" : -3.333333253860474,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "The array function in this expression\n\n{array 3, 2, 1:2}\n\nhas three parameters, in which case the first is the number of rows and the second the number of columns the resulting matrix should have.\n\nThe third parameter is the value(s) that the elements should have and if it is an array, then its values are used in order on a row by row basis until the matrix if filled.\n\nHere the value parameter is an array with the elements 1 and 2.",
"Formula" : {
"Formula" : "{array 3, 2, 1:2}"
},
"name" : "Matrix"
},
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "Arrays and matrices can be created with the array function.  This takes either two or three parameters.\n\nIf there are only two parameters, as with this expression,\n\n{array 5, 2}\n\nthen the first is the number of rows the resulting column array should have.\n\nThe second parameter will be the value(s) to be placed in array elements.\n\nIf this second parameter is itself an array, its values will be cycled through in order until the new array is completely populated.\n",
"Formula" : {
"Formula" : "{array 5, 2}"
},
"name" : "Array"
}
],
"DiagramX" : 95,
"Type" : "Model",
"Notes" : "Function to create an array or matrix.",
"diagramScale" : 3,
"diagramX" : -10,
"name" : "Array_Function",
"HideInfo" : "n"
}
],
"DiagramX" : -5,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : -8.333333015441895,
"diagramX" : -10,
"name" : "Arrays",
"HideInfo" : "n"
},
{
"diagramY" : -13.33333301544189,
"DiagramY" : 10,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "An array of lengths.",
"Formula" : {
"Formula" : "0:4 * 1 m"
},
"name" : "Array_Length"
},
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 105,
"Type" : "Expression",
"Notes" : "The \"if\" function and associated comparison functions can be used to create calculation branches.\n\nThe formula looks like this:\n\n{if {le array_length, 0 m},\n  1 cm,\n  array_length\n}\n\nThis shows a number of interesting features, such as functions with multiple parameters, functions nested in functions and the use of units in formulas.",
"Formula" : {
"Formula" : "{if {le array_length, 0 m},\n  1 cm,\n  array_length\n}"
},
"name" : "Array_if"
},
{
"DiagramNotes" : "y",
"DiagramY" : 105,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "The first thing you might notice when looking at the formula for this expression, is that it is blue.\n\nThis is just a visual clue that the formula does not completely fit in the field.\n\nIf you tap on the field, the multiline edit or will appear automatically.\n\nThis “if” function returns the lessor of 2 m or Scalar_Length.\n\nIt could be done more succinctly with\n\n{min 2 m, scalar_length}\n",
"Formula" : {
"Formula" : "{if {lt 2 m, scalar_length},\n  2 m,\n  scalar_length\n}"
},
"name" : "Scalar_If"
},
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 185,
"Type" : "Expression",
"Notes" : "The if function takes three parameters:\n\nIf the first parameter is unknown, then the result is also unknown.\n\nNote that in these expressions, the first parameter is the result of a function.\n\nIf the first parameter yields a nonzero scalar result, then the result of the second parameter is returned.\n\nIf the result of the first parameter is a scalar value of zero, the third parameter is returned.\n\nIf the result of the first parameter is not a scalar, then the second and third parameters must be the same size as the first is and the result will be an element by element selection of the respective second and third parameter elements based on the first parameter element being zero or not.\n",
"Formula" : {
"Formula" : "{if {cc 1, 1, 0, 0, 1},\n\t1:5,\n\t-5:-1\n}"
},
"name" : "if_parameters"
},
{
"DiagramNotes" : "y",
"DiagramY" : 65,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "A scalar length\n",
"Formula" : {
"Formula" : "array_length[4]"
},
"name" : "Scalar_Length"
}
],
"DiagramX" : -5,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 3,
"diagramX" : -10,
"name" : "Comparisons",
"HideInfo" : "n"
},
{
"diagramY" : -3.333333253860474,
"DiagramY" : 30,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 10,
"DiagramX" : 10,
"Type" : "Expression",
"Notes" : "Most simple Math Minion calculations will just involve numbers, possibly with units and perhaps in arrays or matrices.\n\nHowever complex, string, table and reference values are all possible.\n",
"Formula" : {},
"name" : "Other_Values"
},
{
"diagramY" : -513.3333129882812,
"DiagramY" : 10,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 520,
"DiagramX" : 390,
"displayUnit" : "date",
"Type" : "Expression",
"Notes" : "Date and time in Math Minion is simply a measure of the number of seconds since 00:00 January 1, 1970.  \n\nHowever since X billion seconds isn't all that comprehensible a date measurement, there is a special date unit for time, which will output a time value in the form:\n\nyyyymmdd.hhmmss\n\nIn other words the date in year, month day before the decimal point and the time in hours, minutes and seconds after the decimal point.\n\nThere are two additional time units available which can be used to input or display alternate date formats:\n\ndated - ddmmyyyy.hhmmss\ndatem - mmddyyyy.hhmmss\n",
"Formula" : {
"Formula" : "{now}"
},
"name" : "Date_And_Time"
},
{
"DiagramY" : 520,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 20,
"displayUnit" : "date",
"Type" : "Expression",
"Notes" : "The date and time of Apollo 11's landing on the moon is input using the date unit and displayed with the same unit.\n",
"Formula" : {
"Formula" : "19690720.2018 date"
},
"name" : "InputDate"
},
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 105,
"displayUnit" : "dated",
"Type" : "Expression",
"Notes" : "This is the InputDate value displayed with the dated unit, which has the format ddmmyyyy.hhmmss.",
"Formula" : {
"Formula" : "InputDate"
},
"name" : "OutDateD"
},
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 190,
"displayUnit" : "datem",
"Type" : "Expression",
"Notes" : "This is the InputDate value displayed with the datem unit, which has the format mmddyyyy.hhmmss.",
"Formula" : {
"Formula" : "OutDateD"
},
"name" : "OutputDateM"
},
{
"DiagramNotes" : "y",
"DiagramY" : 85,
"DiagramX" : 20,
"displayUnit" : "datem",
"Type" : "Expression",
"Notes" : "The date and time of Apollo 11's landing on the moon is input using the datem unit and displayed with the same unit.\n\nThe datem format is ddmmyyyy.hhmmss.\n",
"Formula" : {
"Formula" : "07201969.2018 datem"
},
"name" : "InputDateM"
},
{
"DiagramNotes" : "y",
"DiagramY" : 85,
"DiagramX" : 105,
"displayUnit" : "dated",
"Type" : "Expression",
"Notes" : "The date and time of Apollo 11's landing on the moon is input using the dated unit and displayed with the same unit.\n\nThe dated format is ddmmyyyy.hhmmss.\n",
"Formula" : {
"Formula" : "20071969.2018 dated"
},
"name" : "InputDateD"
}
],
"DiagramX" : 465,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : -13.33333301544189,
"diagramX" : -10,
"name" : "Input_Output",
"HideInfo" : "n"
},
{
"DiagramY" : 540,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 65,
"DiagramX" : 25,
"Type" : "Expression",
"Notes" : "The date function converts a time into a dimensionless number of the form:\n\nyyyymmdd.hhmmss\n",
"Formula" : {
"Formula" : "{date {now}}"
},
"name" : "DateFunc"
},
{
"DiagramNotes" : "y",
"DiagramY" : 65,
"DiagramX" : 115,
"displayUnit" : "date",
"Type" : "Expression",
"Notes" : "The mktime function is the inverse of the date function.  It takes a dimensionless number of the form yyyymmdd.hhmmss and converts it into the number of seconds since 00:00 Jan 1, 1970 GMT.\n\nThe result can of course be displayed with any time unit.",
"Formula" : {
"Formula" : "{mktime DateFunc}"
},
"name" : "MktimeFunc"
},
{
"DiagramNotes" : "y",
"DiagramY" : -65,
"DiagramX" : 30,
"Type" : "Expression",
"Notes" : "The current time in seconds since 00:00 January 1, 1970. GMT.\n\nSince expressions cache their results unless they are changed, this value will only be calculated when first viewed in a given session.\n\nTo force it to update, click the equals  button to the left of the formula field.\n\nSince no display unit has been assigned, it is displayed in seconds.",
"Formula" : {
"Formula" : "{now}"
},
"name" : "Now"
},
{
"DiagramNotes" : "y",
"DiagramY" : -65,
"DiagramX" : 115,
"displayUnit" : "date",
"Type" : "Expression",
"Notes" : "By using the date display unit, we get a more readable date and time.  Unless you are in the GMT time zone though, it won't represent your local time.\n",
"Formula" : {
"Formula" : "{now}"
},
"name" : "HumanNow"
},
{
"DiagramNotes" : "y",
"DiagramY" : -5,
"DiagramX" : 115,
"displayUnit" : "date",
"Type" : "Expression",
"Notes" : "By adding the result of the {timezone} function, we can convert a time from GMT to our local timezone.\n",
"Formula" : {
"Formula" : "{now} + {timezone}"
},
"name" : "NowWithTZ"
}
],
"DiagramX" : 465,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : 71.66666412353516,
"diagramX" : -15,
"name" : "Functions",
"HideInfo" : "n"
}
],
"DiagramX" : 95,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 3,
"diagramX" : -380,
"name" : "Date_And_Time",
"HideInfo" : "n"
},
{
"diagramY" : 161.6666717529297,
"DiagramY" : 50,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -155,
"DiagramX" : -5,
"Type" : "Expression",
"Notes" : "In addition to arrays and matrices of numbers and strings, Math Minion can also have table values.\n\nThese often originate with a Data Table object like the Hours object in this and the example models, but they can be created directly from formulas as illustrated in the MakeTable expressions.\n\nEssentially a table value is a collection of columns, which all have the same number of rows.\n\nThey can be of different types; that is string or numeric and if numeric, they can have different unit types.\n\nData table tools will be discussed in more detail in the Tools model of the Root model.\n",
"Formula" : {},
"name" : "Table_Values"
},
{
"DiagramY" : -5,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "The table function can be used to make a table value.\n\nThe first argument must be an array of names that will be used as the table column names.\n\nThe remaining parameters must all be arrays having the same number of rows.\n\nTheir columns will be used to make the columns of the new table value.\n\nIf the number of names in the first argument is not the same as the total number of columns in the rest of the arguments, the lessor is used and any extras ignored.\n",
"Formula" : {
"Formula" : "{table {cc \"one\", \"two\", \"three\"},\n\t{cc \"s1\", \"s2\", \"s3\", \"s4\"},\n\t1:4,\n\t{fmt \"n=%3.0f\", 1:4*10}\n}"
},
"name" : "MakeTable"
},
{
"DiagramNotes" : "y",
"DiagramY" : 175,
"DiagramX" : 10,
"Type" : "Expression",
"Notes" : "The table function is used to make a table with two numeric columns with different unit types, as well as two string columns.",
"Formula" : {
"Formula" : "{table {cc \"Row\",\"Length\", \"Weight\",\"Pounds\"}\n\t{fmt \"Row%3.0f\", 1:5}\n\t1:5 * 1\"m\",\n\t100:105 * 1\"kg\",\n\t{fmt \"lb=%f\", 100:105 * 1\"kg\", \"lb\"}\n}"
},
"name" : "MakeTable2"
},
{
"DiagramNotes" : "y",
"DiagramY" : 230,
"DiagramX" : 10,
"Type" : "Expression",
"Notes" : "Another table, conformable to MakeTable2",
"Formula" : {
"Formula" : "{table {cc \"Row\", \"Length\", \"Weight\",\"Pounds\"}\n\t{fmt \"No%3.0f\", 1:5}\n\t1:5 * 3\"m\",\n\t100:105 * 3\"kg\",\n\t{fmt \"lb=%f\", 100:105 * 1\"kg\", \"lb\"}\n}"
},
"name" : "MakeTable3"
},
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"DiagramX" : 115,
"Type" : "Expression",
"Notes" : "The basic arithmetic operators can be used with tables, with the proviso that the units must conform.  Thus if you are adding or subtracting a scalar, then all the columns must have the same unit type as the scalar.\n\nNote that the first and third columns are strings and are just copied without change.",
"Formula" : {
"Formula" : "2 * MakeTable / 3"
},
"name" : "TableArithmetic"
},
{
"DiagramNotes" : "y",
"DiagramY" : 175,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "The two tables are added together.  They must have the same number of rows and columns and the columns must conform in type and unit type.\n\nNote that the first and last columns are strings and are just taken from the first argument, without modification.\n",
"Formula" : {
"Formula" : "MakeTable2 + MakeTable3"
},
"name" : "AddTables"
}
],
"DiagramX" : 75,
"diagramScale" : 2.547540903091431,
"Type" : "Model",
"diagramY" : -17.1492919921875,
"diagramX" : 0,
"name" : "MakeTable",
"HideInfo" : "n"
},
{
"DiagramY" : -65,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 175,
"DiagramX" : 10,
"Type" : "Expression",
"Notes" : "This expression simply references the Hours data table and as a result has a table value representing the entire table.\n\nThings to note:\n - cells cannot be modified as they can in the source data table.\n\n - the display unit for each column retains the display unit from its source, but you can change that by clicking on the column name and then the button to the right of the display unit (above the table).\n\n - to keep the diagram tidy, a number of expressions in this model will reference this expression rather than Hours directly.",
"Formula" : {
"Formula" : "hours"
},
"name" : "HoursRef"
},
{
"DiagramNotes" : "y",
"DiagramY" : 80,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "Cells of a table value can be referenced with the [ ] index operator in the normal row, column manner using numbers.",
"Formula" : {
"Formula" : "hoursref[3, 2]"
},
"name" : "indexCell"
},
{
"DiagramNotes" : "y",
"DiagramY" : 130,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "A column index can be replaced with a column name for a table value.",
"Formula" : {
"Formula" : "hoursref[3, \"Client\"]"
},
"name" : "indexCell2"
},
{
"DiagramNotes" : "y",
"DiagramY" : 175,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "An array of row indexes can be used to get certain rows of a table value.  The result will itself be a table value.",
"Formula" : {
"Formula" : "hoursref[ 3:5 ]"
},
"name" : "IndexRows"
},
{
"DiagramNotes" : "y",
"DiagramY" : 230,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "If an array of column names (here created by the concat function) is used as a column index, then those columns will be in the table value result.",
"Formula" : {
"Formula" : "hoursref[ 0, {cc \"project\", \"hours\"} ]"
},
"name" : "IndexColumns"
},
{
"DiagramNotes" : "y",
"DiagramY" : 285,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "If only a single column is returned, then it is returned as a normal numeric or string array, rather than as a table value.\n\nNote that in this case the display unit is not retained and the value is displayed in seconds.  You could of course set the display unit for this expression.",
"Formula" : {
"Formula" : "hoursref[0,1]"
},
"name" : "SingleColumn"
},
{
"DiagramNotes" : "y",
"DiagramY" : 375,
"DiagramX" : 110,
"displayUnit" : "date",
"Type" : "Expression",
"Notes" : "A single column can also be obtained by using the column name in the dot notation.\n\nHere the display unit has been set on this expression.",
"Formula" : {
"Formula" : "hoursref.date"
},
"name" : "ColumnRef"
},
{
"DiagramNotes" : "y",
"DiagramY" : 80,
"DiagramX" : 5,
"Type" : "Data Table",
"Columns" : [
{
"displayUnit" : "date",
"unitDimensions" : "0 0 1 0 0 0 0",
"defaultValue" : "{mktime {int {date {now}}}}",
"name" : "Date",
"nValues" : [
1342396800,
1342396800,
1342483200,
1342569600,
1342569600,
1342656000,
1342656000,
1342742400,
1342742400,
1342828800,
1342828800,
1342915200,
1343001600,
1343174400,
1343174400,
1343260800,
1343347200,
1343433600,
1343433600,
1343520000,
1343606400,
1343692800,
1343779200,
1343779200,
1343865600,
1343865600,
1343952000,
1344038400,
1344038400,
1344124800,
1344124800,
1344297600,
1344384000,
1344470400,
1344556800,
1344556800,
1344643200,
1344729600,
1344729600,
1344816000,
1344902400,
1344902400,
1344988800,
1344988800
]
},
{
"name" : "Client",
"sValues" : [
"HAL",
"Fred",
"Acme",
"Acme",
"Acme",
"HAL",
"Acme",
"HAL",
"Fred",
"Fred",
"Acme",
"Acme",
"Acme",
"Fred",
"HAL",
"HAL",
"HAL",
"HAL",
"Acme",
"Acme",
"Pear",
"Pear",
"Pear",
"HAL",
"Pear",
"Fred",
"Pear",
"Pear",
"Acme",
"Pear",
"HAL",
"HAL",
"HAL",
"HAL",
"Fred",
"HAL",
"HAL",
"HAL",
"Fred",
"Fred",
"Pear",
"Fred",
"HAL",
"Acme"
],
"defaultValue" : "$[$.nrows,2]"
},
{
"name" : "Project",
"sValues" : [
"DeepThought",
"Accounting",
"Coyote",
"Coyote",
"Coyote",
"DeepThought",
"RR",
"DeepThought",
"Accounting",
"Accounting",
"RR",
"RR",
"RR",
"Accounting",
"DeepThought",
"DeepThought",
"DeepThought",
"DeepThought",
"RR",
"Coyote",
"iWant",
"iWant",
"iWant",
"DeepThought",
"iWant",
"Accounting",
"iWant",
"iWish",
"RR",
"iWish",
"Clarke",
"Clarke",
"Clarke",
"Clarke",
"Accounting",
"Clarke",
"Clarke",
"Clarke",
"Report",
"Report",
"iWish",
"Report",
"Clarke",
"Coyote"
],
"defaultValue" : "$[$.nrows,3]"
},
{
"displayUnit" : "h",
"unitDimensions" : "0 0 1 0 0 0 0",
"defaultValue" : "0 h",
"name" : "Hours",
"nValues" : [
7200,
10800,
18000,
21600,
7200,
10800,
7200,
10800,
7200,
14400,
21600,
28800,
32400,
18000,
10800,
25200,
28800,
7200,
14400,
14400,
21600,
32400,
25200,
7200,
25200,
7200,
25200,
21600,
7200,
18000,
7200,
28800,
32400,
25200,
7200,
18000,
28800,
18000,
10800,
28800,
18000,
7200,
25200,
7200
]
}
],
"Notes" : "This data table tool is a simple fictitious time sheet with a month of values.  It has four columns, consisting of Date, Client, Project and hours.\n\nWhen new rows are added, they are initialized with today's date, the last row's Client and Project value and 0 hours.",
"name" : "Hours"
}
],
"DiagramX" : 75,
"diagramScale" : 1.967088580131531,
"Type" : "Model",
"diagramY" : -69.83268737792969,
"diagramX" : 5,
"name" : "Index",
"HideInfo" : "n"
},
{
"DiagramY" : -45,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 30,
"DiagramX" : 20,
"Type" : "Data Table",
"Columns" : [
{
"displayUnit" : "date",
"unitDimensions" : "0 0 1 0 0 0 0",
"defaultValue" : "{mktime {int {date {now}}}}",
"name" : "Date",
"nValues" : [
1342396800,
1342396800,
1342483200,
1342569600,
1342569600,
1342656000,
1342656000,
1342742400,
1342742400,
1342828800,
1342828800,
1342915200,
1343001600,
1343174400,
1343174400,
1343260800,
1343347200,
1343433600,
1343433600,
1343520000,
1343606400,
1343692800,
1343779200,
1343779200,
1343865600,
1343865600,
1343952000,
1344038400,
1344038400,
1344124800,
1344124800,
1344297600,
1344384000,
1344470400,
1344556800,
1344556800,
1344643200,
1344729600,
1344729600,
1344816000,
1344902400,
1344902400,
1344988800,
1344988800
]
},
{
"name" : "Client",
"sValues" : [
"HAL",
"Fred",
"Acme",
"Acme",
"Acme",
"HAL",
"Acme",
"HAL",
"Fred",
"Fred",
"Acme",
"Acme",
"Acme",
"Fred",
"HAL",
"HAL",
"HAL",
"HAL",
"Acme",
"Acme",
"Pear",
"Pear",
"Pear",
"HAL",
"Pear",
"Fred",
"Pear",
"Pear",
"Acme",
"Pear",
"HAL",
"HAL",
"HAL",
"HAL",
"Fred",
"HAL",
"HAL",
"HAL",
"Fred",
"Fred",
"Pear",
"Fred",
"HAL",
"Acme"
],
"defaultValue" : "$[$.nrows,2]"
},
{
"name" : "Project",
"sValues" : [
"DeepThought",
"Accounting",
"Coyote",
"Coyote",
"Coyote",
"DeepThought",
"RR",
"DeepThought",
"Accounting",
"Accounting",
"RR",
"RR",
"RR",
"Accounting",
"DeepThought",
"DeepThought",
"DeepThought",
"DeepThought",
"RR",
"Coyote",
"iWant",
"iWant",
"iWant",
"DeepThought",
"iWant",
"Accounting",
"iWant",
"iWish",
"RR",
"iWish",
"Clarke",
"Clarke",
"Clarke",
"Clarke",
"Accounting",
"Clarke",
"Clarke",
"Clarke",
"Report",
"Report",
"iWish",
"Report",
"Clarke",
"Coyote"
],
"defaultValue" : "$[$.nrows,3]"
},
{
"displayUnit" : "h",
"unitDimensions" : "0 0 1 0 0 0 0",
"defaultValue" : "0 h",
"name" : "Hours",
"nValues" : [
7200,
10800,
18000,
21600,
7200,
10800,
7200,
10800,
7200,
14400,
21600,
28800,
32400,
18000,
10800,
25200,
28800,
7200,
14400,
14400,
21600,
32400,
25200,
7200,
25200,
7200,
25200,
21600,
7200,
18000,
7200,
28800,
32400,
25200,
7200,
18000,
28800,
18000,
10800,
28800,
18000,
7200,
25200,
7200
]
}
],
"Notes" : "This data table tool is a simple fictitious time sheet with a month of values.  It has four columns, consisting of Date, Client, Project and hours.\n\nWhen new rows are added, they are initialized with today's date, the last row's Client and Project value and 0 hours.",
"name" : "Hours"
},
{
"DiagramNotes" : "y",
"DiagramY" : 30,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "The select function can be used to choose certain rows of a table, thus creating a new table value.\n\nThe formula in this case is:\n\n{select hours, {eq hours.project, \"Coyote\"}}\n\nThe first parameter of the function is simply the table value, in this case Hours itself.\n\nThe second parameter is a column array with the same number of rows as the table.  All the rows of this argument which are nonzero (or not zero length if a string), will be selected from the source table and included in the result.\n\nIn this case that will be all the rows whose project column has a value of \"Coyote\".\n\nNote the select command will also work on matrices of numbers and strings in the same way.\n",
"Formula" : {
"Formula" : "{select hours, {eq hours.project, \"Coyote\"}}"
},
"name" : "select"
},
{
"DiagramNotes" : "y",
"DiagramY" : 245,
"DiagramX" : 100,
"Type" : "Expression",
"Notes" : "Another example of using the select, this time to obtain all the records before Aug 1, 2012.",
"Formula" : {
"Formula" : "{select hours, {lt hours.date, 20120801\"date\"}}"
},
"name" : "July"
}
],
"DiagramX" : 75,
"diagramScale" : 2.466666698455811,
"Type" : "Model",
"diagramY" : -21.89189147949219,
"diagramX" : -10,
"name" : "Select",
"HideInfo" : "n"
},
{
"DiagramY" : -25,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 70,
"DiagramX" : 10,
"Type" : "Data Table",
"Columns" : [
{
"displayUnit" : "date",
"unitDimensions" : "0 0 1 0 0 0 0",
"defaultValue" : "{mktime {int {date {now}}}}",
"name" : "Date",
"nValues" : [
1342396800,
1342396800,
1342483200,
1342569600,
1342569600,
1342656000,
1342656000,
1342742400,
1342742400,
1342828800,
1342828800,
1342915200,
1343001600,
1343174400,
1343174400,
1343260800,
1343347200,
1343433600,
1343433600,
1343520000,
1343606400,
1343692800,
1343779200,
1343779200,
1343865600,
1343865600,
1343952000,
1344038400,
1344038400,
1344124800,
1344124800,
1344297600,
1344384000,
1344470400,
1344556800,
1344556800,
1344643200,
1344729600,
1344729600,
1344816000,
1344902400,
1344902400,
1344988800,
1344988800
]
},
{
"name" : "Client",
"sValues" : [
"HAL",
"Fred",
"Acme",
"Acme",
"Acme",
"HAL",
"Acme",
"HAL",
"Fred",
"Fred",
"Acme",
"Acme",
"Acme",
"Fred",
"HAL",
"HAL",
"HAL",
"HAL",
"Acme",
"Acme",
"Pear",
"Pear",
"Pear",
"HAL",
"Pear",
"Fred",
"Pear",
"Pear",
"Acme",
"Pear",
"HAL",
"HAL",
"HAL",
"HAL",
"Fred",
"HAL",
"HAL",
"HAL",
"Fred",
"Fred",
"Pear",
"Fred",
"HAL",
"Acme"
],
"defaultValue" : "$[$.nrows,2]"
},
{
"name" : "Project",
"sValues" : [
"DeepThought",
"Accounting",
"Coyote",
"Coyote",
"Coyote",
"DeepThought",
"RR",
"DeepThought",
"Accounting",
"Accounting",
"RR",
"RR",
"RR",
"Accounting",
"DeepThought",
"DeepThought",
"DeepThought",
"DeepThought",
"RR",
"Coyote",
"iWant",
"iWant",
"iWant",
"DeepThought",
"iWant",
"Accounting",
"iWant",
"iWish",
"RR",
"iWish",
"Clarke",
"Clarke",
"Clarke",
"Clarke",
"Accounting",
"Clarke",
"Clarke",
"Clarke",
"Report",
"Report",
"iWish",
"Report",
"Clarke",
"Coyote"
],
"defaultValue" : "$[$.nrows,3]"
},
{
"displayUnit" : "h",
"unitDimensions" : "0 0 1 0 0 0 0",
"defaultValue" : "0 h",
"name" : "Hours",
"nValues" : [
7200,
10800,
18000,
21600,
7200,
10800,
7200,
10800,
7200,
14400,
21600,
28800,
32400,
18000,
10800,
25200,
28800,
7200,
14400,
14400,
21600,
32400,
25200,
7200,
25200,
7200,
25200,
21600,
7200,
18000,
7200,
28800,
32400,
25200,
7200,
18000,
28800,
18000,
10800,
28800,
18000,
7200,
25200,
7200
]
}
],
"Notes" : "This data table tool is a simple fictitious time sheet with a month of values.  It has four columns, consisting of Date, Client, Project and hours.\n\nWhen new rows are added, they are initialized with today's date, the last row's Client and Project value and 0 hours.",
"name" : "Hours"
},
{
"DiagramNotes" : "y",
"DiagramY" : 70,
"tableUnits" : {
"1" : "date"
},
"DiagramX" : 200,
"Type" : "Expression",
"Notes" : "If you group on a numeric column, the values in the column are first converted to strings.\n\nHere we calculated the total number of hours on each date.\n",
"Formula" : {
"Formula" : "{groupsum Hours, \"Date\"}"
},
"name" : "DayHours"
},
{
"DiagramNotes" : "y",
"DiagramY" : 175,
"DiagramX" : 270,
"Type" : "Expression",
"Notes" : "Here the indexof values are used to extract the client names from Hours, corresponding to the projects in projectsum.\n\nhours.client[ indexof[0,1] ]\n\nBecause it is a single column, it is returned as a simple column array, not a table value.",
"Formula" : {
"Formula" : "hours.client[ indexof[0,1] ]"
},
"name" : "clients"
},
{
"DiagramNotes" : "y",
"DiagramY" : 150,
"DiagramX" : 345,
"Type" : "Expression",
"Notes" : "The append function can be used to combine the columns of different tables into a single table.  All of the arguments must have the same number of rows.\n\nIt is used here to add a column of client names to the projectsum result:\n\n{append projectsum, {table \"Client\", clients}}\n\nThe clients value is not a table, but we can easily convert it into one with the table function.",
"Formula" : {
"Formula" : "{append projectsum, {table \"Client\", clients}}"
},
"name" : "ProjectHours"
},
{
"DiagramNotes" : "y",
"DiagramY" : 160,
"DiagramX" : 85,
"Type" : "Expression",
"Notes" : "This expression uses the groupsum function to get the total hours by project:\n\n{groupsum\n\thours[0,{cc \"project\", \"Hours\"}],\n\t\"project\"\n} \n\nThe first argument is the table value to be totalled.  In this case the index operator has been used to select just the project and hours columns.\n\nThe second argument is the column for which identical values are to be grouped together into a single row.\n\n Other columns in that row will be the sums of the values for that group.\n\nThe argument must be a string and must be the name of a column in the table.\n\nThere are also groupmin and groupmax functions.\n",
"Formula" : {
"Formula" : "{groupsum\n\thours[0,{cc \"project\", \"Hours\"}],\n\t\"project\"\n} "
},
"name" : "projectsum"
},
{
"DiagramNotes" : "y",
"DiagramY" : 185,
"DiagramX" : 185,
"Type" : "Expression",
"Notes" : "{indexof\n\tprojectsum.project,\n\thours.project\n}\n\nIndexof returns a matrix with two columns.\n\nThe first column holds the row numbers of the first cell found in hours.project, which has the same value as the first value found in projectsum.project.\n\nThe second column holds the column number of that cell.\n\nThus for each project name in projectsum, there will be a row with the indices for the first occurrence of that name in the projects column of hours.",
"Formula" : {
"Formula" : "{indexof\n\tprojectsum.project,\n\thours.project\n}"
},
"name" : "indexof"
}
],
"DiagramX" : 75,
"diagramScale" : 2.011764764785767,
"Type" : "Model",
"diagramY" : -60.05847930908203,
"diagramX" : 0,
"name" : "Sums",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : -155,
"DiagramX" : 75,
"Type" : "Data Table",
"Columns" : [
{
"displayUnit" : "date",
"unitDimensions" : "0 0 1 0 0 0 0",
"defaultValue" : "{mktime {int {date {now}}}}",
"name" : "Date",
"nValues" : [
1342396800,
1342396800,
1342483200,
1342569600,
1342569600,
1342656000,
1342656000,
1342742400,
1342742400,
1342828800,
1342828800,
1342915200,
1343001600,
1343174400,
1343174400,
1343260800,
1343347200,
1343433600,
1343433600,
1343520000,
1343606400,
1343692800,
1343779200,
1343779200,
1343865600,
1343865600,
1343952000,
1344038400,
1344038400,
1344124800,
1344124800,
1344297600,
1344384000,
1344470400,
1344556800,
1344556800,
1344643200,
1344729600,
1344729600,
1344816000,
1344902400,
1344902400,
1344988800,
1344988800
]
},
{
"name" : "Client",
"sValues" : [
"HAL",
"Fred",
"Acme",
"Acme",
"Acme",
"HAL",
"Acme",
"HAL",
"Fred",
"Fred",
"Acme",
"Acme",
"Acme",
"Fred",
"HAL",
"HAL",
"HAL",
"HAL",
"Acme",
"Acme",
"Pear",
"Pear",
"Pear",
"HAL",
"Pear",
"Fred",
"Pear",
"Pear",
"Acme",
"Pear",
"HAL",
"HAL",
"HAL",
"HAL",
"Fred",
"HAL",
"HAL",
"HAL",
"Fred",
"Fred",
"Pear",
"Fred",
"HAL",
"Acme"
],
"defaultValue" : "$[$.nrows,2]"
},
{
"name" : "Project",
"sValues" : [
"DeepThought",
"Accounting",
"Coyote",
"Coyote",
"Coyote",
"DeepThought",
"RR",
"DeepThought",
"Accounting",
"Accounting",
"RR",
"RR",
"RR",
"Accounting",
"DeepThought",
"DeepThought",
"DeepThought",
"DeepThought",
"RR",
"Coyote",
"iWant",
"iWant",
"iWant",
"DeepThought",
"iWant",
"Accounting",
"iWant",
"iWish",
"RR",
"iWish",
"Clarke",
"Clarke",
"Clarke",
"Clarke",
"Accounting",
"Clarke",
"Clarke",
"Clarke",
"Report",
"Report",
"iWish",
"Report",
"Clarke",
"Coyote"
],
"defaultValue" : "$[$.nrows,3]"
},
{
"displayUnit" : "h",
"unitDimensions" : "0 0 1 0 0 0 0",
"defaultValue" : "0 h",
"name" : "Hours",
"nValues" : [
7200,
10800,
18000,
21600,
7200,
10800,
7200,
10800,
7200,
14400,
21600,
28800,
32400,
18000,
10800,
25200,
28800,
7200,
14400,
14400,
21600,
32400,
25200,
7200,
25200,
7200,
25200,
21600,
7200,
18000,
7200,
28800,
32400,
25200,
7200,
18000,
28800,
18000,
10800,
28800,
18000,
7200,
25200,
7200
]
}
],
"Notes" : "This data table tool is a simple fictitious time sheet with a month of values.  It has four columns, consisting of Date, Client, Project and hours.\n\nWhen new rows are added, they are initialized with today's date, the last row's Client and Project value and 0 hours.",
"name" : "Hours"
},
{
"DiagramNotes" : "y",
"DiagramY" : -155,
"DiagramX" : 160,
"Type" : "Expression",
"Notes" : "The numeric function will transform a table into a numeric matrix, but only if all the numeric columns have the same unit type.\n\nThe string columns are simply omitted.\n\n  Here both date and hours are of type time and the other columns are strings, so the operation is allowed.\n",
"Formula" : {
"Formula" : "{numeric hours}"
},
"name" : "Numeric"
}
],
"DiagramX" : 95,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 3,
"diagramX" : 15,
"name" : "TableValues",
"HideInfo" : "n"
},
{
"diagramY" : 76.66666412353516,
"DiagramY" : 30,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : -70,
"DiagramX" : 30,
"Type" : "Expression",
"Notes" : "A string is represented by text surrounded by double quotes.",
"Formula" : {
"Formula" : "\"The quick red fox\""
},
"name" : "aString"
},
{
"diagramY" : -13.33333301544189,
"DiagramY" : 10,
"Objects" : [
{
"Type" : "Expression",
"DiagramY" : 20,
"name" : "le",
"DiagramX" : 100,
"Formula" : {
"Formula" : "{le \"ab\", \"abc\"}"
}
},
{
"Type" : "Expression",
"DiagramY" : 40,
"name" : "lt",
"DiagramX" : 100,
"Formula" : {
"Formula" : "{lt \"ab\", \"abc\"}"
}
},
{
"Type" : "Expression",
"DiagramY" : 60,
"name" : "ge",
"DiagramX" : 100,
"Formula" : {
"Formula" : "{ge \"ab\", \"abc\"}"
}
},
{
"Type" : "Expression",
"DiagramY" : 80,
"name" : "gt",
"DiagramX" : 100,
"Formula" : {
"Formula" : "{gt \"ab\", \"abc\"}"
}
},
{
"Type" : "Expression",
"DiagramY" : 100,
"name" : "and",
"DiagramX" : 100,
"Formula" : {
"Formula" : "{and \"\", \"abc\"}"
}
},
{
"Type" : "Expression",
"DiagramY" : 120,
"name" : "or",
"DiagramX" : 100,
"Formula" : {
"Formula" : "{or \"\", \"abc\"}"
}
},
{
"Type" : "Expression",
"DiagramY" : 140,
"name" : "not",
"DiagramX" : 100,
"Formula" : {
"Formula" : "{not \"a\"}"
}
},
{
"DiagramNotes" : "y",
"DiagramY" : 100,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "If a string value is used as a condition in an if function, a blank string will evaluate as false, while all others will be true.\n\nIn this case, the third element of the condition is blank, so the result will use the third element of the third parameter.",
"Formula" : {
"Formula" : "{if\t{concat \"a\",\"b\",\"\",\"d\"},\n\t{concat 1, 2, 3, 4},\n\t{concat 11,12, 13, 14}\n}"
},
"name" : "ifBlank"
},
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 20,
"Type" : "Expression",
"Notes" : "The comparison and logical functions work with strings as well.  A blank string is considered false, while a string that contains anything is considered true.  Comparisons are done lexically.",
"Formula" : {
"Formula" : "{if \"something here?\", \"true\", \"false\"}"
},
"name" : "StringLogicals"
}
],
"DiagramX" : 105,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 3,
"diagramX" : -10,
"name" : "StringLogicals",
"HideInfo" : "n"
},
{
"DiagramY" : -70,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"DiagramX" : 25,
"Type" : "Expression",
"Notes" : "A string can span more than one line if you create it in the expanded formula editor.  As with normal strings, it must begin and end with double quotes.\n\nAlternatively, if the formula starts with a single quote, normally the comment character, then everything that follows it will be considered a string value and a closing quote is not necessary.\n\nA long string like this won't fit into an expression's result display cell, but clicking on a string cell will produce a view of the entire string.\n",
"Formula" : {
"Formula" : "\"A string can be on multiple lines,\nbut you will have to use the expanded formula\neditor to create and view it.\""
},
"name" : "Multiline"
}
],
"DiagramX" : 105,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : -18.33333396911621,
"diagramX" : -15,
"name" : "Multiline",
"HideInfo" : "n"
},
{
"DiagramY" : -30,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "A number can be formatted using the fmt function.\n\nThe first first parameter should be a string containing a C style number format specification, such as \"%12.2f\", which designates a field 12 characters wide, with two decimal places in floating point format.\n\nNote that numbers in Math Minion are always real numbers, not integers.\n\nWhile only a single number is formatted, you can add additional text to the format string, such as the parenthesis in this example.",
"Formula" : {
"Formula" : "{fmt \"(%12.2f)\", 12.1234}"
},
"name" : "Format"
},
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 100,
"Type" : "Expression",
"Notes" : "An optional third parameter can be supplied to the fmt function and if present, it should be a string that is the name of the unit that should be used for the number.\n\nThis unit must be of the same unit type as the number being formatted.\n\nIn this case the number is dimensionless and a percentage unit is requested.",
"Formula" : {
"Formula" : "{fmt \"(%12.2f)\", 12.1234, \"%\"}"
},
"name" : "Format_Unit"
}
],
"DiagramX" : 105,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : -8.333333015441895,
"diagramX" : -5,
"name" : "Format",
"HideInfo" : "n"
},
{
"DiagramY" : -50,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "Adding strings with the + operator, concatenates them.",
"Formula" : {
"Formula" : "\"hello \" + \"world\""
},
"name" : "Addition"
}
],
"DiagramX" : 105,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : -8.333333015441895,
"diagramX" : -5,
"name" : "Addition",
"HideInfo" : "n"
},
{
"DiagramY" : -10,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "String arrays are allowed.",
"Formula" : {
"Formula" : "{cc \"tom\", \"dick\", \"harry\"}"
},
"name" : "Arrays"
},
{
"DiagramNotes" : "y",
"DiagramY" : 60,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "The strlen function returns the length of the elements of a string value.",
"Formula" : {
"Formula" : "{strlen Arrays}"
},
"name" : "length"
},
{
"DiagramNotes" : "y",
"DiagramY" : 105,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "Makes all characters uppercase.",
"Formula" : {
"Formula" : "{uppercase Arrays}"
},
"name" : "upperCase"
},
{
"DiagramNotes" : "y",
"DiagramY" : 140,
"DiagramX" : 15,
"Type" : "Expression",
"Notes" : "The join function creates a single string from an array of strings and a separator string.",
"Formula" : {
"Formula" : "{join Arrays, \" and \"}"
},
"name" : "Join"
},
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "Makes all characters lowercase.",
"Formula" : {
"Formula" : "{lowercase upperCase}"
},
"name" : "lowerCase"
},
{
"DiagramNotes" : "y",
"DiagramY" : 55,
"DiagramX" : 110,
"Type" : "Expression",
"Notes" : "The split function separates a string into parts.  If there are just two arguments, the first is the string to split and the second is the character or phrase to split upon.\n\nIf the string has more than one column and more than one row, the result will one row per value of s, with each value split into columns. \n\nAlso an optional third parameter can be supplied, in which case the second parameter is used to separate the columns and the third parameter is used to separate the rows, resulting in a string matrix. In this case, only the first value of the string is used (i.e. element 1,1).",
"Formula" : {
"Formula" : "{split join, \" \"}"
},
"name" : "split"
}
],
"DiagramX" : 105,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : -13.33333301544189,
"diagramX" : -4.666666507720947,
"name" : "Arrays",
"HideInfo" : "n"
},
{
"DiagramNotes" : "y",
"DiagramY" : 30,
"diagramY" : -1.763191819190979,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"DiagramX" : 25,
"Type" : "Expression",
"Notes" : "A matrix of numbers to use with string functions.\n",
"Formula" : {
"Formula" : "-7:7+{tr 1:2}/10"
},
"name" : "Numbers"
},
{
"DiagramNotes" : "y",
"DiagramY" : 65,
"DiagramX" : 25,
"Type" : "Expression",
"Notes" : "Just to confuse things, here an array of format statements is created using a fmt function and a range.  ",
"Formula" : {
"Formula" : "\"%9.\" + {fmt \"%1.0ff\", 1:3}"
},
"name" : "multiFmt"
},
{
"DiagramNotes" : "y",
"DiagramY" : 120,
"DiagramX" : 25,
"Type" : "Expression",
"Notes" : "Here we are creating a row array with different format strings for each column.",
"Formula" : {
"Formula" : "{transpose  {concat \"%10.2f\", \"%10.3f\"}} "
},
"name" : "columnFmt"
},
{
"DiagramNotes" : "y",
"DiagramY" : 25,
"DiagramX" : 105,
"Type" : "Expression",
"Notes" : "Here the fabricated column array of format strings is applied to a matrix of numbers.\n\nSince there are fewer format rows than number rows, the format array is repeated as necessary in the same way that matrix operations work with numbers.",
"Formula" : {
"Formula" : "{fmt multiFmt, numbers, \"%\" } "
},
"name" : "formattedMatrix"
},
{
"DiagramNotes" : "y",
"DiagramY" : 120,
"DiagramX" : 105,
"Type" : "Expression",
"Notes" : "When the row format is used with the number matrix, the individual columns are formatted appropriately.\n",
"Formula" : {
"Formula" : "{fmt columnFmt, numbers } "
},
"name" : "formattedColumns"
},
{
"DiagramNotes" : "y",
"DiagramY" : 230,
"DiagramX" : 195,
"Type" : "Expression",
"Notes" : "The rules for adding different dimension string values are the same as for number values.",
"Formula" : {
"Formula" : "\"X =  \" + formattedColumns"
},
"name" : "matrixAddition"
},
{
"Formula" : {
"Formula" : "{strfind formattedMatrix, \"\\d+\"}"
},
"Type" : "Expression",
"DiagramY" : 10,
"name" : "find",
"Notes" : "The strfind function searches the first argument for the regular expression represented by the second argument.\n\nA numeric matrix is returned, with two columns and one row for each element of the searched value.  The position of the start of the first occurrence of expression will be in the first column and the length in the second column.  If the searched value is a matrix, the order of the results will be row by row.\n\nIf the expression is not found, the position will be a huge value and the length 0.\n\n",
"DiagramX" : 190
},
{
"Formula" : {
"Formula" : "{substr formattedMatrix,\n\tfind[0,1], find[0,2]}"
},
"Type" : "Expression",
"DiagramY" : 45,
"name" : "subString2",
"Notes" : "If the substr function contains a third parameter, it will be used as the length of the sub string.\n\nNote here how the 30 elements of each column of the find expression are used correctly in order with the elements of the 15x2 elements of formattedMatrix.\n",
"DiagramX" : 190
},
{
"Formula" : {
"Formula" : "{join formattedColumns, \"\\t-\\t\"}"
},
"Type" : "Expression",
"DiagramY" : 85,
"name" : "JoinMatrix",
"Notes" : "Joining a matrix will produce a single column array with all the columns joined together.  Here the columns of formattedColumns are joined by a string consisting of two tabs separated by a dash.\n\nGenerate a report from the diagram context menu for this expression to see the results.\n",
"DiagramX" : 195
},
{
"Formula" : {
"Formula" : "{join formattedColumns, \"\t->\t\", \"\n\"}"
},
"Type" : "Expression",
"DiagramY" : 120,
"name" : "Join2",
"Notes" : "With three parameters, the second is used to join columns and the third to join rows.  Note that the third parameter is a newline in quotes.\n\nSame as nested joins",
"DiagramX" : 195
},
{
"Formula" : {
"Formula" : "{match \"\\.\\d*\" formattedColumns }"
},
"Type" : "Expression",
"DiagramY" : 155,
"name" : "Match",
"Notes" : "The match function will return the first string in each string value element, that is matched by a regular expression.  Here the regular expression  designates that a decimal point followed by 0 or more digits is to be matched.",
"DiagramX" : 195
},
{
"Formula" : {
"Formula" : "{replace \"\\d\", \"x\", formattedColumns} "
},
"Type" : "Expression",
"DiagramY" : 195,
"name" : "Replace",
"Notes" : "The replace function returns a string value where each element is transformed by applying a regular expression replacement.  The first parameter is the string to match, while the second is the replacement and the third the source string value.\n\nHere every digit is replaced with the character \"x\".",
"DiagramX" : 195
},
{
"Formula" : {
"Formula" : "{join JoinMatrix, \"\\n\"}"
},
"Type" : "Expression",
"DiagramY" : 85,
"name" : "JoinJoin",
"Notes" : "Using join again to create a single string, with each row separated by a newline character.  Again, use report to see the result\n",
"DiagramX" : 275
},
{
"Formula" : {
"Formula" : "{split join2, \"\t->\t\", \"\n\"}"
},
"Type" : "Expression",
"DiagramY" : 120,
"name" : "split2",
"Notes" : "With three parameters, the second parameter is used to split the string into columns, while the third splits it into rows.",
"DiagramX" : 275
},
{
"Formula" : {
"Formula" : "{indexof \".200\", match}"
},
"Type" : "Expression",
"DiagramY" : 155,
"name" : "indexof",
"Notes" : "The indexOf function works with strings, but it must be an exact match.",
"DiagramX" : 275
},
{
"DiagramNotes" : "y",
"DiagramY" : 195,
"DiagramX" : 275,
"Type" : "Expression",
"Notes" : "Check that strings are equal",
"Formula" : {
"Formula" : "{eq match, \".10\"}"
},
"name" : "equal"
},
{
"DiagramNotes" : "y",
"DiagramY" : 165,
"DiagramX" : 25,
"Type" : "Expression",
"Notes" : "?",
"Formula" : {
"Formula" : "\"Hello World\""
},
"name" : "aString"
},
{
"DiagramNotes" : "y",
"DiagramY" : 205,
"DiagramX" : 25,
"Type" : "Expression",
"Notes" : "With just two parameters, the substr function returns the portion of the string in the first parameter starting at the character position given by the second parameter and continuing to the end of the string.\n\nIf the first parameter has more elements than the second, the second's elements will be reused as necessary.",
"Formula" : {
"Formula" : "{substr aString 7}"
},
"name" : "subString"
},
{
"DiagramNotes" : "y",
"DiagramY" : 205,
"DiagramX" : 105,
"Type" : "Expression",
"Notes" : "If the substr function contains a third parameter, it will be used as the length of the sub string.\n",
"Formula" : {
"Formula" : "{substr aString, 7, 3}\n"
},
"name" : "subString2Copy"
}
],
"DiagramX" : 105,
"Type" : "Model",
"Notes" : "Illustrates the use of a number of string functions.  See the function browser for a complete list.",
"diagramScale" : 2.428124904632568,
"diagramX" : -15,
"name" : "Examples",
"HideInfo" : "n"
}
],
"DiagramX" : 95,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 3,
"diagramX" : -20,
"name" : "Strings",
"HideInfo" : "n"
},
{
"diagramY" : 113.4272232055664,
"DiagramY" : 70,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 5,
"Type" : "Expression",
"Notes" : "The complex function is used to create a table value representing an array of complex numbers.  The \"r\" column is the real component and the \"i\" column is the imaginary one.\n\nThis is a nice representation, but any two column numeric can be used as a complex number.",
"Formula" : {
"Formula" : " {complex -5:5, -5:5^2}"
},
"name" : "CValue"
},
{
"DiagramNotes" : "y",
"DiagramY" : -90,
"DiagramX" : 95,
"Type" : "Expression",
"Notes" : "complex sin",
"Formula" : {
"Formula" : "{csin cvalue}"
},
"name" : "csin"
},
{
"DiagramNotes" : "y",
"DiagramY" : -55,
"DiagramX" : 95,
"Type" : "Expression",
"Notes" : "Use cmult to multiply cvalue by itself.\n",
"Formula" : {
"Formula" : "{cmult cvalue, cvalue}"
},
"name" : "cmult"
},
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"tableUnits" : {
"2" : "degree"
},
"DiagramX" : 95,
"Type" : "Expression",
"Notes" : "The polar function is used to convert CValue into polar coordinates.\n\nNote that the units for the second column have been set to degrees, by clicking on the column header and then clicking the button beside the unit line and selecting the unit from the unit browser.\n\nAlso note there is no valid angle when converting 0, 0 to polar.",
"Formula" : {
"Formula" : "{polar CValue}"
},
"name" : "Polar"
},
{
"DiagramNotes" : "y",
"DiagramY" : -55,
"DiagramX" : 170,
"Type" : "Expression",
"Notes" : "Use cpow to take the square root of cmult and retrieve cvalue.\n\nIn this case the exponent is a real, but it can also be a complex value as well.",
"Formula" : {
"Formula" : "{cpow cmult, 0.5}"
},
"name" : "sqrt"
},
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"tableUnits" : {},
"DiagramX" : 170,
"Type" : "Expression",
"Notes" : "The cart function is used to transform the polar version of CValue back into cartesian coordinates.\n\nBecause the angle corresponding to the original 0, 0 coordinate was invalid, the conversion back is also invalid.\n\nThe term nan stands for Not A Number.",
"Formula" : {
"Formula" : "{cart polar}"
},
"name" : "Cartesian"
},
{
"DiagramNotes" : "y",
"DiagramY" : -130,
"X1" : {
"v" : "Cvalue.r",
"Y1" : {
"v" : "Cvalue.i",
"lineType" : 0
}
},
"DiagramX" : 95,
"Type" : "Graph",
"Notes" : "A plot of CValue's imaginary component versus its real one.",
"name" : "Plot"
},
{
"DiagramNotes" : "y",
"DiagramY" : -130,
"DiagramX" : 10,
"Type" : "Expression",
"Notes" : "Complex numbers in Math Minion are represented by either a matrix or table value with two columns, the first column being the real component and the second the imaginary one.\n\n All complex value functions return table values with the first column labeled r and the second labeled i.\n\nBe sure to check out the Complex Numbers section of the function browser as well as the Complex Number help page that it links to.\n",
"Formula" : {
"Formula" : "{complex 1, 2}"
},
"name" : "Complex"
}
],
"DiagramX" : 95,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 2.915430307388306,
"diagramX" : 9.476582527160645,
"name" : "Complex",
"HideInfo" : "n"
},
{
"DiagramY" : 90,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"Objects" : [
{
"DiagramNotes" : "y",
"DiagramY" : 20,
"isOutput" : "y",
"DiagramX" : 65,
"Type" : "Expression",
"Notes" : "Just a value to return. In this case it uses the pi function to calculate 2pi.",
"Formula" : {
"Formula" : "{pi}*2"
},
"name" : "twoPi"
}
],
"DiagramX" : 115,
"Type" : "Model",
"Notes" : "Another sub-model, which in turn just contains an expression with a value of 2 times pi.\n\nThis expression is designated as an outlet expression so that the parent model can access it.",
"diagramScale" : 3,
"diagramX" : -55,
"name" : "subModel",
"diagramY" : -13.33333301544189
},
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"isOutput" : "y",
"DiagramX" : 190,
"Type" : "Expression",
"Notes" : "This expression is also designated as an output and its formula is simply the name of the sub-model.\n\nThis allows the sub-model itself to be accessed by the parent model of this model.",
"Formula" : {
"Formula" : "subModel"
},
"name" : "sub"
}
],
"DiagramX" : 15,
"Type" : "Model",
"Notes" : "This  model demonstrates the use of tool paths and tool references.\n\nIt contains yet another model, which in turn just contains an expression with a value of 2 times pi.\n\nThis expression is designated as an outlet expression so that the parent model can access it.\n\nThe expression \"sub\" in this model is also designated as an output and its formula is simply the name of the sub-model.\n\nThis allows the sub-model itself to be accessed by the parent model of this model.\n\nSee the \"Reference\" expression  for an example of referencing these tools.",
"diagramScale" : 3,
"diagramX" : -105,
"name" : "aModel",
"diagramY" : -8.333333015441895
},
{
"DiagramNotes" : "y",
"DiagramY" : 15,
"DiagramX" : 105,
"Type" : "Expression",
"Notes" : "The formula for this expression is:\n\naModel.sub.twoPi\n\nwhich first accesses the sub output expression of \"aModel\" and then the twoPi output expression of the model which \"sub\" references.\n\nYou can use the value browser when you are editing a formula to drill down through tools to the desired tool and parameter and have it inserted into the formula.",
"Formula" : {
"Formula" : "aModel.sub.twoPi"
},
"name" : "Reference"
}
],
"DiagramX" : 95,
"diagramScale" : 3,
"Type" : "Model",
"diagramY" : -8.333333015441895,
"diagramX" : -5,
"name" : "References",
"HideInfo" : "n"
}
],
"DiagramX" : -5,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 3,
"diagramX" : 0,
"name" : "Other_Values",
"HideInfo" : "n"
}
],
"DiagramX" : 145,
"Type" : "Model",
"Notes" : "",
"diagramScale" : 3,
"diagramX" : 85,
"name" : "Formulas",
"HideInfo" : "n"
}
],
"DiagramX" : -12321,
"diagramScale" : 3,
"Type" : "Model",
"Notes" : "",
"diagramX" : -55,
"name" : "Root",
"diagramY" : 46.66666666666666
},
"DeviceWidth" : 639,
"DetailWidth" : 375
}
