{
	"Program": "Rtm",
	"Version": 3,
	"DetailWidth": 320,
	"DeviceWidth": 1024,
	"UserUnitSets": {},
	"UserUnits": [],
	"CaseName": "htmlPage",
	"DefaultUnitSet": "SI",
	"SelectedObject": "testPage",
	"ModelPath": "/.root",
	"RootModel": {
		"name": "root",
		"Notes": "",
		"DiagramX": 0,
		"DiagramY": 0,
		"HideInfo": "n",
		"DiagramNotes": "n",
		"Type": "Model",
		"diagramScale": 1,
		"Objects": [
			{
				"name": "css",
				"Notes": "Cascading style sheet code for the HTML page.",
				"DiagramX": 195,
				"DiagramY": 245,
				"HideInfo": "y",
				"DiagramNotes": "y",
				"Type": "Expression",
				"Formula": {
					"Formula": "'\nbody {\n\tbackground-color: #EEFFEE;\n}\n\n\n/* Tables\n * --------------------------------------------------------------------- */\n\n\ttable {\n\t\tborder-top:     0px solid #ddd;\n\t\tborder-left:    0px solid #ddd;\n\t\tmargin-top: 0px;\n\t\tmargin-bottom: 0.5em;\n\t\twidth:300px;\n\t\tfont-size: x-large;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t}\n\tth,td {\n\t\tborder-bottom:  0px solid #ddd;\n\t\tborder-right:   0px solid #ddd;\n\t\tvertical-align: top;\n\t}\n/* Default Classes\n * --------------------------------------------------------------------- */\n\n\tp.title, a.title, div.title {\n\t\tcolor: #040;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t\tfont-size: 2.0em;\n\t\ttext-align: center;\n\t}\n\n\tp.subtitle {\n\t\tcolor: #040;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t\tfont-size: 1.1em;\n\t}\n\t\n\t.explain {\n\t\tcolor: #000;\n\t\tfont-size: 1.2em;\n\t}\n\t\n\t.explain a {\n\t\tcolor: blue;\n\t\ttext-decoration: underline;\n\t}\n\t\n\t.html {\n\t\tcolor: navy;\n\t\tfont-weight: bold;\n\t}\n\t\n\t.htmlresult {\n\t\tcolor: navy;\n\t\tfont-weight: bold;\n\t}\n\t\n\t.center {\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\twidth=320px;\n\t\ttext-align: center;\n\t}\n\t\n\t.input {\n\t\twidth: 100%;\n\t\tfont-size: large;\n\t}\n\tbutton {\n\t\tfont-size: large;\n\t\tmargin-left: 10px;\n\t\tmargin-right: 10px;\n\t\twidth: 120px;\n\t}\n\n\t.result {\n\t\ttext-align: center;\n\t\tfont-size: x-large;\n\t}\t\t\n\n\t.indent {\n\t\tmargin-left: 1\n\t\tem;\n\t}\n\t\n\t.buttonrow {\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\twidth: 300px;\n\t\ttext-align: center;\n\t}"
				}
			},
			{
				"name": "testPage",
				"Notes": "",
				"DiagramX": 195,
				"DiagramY": 200,
				"HideInfo": "y",
				"DiagramNotes": "y",
				"Type": "HTML Form",
				"Formula": {
					"Formula": "'\n<html lang=\"en\">\n\t<head>\n\t\t<title>HTML Pages</title>\n\t\t<meta name=\"viewport\" content=\"initial-scale=1.0\">\n\t\t<style>\n\t\t\tbody {color: white}\n\t\t\t<mm>css</mm>\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<p class=\"title\">HTML Pages</p>\n\t\t<div class=\"explain\">\n\t\t\t<p>\n\t\t\t\tMath Minion HTML page tools provide a way to present customized input and result views.  These can be used to simplify your own tasks, or to create calculation sheets that present a simpler interface for non-technical users.  The page you are reading is itself an  HTML page tool.\n\t\t\t</p>\n\t\t\t<p>Some button tests</p>\n\t\t\t<p>\n\t\t\t<input id=\"in1\" type=\"text\" value=\"<mm>$.in1</mm>\"/>\n\t\t\t<button onClick=\"mmpost(['in1']);\">Input 1</button>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t<button onClick=\"mmpost({'in2': [[1,2],[3,4],[5,6],[7,8]]})\">\n\t\t\t\tNumber table\n\t\t\t</button>\n\t\t\t<button onClick=\"mmpost({'in2': [['a','b'],['c','d'],['e','f'],['g','h']]})\">\n\t\t\t\tString table\n\t\t\t</button>\n\t\t\t<button onClick=\"mmpost({'in2': null})\">\n\t\t\t\tDelete table\n\t\t\t</button>\n\n\t\t\t</p>\n\t\t\t<p><mm>$.in2</mm></p>\n\t\t\t<p>\n\t\t\t\tClick on the link below to switch to another page\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tSee <a onClick=\"mmpost({},{mm_push: 'page2'})\">Page 2</a>.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tSee <a onClick=\"mmpost({},{mm_clear: true, mm_update: true})\">Clear Assigned</a>.\n\t\t\t</p>\n\t\t</div>\n\t</body>\n</html>"
				},
				"inputs": {
					"in2": [
						[
							"a",
							"b"
						],
						[
							"c",
							"d"
						],
						[
							"e",
							"f"
						],
						[
							"g",
							"h"
						]
					],
					"in1": 123
				},
				"f0": "css",
				"f1": "$.in1",
				"f2": "$.in2"
			},
			{
				"name": "htmlIn1",
				"Notes": "",
				"DiagramX": 275,
				"DiagramY": 230,
				"HideInfo": "y",
				"DiagramNotes": "n",
				"Type": "Expression",
				"Formula": {
					"Formula": "testPage.in1"
				}
			},
			{
				"name": "htmlIn2",
				"Notes": "",
				"DiagramX": 275,
				"DiagramY": 255,
				"HideInfo": "y",
				"DiagramNotes": "n",
				"Type": "Expression",
				"Formula": {
					"Formula": "testPage.in2"
				}
			},
			{
				"name": "webapp",
				"Notes": "It is possible for javascript to call a function to initiate a Math Minion calculation without having to rerender the html.  This model contains an example demonstrating this feature.",
				"DiagramX": 195,
				"DiagramY": 330,
				"HideInfo": "n",
				"DiagramNotes": "y",
				"Type": "Model",
				"diagramScale": 1,
				"Objects": [
					{
						"name": "JSForm",
						"Notes": "An HTML page that implements a very simple calculator having Math Minion perform calculations without reloading the html page.\n\nRead through the comments in the html to see how it works.",
						"DiagramX": 170,
						"DiagramY": 40,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "HTML Form",
						"Formula": {
							"Formula": "'<html lang=\"en\"> \n\t<head>\n\t\t<title>mmcalc Example</title>\n\t\t<meta name=\"viewport\" content=\"initial-scale=1.0\">\n\t\t<script  type=\"text/javascript\">\n\t\t\tfunction calc(op) {  // this function is called each time one of the buttons is pressed\n\t\t\t\tlet a = document.getElementById('a').value;\t// the value of the input field with id 'a' is retrieved\n\t\t\t\tconsole.log(`a ${a}`);\n\t\t\t\tif (!a) {\n\t\t\t\t\ta = '1';\t\t\t// set it to one if absent - brain dead error avoidance\n\t\t\t\t}\n\t\t\t\ta = parseFloat(a)\t\t// convert the text into a number\n\n\t\t\t\tvar b = document.getElementById('b').value;\t// get the b value as well\n\t\t\t\tif (!b) b = '2';\n\t\t\t\tb = parseFloat(b);\n\n\t\t\t\t // create a dictionary of names and values that will be assigned as parameter values\n\t\t\t\t// to the html page tool\n\t\t\t\tvar assignments = { 'a': a, 'b':b  }; \n\n\t\t\t\t// create a second dictionary of formulas that will be evaluated by the html page\n\t\t\t\t// the names will be the keys in the returned dictonary of results\n\t\t\t\t// in this case the formula is the parameter passed by the button pressed and is\n\t\t\t\t// just the name of the expression object whose value is wanted\n\t\t\t\tvar requests = {'x': op };\n\t\t\t\t\n\t\t\t\t// call mmpost with the assignments and requests dictionary and a call back function\n\t\t\t\t// that will be evaluated when the requests have been calculated.\n\t\t\t\t// The call back function takes a single argument, which is a dictionary of requested results\n\t\t\t\tmmpost( assignments, requests, function(results) {\n\t\t\t\t\tlet x = results.x;\t\t// get the result corresponding to the request name 'x'\n\t\t\t\t\tif ( x != null )\n\t\t\t\t\t\tdocument.getElementById('a').value = x;\t\t// assign it to the 'a' input field\n\t\t\t\t} );\n\t\t\t}\n\n\t\t</script>\n\t\t<!-- some cosmetic stuff -->\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tbackground-color: #EEFFEE;\n\t\t\t\tfont-size: 20pt;\n\t\t\t}\n\t\t\tinput {\n\t\t\t\tfont-size: 14pt;\n\t\t\t}\n\t\t\ttable {\n\t\t\t\twidth: 310px;\n\t\t\t}\n\t\t\t.note {\n\t\t\t\tfont-size: 14pt;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<!-- The two input fields.\n\t\t-->\n\t\t<p>\n\t\t\ta:\n\t\t\t<input type=\"text\" id=\"a\" value=\"<mm>$.a</mm>\">\n\t\t\t<!-- The mm tag is used to fill in previous values when the html page is first rendered.  The mm tags don't\n\t\t\t\tchange as we use the callback, but the input values can be overwritten by javascript.\n\t\t\t-->\n\t\t</p>\n\t\t<p>\n\t\t\tb:\n\t\t\t<input type=\"text\" id=\"b\" value=\"<mm>$.b</mm>\">\n\t\t</p>\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<!-- Buttons for the arithmetic operators.  When pressed each will call the calc function\n\t\t\t\t\tand pass the name of the appropriate expression operation\n\t\t\t\t-->\n\t\t\t\t<td><input id=\"input\" type=\"button\" class=\"button\" onclick=\"calc('plus');\" value=\"+\"></td>\n\t\t\t\t<td><input id=\"input\" type=\"button\" onclick=\"calc('minus');\" value=\"-\"></td>\n\t\t\t\t<td><input id=\"input\" type=\"button\" onclick=\"calc('times');\" value=\"*\"></td>\n\t\t\t\t<td><input id=\"input\" type=\"button\" onclick=\"calc('divide');\" value=\"/\"></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<p class=\"note\">\n\t\t\tPressing a key performs that operation between <b>a</b> and <b>b</b> and places the result in <b>a</b>.\n\t\t</p>\n\t</body>\n</html>"
						},
						"inputs": {
							"a": 14,
							"b": 2
						},
						"f0": "$.a",
						"f1": "$.b"
					},
					{
						"name": "times",
						"Notes": "       Calculates a * b",
						"DiagramX": 350,
						"DiagramY": 100,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "a*b"
						}
					},
					{
						"name": "a",
						"Notes": "Retrieves the 'a' value from the form object.",
						"DiagramX": 255,
						"DiagramY": 40,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "jsform.a"
						}
					},
					{
						"name": "b",
						"Notes": "Retrieves the 'b' value from the form object.",
						"DiagramX": 255,
						"DiagramY": 80,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "jsform.b"
						}
					},
					{
						"name": "minus",
						"Notes": "       Calculates a - b",
						"DiagramX": 350,
						"DiagramY": 70,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "a-b"
						}
					},
					{
						"name": "plus",
						"Notes": "       Calculates a + b",
						"DiagramX": 350,
						"DiagramY": 40,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "a+b"
						}
					},
					{
						"name": "divide",
						"Notes": "       Calculates a / b",
						"DiagramX": 350,
						"DiagramY": 130,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "a/b"
						}
					},
					{
						"name": "nMatrix",
						"Notes": "",
						"DiagramX": 170,
						"DiagramY": 185,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"Type": "Expression",
						"Formula": {
							"Formula": "{array 4, 2, 1:8}"
						}
					},
					{
						"name": "sMatrix",
						"Notes": "",
						"DiagramX": 170,
						"DiagramY": 210,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"Type": "Expression",
						"Formula": {
							"Formula": "{array 4, 2,\n\t{cc\n\t\"one\", \"two\",\n\t\"three\", \"four\",\n\t\"five\", \"six\",\n\t\"seven\", \"eight\"\n\t}\n}"
						}
					},
					{
						"name": "nArray",
						"Notes": "",
						"DiagramX": 170,
						"DiagramY": 235,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"Type": "Expression",
						"Formula": {
							"Formula": "11:14 * 3.3"
						}
					},
					{
						"name": "sArray",
						"Notes": "",
						"DiagramX": 170,
						"DiagramY": 260,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"Type": "Expression",
						"Formula": {
							"Formula": "{cc\n\t\"one\", \"two\",\n\t\"three\", \"four\",\n\t\"five\", \"six\",\n\t\"seven\", \"eight\"\n}"
						}
					},
					{
						"name": "requests",
						"Notes": "This page illustrates requesting MM values and processing them in a call back.",
						"DiagramX": 170,
						"DiagramY": 155,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"Type": "HTML Form",
						"Formula": {
							"Formula": "'<html lang=\"en\">\n<head>\n\t<meta charset=\"utf-8\" />\n\t<style>\n\t\tbody {\n\t\t\tbackground-color: white;\n\t\t}\n\t\t#results {\n\t\t\theight: 500px;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<textarea id=\"results\">\n\t\tplaceholder\n\t</textarea>\n\t</div>\n\t<script>\n\t\tmmpost({},{nM: 'nMatrix', sM: 'sMatrix', nA: 'nArray', sA: 'sArray'},(result) => {\n\t\t\tconst target = document.getElementById('results');\n\t\t\tconst stringForM = (name) => {\n\t\t\t\tconst value = result[name];\n\t\t\t\tlet rCount = value.length;\n\t\t\t\tlet cCount = value[0].length;\n\t\t\t\tconst rows = [];\n\t\t\t\tfor (let r = 0; r < rCount; r++) {\n\t\t\t\t\tconst cols = [];\n\t\t\t\t\tfor (let c = 0; c < cCount; c++) {\n\t\t\t\t\t\tcols.push(`${value[r][c]}`);\n\t\t\t\t\t}\n\t\t\t\t\trows.push(cols.join(' '));\n\t\t\t\t}\n\t\t\t\treturn `${name} is ${rCount}x${cCount}\\n` + rows.join('\\n') + '\\n';\n\t\t\t}\n\t\t\tconst stringForA = (name) => {\n\t\t\t\tconst value = result[name];\n\t\t\t\tlet rCount = value.length;\n\t\t\t\tconst rows = [];\n\t\t\t\tfor (let r = 0; r < rCount; r++) {\n\t\t\t\t\trows.push(`${value[r]}`);\n\t\t\t\t}\n\t\t\t\treturn `${name} has ${rCount} values}\\n` + rows.join('\\n') + '\\n';\n\t\t\t}\n\n\t\t\ttarget.value = stringForM('nM') + stringForM('sM')\n\t\t\t\t+ stringForA('nA') + stringForA('sA');\n\t\t})\n\t</script>\n</body>\n</html>"
						},
						"f0": "css"
					}
				]
			},
			{
				"name": "page2",
				"Notes": "",
				"DiagramX": 275,
				"DiagramY": 295,
				"HideInfo": "y",
				"DiagramNotes": "n",
				"Type": "HTML Form",
				"Formula": {
					"Formula": "'\n<style>\n\tbody {\n\t\tbackground-color: white;\n\t}\n</style>\n<p>This is a second page.</p>\n<p>\n\t<button onClick=\"mmpost({},{mm_push: 'css'})\">CSS</button>\n</p>\n<p>\n\t<button onClick=\"mmpost({},{mm_view: 'htmlIn2'})\">View htmlIn2</button>\n</p>\n<p>\n\t<button onClick=\"mmpost({},{mm_refresh: 'htmlIn1'})\">Refresh htmlIn1</button>\n</p>\n<p>\n\t<button onClick=\"mmpost({},{mm_load: 'junk'})\">Load junk</button>\n</p>\n<p>\n\t<button onClick=\"mmpost({},{mm_junk: 'junk'})\">Bad Action</button>\n</p>"
				}
			},
			{
				"name": "BMI",
				"Notes": "",
				"DiagramX": 280,
				"DiagramY": 335,
				"HideInfo": "n",
				"DiagramNotes": "n",
				"Type": "Model",
				"diagramScale": 1,
				"Objects": [
					{
						"name": "css",
						"Notes": "Cascading style sheet code for the HTML form.",
						"DiagramX": 210,
						"DiagramY": 255,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "Expression",
						"Formula": {
							"Formula": "'\nbody {\n\tbackground-color: #EEFFEE;\n}\n\n\n/* Tables\n * --------------------------------------------------------------------- */\n\n\ttable {\n\t\tborder-top:     0px solid #ddd;\n\t\tborder-left:    0px solid #ddd;\n\t\tmargin-top: 0px;\n\t\tmargin-bottom: 0.5em;\n\t\twidth:300px;\n\t\tfont-size: x-large;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t}\n\tth,td {\n\t\tborder-bottom:  0px solid #ddd;\n\t\tborder-right:   0px solid #ddd;\n\t\tvertical-align: top;\n\t}\n/* Default Classes\n * --------------------------------------------------------------------- */\n\n\tp.title, a.title, div.title {\n\t\tcolor: #040;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t\tfont-size: 2.0em;\n\t\ttext-align: center;\n\t}\n\n\tp.subtitle {\n\t\tcolor: #040;\n\t\tfont-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t\tfont-size: 1.1em;\n\t}\n\t\n\t.explain {\n\t\tcolor: #000;\n\t\tfont-size: 1.2em;\n\t}\n\t\n\t.explain a {\n\t\tcolor: blue;\n\t\ttext-decoration: underline;\n\t}\n\t\n\t.html {\n\t\tcolor: navy;\n\t\tfont-weight: bold;\n\t}\n\t\n\t.htmlresult {\n\t\tcolor: navy;\n\t\tfont-weight: bold;\n\t}\n\t\n\t.center {\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\twidth=320px;\n\t\ttext-align: center;\n\t}\n\t\n\t.input {\n\t\twidth: 100%;\n\t\tfont-size: large;\n\t}\n\tbutton {\n\t\tfont-size: large;\n\t\tmargin-left: 10px;\n\t\tmargin-right: 10px;\n\t\twidth: 120px;\n\t}\n\n\t.result {\n\t\ttext-align: center;\n\t\tfont-size: x-large;\n\t}\t\t\n\n\t.indent {\n\t\tmargin-left: 1\n\t\tem;\n\t}\n\t\n\t.buttonrow {\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\twidth: 300px;\n\t\ttext-align: center;\n\t}"
						}
					},
					{
						"name": "Weight",
						"Notes": "A table of previous weights.",
						"DiagramX": 205,
						"DiagramY": 220,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "Data Table",
						"Columns": [
							{
								"name": "Date",
								"displayUnit": "date",
								"nValues": [
									1354320000,
									1354406400,
									1354492800,
									1354579200,
									1354665600,
									1354752000,
									1354838400,
									1354924800,
									1355011200,
									1355097600,
									1355184000,
									1355270400,
									1355356800,
									1355443200,
									1355529600,
									1355616000,
									1355702400,
									1355788800,
									1355875200,
									1355961600,
									1356048000,
									1356134400,
									1356220800,
									1356307200,
									1356393600,
									1356480000,
									1356566400,
									1356652800,
									1356739200,
									1356825600,
									1356912000,
									1356998400,
									1357084800,
									1357171200,
									1357257600,
									1357344000,
									1357430400,
									1357516800,
									1357603200,
									1357689600,
									1357776000,
									1357862400,
									1357948800,
									1358035200,
									1358121600,
									1358208000,
									1358294400,
									1606003200
								],
								"unitDimensions": "0 0 1 0 0 0 0",
								"defaultValue": "{mktime {int {date {now}}}}"
							},
							{
								"name": "Weight",
								"displayUnit": "kg",
								"nValues": [
									85.8,
									86,
									86,
									86,
									86.2,
									85.59999999999997,
									86,
									85.59999999999997,
									86,
									86.59999999999997,
									85.8,
									86,
									85.8,
									86,
									86.2,
									86,
									86.40000000000003,
									86.40000000000003,
									86.40000000000003,
									86.2,
									86.59999999999997,
									86.8,
									86.2,
									85.2,
									85.2,
									86,
									86.2,
									86,
									86.59999999999997,
									86.59999999999997,
									86.59999999999997,
									86.8,
									87.2,
									86.8,
									86.8,
									86.40000000000003,
									86.59999999999997,
									86.8,
									87.2,
									87.2,
									86.59999999999997,
									86.8,
									86.8,
									86.2,
									86.40000000000003,
									86.40000000000003,
									85.59999999999997,
									78
								],
								"unitDimensions": "0 1 0 0 0 0 0",
								"defaultValue": "{eval bmi.weight}"
							}
						]
					},
					{
						"name": "BMI",
						"Notes": "            BMI Form",
						"DiagramX": 290,
						"DiagramY": 300,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "HTML Form",
						"Formula": {
							"Formula": "'<html lang=\"en\">\n\t<head>\n\t\t<title>Your BMI</title>\n\t\t<meta name=\"viewport\" content=\"initial-scale=1.0\">\n\t\t<style>\n\t\t\t<mm>css</mm>\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<p class=\"title\">Your BMI</p>\n\t\t<table class=\"center\">\n\t\t\t<tr><td><span class=\"rowlabel\">Weight</span></td>\n\t\t\t\t<td><input type=\"text\" id=\"weight\" value=\"<mm>$.weight</mm>\" class=\"input\"></td>\n\t\t\t</tr>\n\t\t\t<tr><td><span class=\"rowlabel\">Height</span>\n\t\t\t\t<td><input type=\"text\" id=\"height\" value=\"<mm>$.height</mm>\" class=\"input\"></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<div class=\"center\">\n\t\t\t<button value=\"Calculate\"\n\t\t\t\tonClick=\"mmpost(['weight', 'height']);\"\n\t\t\t\ttitle=\"Submit the inputs to calculate BMI\">Calculate</button>\n\t\t\t<button id=\"mm_addrow\" onClick=\"mmpost(['weight'],{mm_addrow: 'weight'})\"\n\t\t\t\ttitle=\"Add weight to the Weight data table\">Record</button>\n\t\t</div>\n\t\t<p class=\"result\">\n\t\t\tBMI = <mm>BMICalc.BMI</mm><br>\n\t\t\tLast Recorded = <mm>{fmt \"%8.0f\", weight[{nrows weight}, \"date\"], \"date\"}</mm>\n\t\t</p>\n\t\t<div class=\"buttonrow moveup\">\n\t\t\t<button class=\"menubutton\" onclick=\"mmpost({},{mm_push: 'WeightPlot'});\"\n\t\t\t\ttitle=\"Plot the weight record\">Plot</button>\n\t\t</div>\n\t\t<div class=\"buttonrow\">\n\t\t\t<p><button class=\"menubutton\" onclick=\"mmpost({},{mm_view: 'HTMLExtensions'});\"\n\t\t\t\ttitle=\"Switch to the HTML Extensions page\">Extensions</button></p>\n\t\t</div>\n\t</body>\n</html>"
						},
						"inputs": {
							"weight": "78 kg",
							"height": "6 ft + 1 in"
						},
						"f0": "css",
						"f1": "$.weight",
						"f2": "$.height",
						"f3": "BMICalc.BMI",
						"f4": "{fmt \"%8.0f\", weight[{nrows weight}, \"date\"], \"date\"}"
					},
					{
						"name": "BMICalc",
						"Notes": "This is a model which calculates body mass index, which is weight in kg divided by height, in m, squared.\n\nThe result is calculated as a dimensionless value so it is displayed correctly, regardless of display units.",
						"DiagramX": 290,
						"DiagramY": 350,
						"HideInfo": "n",
						"DiagramNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "Weight",
								"DiagramX": 10,
								"DiagramY": 35,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"Type": "Expression",
								"Formula": {
									"Formula": "{eval BMI.weight}"
								},
								"isInput": "y",
								"displayUnit": "kg"
							},
							{
								"name": "Height",
								"DiagramX": 10,
								"DiagramY": 70,
								"HideInfo": "y",
								"DiagramNotes": "n",
								"Type": "Expression",
								"Formula": {
									"Formula": "{eval BMI.height}"
								},
								"isInput": "y",
								"displayUnit": "m"
							},
							{
								"name": "BMI",
								"Notes": "Calculates weight in kg over height in m squared.\n\nUnits are used to make this dimensionless, so its value is the same regardless of display units.",
								"DiagramX": 105.6667022705078,
								"DiagramY": 49.66667175292969,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "weight/1\"kg\" /\n(height/1\"m\")^2"
								},
								"isOutput": "y"
							}
						]
					},
					{
						"name": "WeightPlot",
						"Notes": "Plot of previous weights.",
						"DiagramX": 295,
						"DiagramY": 220,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "Graph",
						"X1": {
							"v": "Weight.date 'Date",
							"vmin": "",
							"vmax": "",
							"unit": "date",
							"Y1": {
								"v": "Weight.Weight 'Weight",
								"vmin": "",
								"vmax": "",
								"lineType": 0
							}
						}
					},
					{
						"name": "HTMLExtensions",
						"Notes": "Math Minion's HTML Extensions",
						"DiagramX": 380,
						"DiagramY": 255,
						"HideInfo": "y",
						"DiagramNotes": "y",
						"Type": "HTML Form",
						"Formula": {
							"Formula": "'<html lang=\"en\">\n\t<head>\n\t\t<title>HTML Extensions</title>\n\t\t<meta name=\"viewport\" content=\"initial-scale=1.0\">\n\t\t<style>\n\t\t\t<mm>css</mm>\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<p class=\"title\">HTML Extensions</p>\n\t\t<form action=\"BMI\" method=\"POST\" id=\"bmi\"></form>\n\t\t<div class=\"explain\">\n\t\t\t<p class=\"subtitle\">The <b>&lt;mm&gt;</b> Tag</p>\n\t\t\t<div class=\"indent\">\n\t\t\t\t<p>\t\n\t\t\t\t\t Special <b>&lt;mm&gt;</b> tags containing Math Minion formulas can be embedded within the HTML and these tags will be replaced with the results of evaluating the formulas before the HTML is rendered.  For instance the code:\n\t\t\t\t</p>\n\t\t\t\t<p class=\"html\">\n\t\t\t\t\t&lt;p&gt; &lt;mm&gt;weight[1,\"weight\"]&lt;/mm&gt; &lt;/p&gt;\n\t\t\t\t</p>\n\t\t\t\t<p>in this page produces the result:</p>\n\t\t\t\t<p class=\"htmlresult\"><mm>weight[1,\"weight\"]</mm></p>\n\t\t\t\t<p>\n\t\t\t\t\twhich is the value in the first row and the \"weight\" column of the data table named <b>weight</b>.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<p class=\"subtitle\">JavaScript</p>\t\n\t\t\t<div class=\"indent\">\n\t\t\t\t<p>\n\t\t\t\t\tYou can include Javascript in the HTML and <b>JQuery</b> is supported without a net connection by including the following in the head section:\n\t\t\t\t</p>\n\t\t\t\t<p class=\"html\">\n\t\t\t\t\t&lt;script type=\"text/javascript\" src=\"jquery.js\"&gt;&lt;/script&gt;\n\t\t\t\t</p>\n\t\t\t</div>\t\t\t\t\t\n\t\t\t<p class=\"subtitle\">Form Tag Actions</p>\t\n\t\t\t<div class=\"indent\">\t\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tAn HTML page tool can be the action target of form tags with POST methods.  If the form contains named input values, these will become string values available as parameters of the target HTML page.  The <b>BMI</b> object in this model has a form tag whose action is <b>\"$\"</b> (in other words itself) and the form has input values named \"weight\" and \"height\".  After the form has been submitted, a formula using <b>bmi.height</b> would obtain the string value entered in the \"height\" input field of the form. This is currently <b>\"<mm>bmi.height</mm>\"</b>.\n\t\t\t\t</p>\t\n\t\t\t\t<p>\n\t\t\t\t\tThese posted values are retained by the HTML page tools when sessions are saved, so the page will always have the last inputs posted to it.  If a post made to the page has no named inputs, then the previous inputs will be retained.\n\t\t\t\t</p>\n\t\t\t\t<p>The link on the <b>Explanation</b> page which loads this page, used an empty form coded as:\n\t\t\t\t</p>\n\t\t\t\t<p class=\"html\">\n\t\t\t\t\t&lt;form action=\"HTMLExtensions\" method=\"POST\" id=\"htmlext\"&gt;&lt;/form&gt;\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tand an anchor tag coded as:\n\t\t\t\t</p>\n\t\t\t\t<p class=\"html\">\n\t\t\t\t\t&lt;a onclick=\"$('#htmlext').submit();\"&gt;HTML extensions&lt;/a&gt;\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThis makes use of the onclick attribute to submit the form using JQuery functions.  However you cannot use the JQuery <b>post</b> function to invoke a MM HTML form object.  It must be a form submission.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<p class=\"subtitle\">Viewing Non-Form Objects</p>\t\n\t\t\t<div class=\"indent\">\t\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tIf the action of a form tag is a Math Minion tool that is not an HTML page, then the view for that tool is simply pushed overtop of the html page and pressing the back button will return to the original page.  Using javascript to assign an tool's name, prepended by \"mm_\" (e.g \"mm_HTMLExtensions\") to <b>window.location</b> has the same effect.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<p class=\"subtitle\">Adding Rows to a Data Table</p>\n\t\t\t<div class=\"indent\">\n\t\t\t\t<p>\n\t\t\t\t\tIf an input value, probably hidden, to a form has the name <b>mm_addrow</b>, then its value is taken as the name of a data table in the model and a new row is added to the end of that data table.  This is done after the HTML page that is the action of the form tag has been updated with any other inputs.  If the data table that is having the row added references these inputs either directly or indirectly in its initial value formulas, then the values of the new row can result from the input of the form.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tWhen the <b>Record</b> button on the <b>BMI</b> form is tapped, the weight input in the form is added to the <b>Weight</b> data table using this method.  Note that form inputs are always strings, so the <b>eval</b> function is used to evaluate them as formulas.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<p class=\"subtitle\">Forcing a Recalculation</p>\t\n\t\t\t<div class=\"indent\">\n\t\t\t\t<p>\n\t\t\t\t\tWhen a Math Minion tool calculates new values, it normally remembers those until one of its inputs changes or a new session is loaded.  However in some circumstances, such as an expression which has read input from the web using the <b>wget</b> function, you may want a tool to forget its retained value and recalculate it.  If a form input has the name <b>mm_refresh</b>, then its value is assumed to be a tool name and any retained value for that tool is forgotten and recalculated.\n\t\t\t\t</p> \n\t\t\t</div>\t\t\t\t\t\n\t\t\t<p class=\"subtitle\">Loading a Different Session</p>\t\n\t\t\t<div class=\"indent\">\n\t\t\t\t<p>\n\t\t\t\t\tYou may want to break some activities up into different sessions, but still be able to access them directly from the HTML page.  If a form input has the name <b>mm_load</b>, then Math Minion will attempt to load a session with the name of that input's value.\n\t\t\t\t</p>\n\t\t\t</div>\t\t\t\t\t\n\t\t\t<p class=\"subtitle\">Net Communication</p>\t\n\t\t\t<div class=\"indent\">\t\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tYou can use absolute URLs to access net based servers to load net resources, submit forms, or with javascript functions, as on any ordinary web page.  Of course you will have to have to be online for this to work.\n\t\t\t\t</p>\t\t\t\n\t\t\t</div>\n\t\t\t<div class=\"buttonrow moveup\">\n\t\t\t\t<button class=\"menubutton\" onclick=\"mmpost({},{mm_view: 'bmi'});\">BMI Form</button>\n\t\t\t</div>\n\t\t\t<p>&nbsp;</p>\n\t\t</div>\n\t</body>\n</html>"
						},
						"inputs": {},
						"f0": "css",
						"f1": "weight[1,\"weight\"]",
						"f2": "bmi.height"
					},
					{
						"name": "JSBridge",
						"Notes": "It is possible for javascript to call a function to initiate a Math Minion calculation without having to submit a form.  This model contains an example demonstrating this feature.",
						"DiagramX": 380,
						"DiagramY": 300,
						"HideInfo": "n",
						"DiagramNotes": "y",
						"Type": "Model",
						"diagramScale": 1,
						"Objects": [
							{
								"name": "JSForm",
								"Notes": "An HTML page that implements a very simple calculator using the javascript bridge to have Math Minion perform calculations without reloading the html page.\n\nRead through the comments in the html to see how it works.",
								"DiagramX": 170,
								"DiagramY": 40,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"Type": "HTML Form",
								"Formula": {
									"Formula": "'<html lang=\"en\"> \n\t<head>\n\t\t<title>mmcalc Example</title>\n\t\t<meta name=\"viewport\" content=\"initial-scale=1.0\">\n\t\t\n\t\t<!-- jquery makes things easier, so I will include the build in version -->\n\t\t<script type=\"text/javascript\" src=\"jquery.js\"></script>\n\t\t\n\t\t<!-- the mmcalc.js file, which is also built in, must be included for the javascript bridge -->\n\t\t<script type=\"text/javascript\" src=\"mmcalc.js\"></script>\n\t\t\n\t\t<script  type=\"text/javascript\">\n\t\t\tfunction calc(op) {  // this function is called each time one of the buttons is pressed\n\t\t\t\tvar a = $('#a').val();\t// the value of the input field with id 'a' is retrieved\n\t\t\t\tif (!a) a = '1';\t\t\t// set it to one if absent - brain dead error avoidance\n\t\t\t\ta = parseFloat(a)\t\t// convert the text into a number\n\n\t\t\t\tvar b = $('#b').val();\t// get the b value as well\n\t\t\t\tif (!b) b = '2';\n\t\t\t\tb = parseFloat(b);\n\n\t\t\t\t // create a dictionary of names and values that will be assigned as parameter values\n\t\t\t\t// to the html form object\n\t\t\t\tvar assignments = { 'a': a, 'b':b  }; \n\n\t\t\t\t// create a second dictionary of formulas that will be evaluated by the html form\n\t\t\t\t// the names will be the keys in the returned dictonary of results\n\t\t\t\t// in this case the formula is the parameter passed by the button pressed and is\n\t\t\t\t// just the name of the expression object whose value is wanted\n\t\t\t\tvar requests = {'x': op };\n\t\t\t\t\n\t\t\t\t// call mmcalc with the assignments and requests dictionary and a call back function\n\t\t\t\t// that will be evaluated when the requests have been calculated.\n\t\t\t\t// The call back function takes a single argument, which is a dictionary of requested results\n\t\t\t\tmmcalc( assignments, requests, function(results) {\n\t\t\t\t\tvar x = results.x;\t\t// get the result corresponding to the request name 'x'\n\t\t\t\t\tif ( x != null )\n\t\t\t\t\t\t$('#a').val(x);\t\t// assign it to the 'a' input field\n\t\t\t\t} );\n\t\t\t}\n\n\t\t</script>\n\t\t<!-- some cosmetic stuff -->\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tbackground-color: #EEFFEE;\n\t\t\t\tfont-size: 20pt;\n\t\t\t}\n\t\t\tinput {\n\t\t\t\tfont-size: 14pt;\n\t\t\t}\n\t\t\ttable {\n\t\t\t\twidth: 310px;\n\t\t\t}\n\t\t\t.note {\n\t\t\t\tfont-size: 14pt;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<!-- The two input fields.  Since everything will be done by the bridge, there is no need to\n\t\t\tenclose them in a form block\n\t\t-->\n\t\t<p>\n\t\t\ta:\n\t\t\t<input type=\"text\" id=\"a\" value=\"<mm>$.a</mm>\">\n\t\t\t<!-- The mm tag is used to fill in previous values when the html page is first rendered.  The mm tags don't\n\t\t\t\tchange as we use the js bridge, but the input values can be overwritten by javascript.\n\t\t\t-->\n\t\t</p>\n\t\t<p>\n\t\t\tb:\n\t\t\t<input type=\"text\" id=\"b\" value=\"<mm>$.b</mm>\">\n\t\t</p>\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<!-- Buttons for the arithmetic operators.  When pressed each will call the calc function\n\t\t\t\t\tand pass the name of the appropriate expression operation\n\t\t\t\t-->\n\t\t\t\t<td><input id=\"input\" type=\"button\" class=\"button\" onclick=\"calc('plus');\" value=\"+\"></td>\n\t\t\t\t<td><input id=\"input\" type=\"button\" onclick=\"calc('minus');\" value=\"-\"></td>\n\t\t\t\t<td><input id=\"input\" type=\"button\" onclick=\"calc('times');\" value=\"*\"></td>\n\t\t\t\t<td><input id=\"input\" type=\"button\" onclick=\"calc('divide');\" value=\"/\"></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<p class=\"note\">\n\t\t\tPressing a key performs that operation between <b>a</b> and <b>b</b> and places the result in <b>a</b>.\n\t\t</p>\n\t</body>\n</html>"
								},
								"inputs": {
									"a": 10,
									"b": 2
								},
								"f0": "$.a",
								"f1": "$.b"
							},
							{
								"name": "times",
								"Notes": "       Calculates a * b",
								"DiagramX": 350,
								"DiagramY": 100,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "a*b"
								}
							},
							{
								"name": "a",
								"Notes": "Retrieves the 'a' value from the form object.",
								"DiagramX": 255,
								"DiagramY": 40,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "jsform.a"
								}
							},
							{
								"name": "b",
								"Notes": "Retrieves the 'b' value from the form object.",
								"DiagramX": 255,
								"DiagramY": 80,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "jsform.b"
								}
							},
							{
								"name": "minus",
								"Notes": "       Calculates a - b",
								"DiagramX": 350,
								"DiagramY": 70,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "a-b"
								}
							},
							{
								"name": "plus",
								"Notes": "       Calculates a + b",
								"DiagramX": 350,
								"DiagramY": 40,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "a+b"
								}
							},
							{
								"name": "divide",
								"Notes": "       Calculates a / b",
								"DiagramX": 350,
								"DiagramY": 130,
								"HideInfo": "y",
								"DiagramNotes": "y",
								"Type": "Expression",
								"Formula": {
									"Formula": "a/b"
								}
							}
						]
					},
					{
						"name": "deleteLast",
						"Notes": "",
						"DiagramX": 285,
						"DiagramY": 445,
						"HideInfo": "y",
						"DiagramNotes": "n",
						"Type": "HTML Form",
						"Formula": {
							"Formula": "'\n<style>\n\tbody {\n\t\tbackground-color: white;\n\t}\n</style>\n<p>Number of weight values is <mm>weight.nrow</mm></p>\n<p>\n\t<button onClick=\"mmpost({},{mm_push: 'weight'})\">Weight Table</button>\n</p>\n<p>\n\t<button onClick=\"mmpost({},\n\t{mm_deleterows: {table:'weight', rows: [<mm>weight.nrow</mm>]},\n\tmm_update: true})\">Delete Row <mm>weight.nrow</mm></button>\n</p>"
						},
						"f0": "weight.nrow",
						"f1": "weight.nrow",
						"f2": "weight.nrow"
					}
				]
			}
		]
	}
}